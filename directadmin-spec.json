{
  "swagger": "2.0",
  "info": {
    "description": "Swagger API for DirectAdmin server",
    "title": "Swagger DirectAdmin API",
    "termsOfService": "https://www.directadmin.com/agreement.php",
    "contact": {
      "name": "API Support",
      "email": "support@directadmin.com"
    },
    "license": {
      "name": "MIT"
    },
    "version": "1.0"
  },
  "basePath": "/",
  "paths": {
    "/api/admin-usage": {
      "get": {
        "security": [
          {
            "DaBasicAuth": []
          }
        ],
        "description": "Get admin's usage (read-only).",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Admin"
        ],
        "summary": "Get admin's usage",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/web.adminUsage"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/apierror.BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/apierror.Unauthorized"
            }
          },
          "402": {
            "description": "Payment Required",
            "schema": {
              "$ref": "#/definitions/apierror.LicenseOverused"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/apierror.AccessDenied"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/apierror.InternalError"
            }
          }
        }
      }
    },
    "/api/change-password": {
      "post": {
        "security": [
          {
            "DaBasicAuth": []
          }
        ],
        "description": "Change system user's unix, mail and FTP password.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Password"
        ],
        "summary": "Change password",
        "parameters": [
          {
            "description": "Request Data",
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/web.chpasswdRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/apierror.BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/apierror.Unauthorized"
            }
          },
          "402": {
            "description": "Payment Required",
            "schema": {
              "$ref": "#/definitions/apierror.LicenseOverused"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/apierror.PreHookError"
            }
          },
          "430": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apierror.AccessDenied"
            }
          },
          "431": {
            "description": "Request Header Fields Too Large",
            "schema": {
              "$ref": "#/definitions/apierror.ChpasswdBadCurrentPassword"
            }
          },
          "490": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apierror.WeakPassword"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/apierror.InternalError"
            }
          }
        }
      }
    },
    "/api/change-user-creator": {
      "post": {
        "security": [
          {
            "DaBasicAuth": []
          }
        ],
        "description": "Change user account creator effectively moving user account from one admin/reseller to other admin/reseller.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Migrate"
        ],
        "summary": "Change user creator (move user between resellers)",
        "parameters": [
          {
            "description": "Request parameters",
            "name": "payload",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/web.changeUserCreatorRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/apierror.BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/apierror.Unauthorized"
            }
          },
          "402": {
            "description": "Payment Required",
            "schema": {
              "$ref": "#/definitions/apierror.LicenseOverused"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/apierror.AccessDenied"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/apierror.AccountRoleMismatch"
            }
          },
          "419": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apierror.AccountNotFound"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/apierror.InternalError"
            }
          }
        }
      }
    },
    "/api/clamav": {
      "get": {
        "security": [
          {
            "DaBasicAuth": []
          }
        ],
        "tags": [
          "ClamAV"
        ],
        "summary": "Get clamAV processes",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/web.clamAVProcsResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/apierror.BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/apierror.Unauthorized"
            }
          },
          "402": {
            "description": "Payment Required",
            "schema": {
              "$ref": "#/definitions/apierror.LicenseOverused"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/apierror.AccessDenied"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/apierror.InternalError"
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "DaBasicAuth": []
          }
        ],
        "tags": [
          "ClamAV"
        ],
        "summary": "Scan directories in the specified path",
        "parameters": [
          {
            "description": "ClamAV params",
            "name": "params",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/web.clamAVRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/apierror.BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/apierror.Unauthorized"
            }
          },
          "402": {
            "description": "Payment Required",
            "schema": {
              "$ref": "#/definitions/apierror.LicenseOverused"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/apierror.AccessDenied"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/apierror.ClamAVPathNotFound"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/apierror.InternalError"
            }
          },
          "501": {
            "description": "Not Implemented",
            "schema": {
              "$ref": "#/definitions/apierror.ClamAVScanLimitError"
            }
          }
        }
      }
    },
    "/api/clamav/{pid}": {
      "delete": {
        "security": [
          {
            "DaBasicAuth": []
          }
        ],
        "tags": [
          "ClamAV"
        ],
        "summary": "Cancel the clamAV process by PID",
        "parameters": [
          {
            "type": "string",
            "description": "PID",
            "name": "pid",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/apierror.BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/apierror.Unauthorized"
            }
          },
          "402": {
            "description": "Payment Required",
            "schema": {
              "$ref": "#/definitions/apierror.LicenseOverused"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/apierror.AccessDenied"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/apierror.ClamAVProcessNotFound"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/apierror.InternalError"
            }
          }
        }
      }
    },
    "/api/convert-reseller-to-user": {
      "post": {
        "security": [
          {
            "DaBasicAuth": []
          }
        ],
        "description": "Change user of reseller type to user type. Admins only CMD.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Migrate"
        ],
        "summary": "Change reseller to user type.",
        "parameters": [
          {
            "description": "User conversion parameters.",
            "name": "payload",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/web.resellerToUserRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/apierror.BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/apierror.Unauthorized"
            }
          },
          "402": {
            "description": "Payment Required",
            "schema": {
              "$ref": "#/definitions/apierror.LicenseOverused"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/apierror.AccessDenied"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/apierror.AccountRoleMismatch"
            }
          },
          "419": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apierror.AccountNotFound"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/apierror.InternalError"
            }
          }
        }
      }
    },
    "/api/convert-user-to-reseller": {
      "post": {
        "security": [
          {
            "DaBasicAuth": []
          }
        ],
        "description": "Change user of user type to reseller type. Admins only CMD.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Migrate"
        ],
        "summary": "Change user to reseller type.",
        "parameters": [
          {
            "description": "Account conversion parameters.",
            "name": "payload",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/web.userToResellerRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/apierror.BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/apierror.Unauthorized"
            }
          },
          "402": {
            "description": "Payment Required",
            "schema": {
              "$ref": "#/definitions/apierror.LicenseOverused"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/apierror.AccessDenied"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/apierror.AccountRoleMismatch"
            }
          },
          "419": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apierror.AccountNotFound"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/apierror.InternalError"
            }
          }
        }
      }
    },
    "/api/cpanel-import/check-remote": {
      "post": {
        "security": [
          {
            "DaBasicAuth": []
          }
        ],
        "tags": [
          "Cpanel"
        ],
        "summary": "Checks SSH connection to remote cPanel server and returns list of remote users",
        "parameters": [
          {
            "description": "Remote cPanel server credentials",
            "name": "params",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/web.cpanelCheckRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/web.cpanelCheckResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/apierror.BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/apierror.Unauthorized"
            }
          },
          "402": {
            "description": "Payment Required",
            "schema": {
              "$ref": "#/definitions/apierror.LicenseOverused"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/apierror.AccessDenied"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/apierror.CpanelImportSSHConnectionFailed"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "schema": {
              "$ref": "#/definitions/apierror.CpanelImportSSHAuthFailed"
            }
          },
          "439": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apierror.CpanelImportSSHNotCpanelServer"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/apierror.InternalError"
            }
          }
        }
      }
    },
    "/api/cpanel-import/tasks": {
      "get": {
        "security": [
          {
            "DaBasicAuth": []
          }
        ],
        "tags": [
          "Cpanel"
        ],
        "summary": "List all cPanel import tasks",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/web.cpanelImportTask"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/apierror.BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/apierror.Unauthorized"
            }
          },
          "402": {
            "description": "Payment Required",
            "schema": {
              "$ref": "#/definitions/apierror.LicenseOverused"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/apierror.AccessDenied"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/apierror.InternalError"
            }
          }
        }
      }
    },
    "/api/cpanel-import/tasks/start": {
      "post": {
        "security": [
          {
            "DaBasicAuth": []
          }
        ],
        "tags": [
          "Cpanel"
        ],
        "summary": "Starts remote cPanel account import to local DirectAdmin server",
        "parameters": [
          {
            "description": "Remote cPanel server credentials and list of accounts to import",
            "name": "params",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/web.cpanelImportStart"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/web.cpanelImportTask"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/apierror.BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/apierror.Unauthorized"
            }
          },
          "402": {
            "description": "Payment Required",
            "schema": {
              "$ref": "#/definitions/apierror.LicenseOverused"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/apierror.AccessDenied"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/apierror.CpanelImportSSHNotCpanelServer"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/apierror.InternalError"
            }
          }
        }
      }
    },
    "/api/cpanel-import/tasks/{id}": {
      "get": {
        "security": [
          {
            "DaBasicAuth": []
          }
        ],
        "tags": [
          "Cpanel"
        ],
        "summary": "Get single cPanel import task",
        "parameters": [
          {
            "type": "string",
            "description": "Task ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/web.cpanelImportTask"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/apierror.BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/apierror.Unauthorized"
            }
          },
          "402": {
            "description": "Payment Required",
            "schema": {
              "$ref": "#/definitions/apierror.LicenseOverused"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/apierror.AccessDenied"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/apierror.NotFound"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/apierror.InternalError"
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "DaBasicAuth": []
          }
        ],
        "tags": [
          "Cpanel"
        ],
        "summary": "Delete single pending cPanel import task",
        "parameters": [
          {
            "type": "string",
            "description": "Task ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Task is deleted or non-existent."
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/apierror.BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/apierror.Unauthorized"
            }
          },
          "402": {
            "description": "Payment Required",
            "schema": {
              "$ref": "#/definitions/apierror.LicenseOverused"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/apierror.AccessDenied"
            }
          },
          "409": {
            "description": "Task cannot be deleted because it has already been executed or is currently running.",
            "schema": {
              "$ref": "#/definitions/apierror.CpanelImportTaskAlreadyStarted"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/apierror.InternalError"
            }
          }
        }
      }
    },
    "/api/cpanel-import/tasks/{id}/log": {
      "get": {
        "security": [
          {
            "DaBasicAuth": []
          }
        ],
        "tags": [
          "Cpanel"
        ],
        "summary": "Retrieve single import task log",
        "parameters": [
          {
            "type": "string",
            "description": "Task ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/web.cpanelImportTaskLog"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/apierror.BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/apierror.Unauthorized"
            }
          },
          "402": {
            "description": "Payment Required",
            "schema": {
              "$ref": "#/definitions/apierror.LicenseOverused"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/apierror.AccessDenied"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/apierror.NotFound"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/apierror.InternalError"
            }
          }
        }
      }
    },
    "/api/cpanel-import/tasks/{id}/log-sse": {
      "get": {
        "security": [
          {
            "DaBasicAuth": []
          }
        ],
        "description": "Connection is closed when import task ends.",
        "tags": [
          "Cpanel"
        ],
        "summary": "Stream import task log",
        "parameters": [
          {
            "type": "string",
            "description": "Task ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Last-Event-Id",
            "name": "lastSeen",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Event data.",
            "schema": {
              "$ref": "#/definitions/web.cpanelImportTaskLog"
            }
          },
          "204": {
            "description": "End of log."
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/apierror.BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/apierror.Unauthorized"
            }
          },
          "402": {
            "description": "Payment Required",
            "schema": {
              "$ref": "#/definitions/apierror.LicenseOverused"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/apierror.AccessDenied"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/apierror.NotFound"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/apierror.InternalError"
            }
          }
        }
      }
    },
    "/api/custombuild/actions": {
      "get": {
        "security": [
          {
            "DaBasicAuth": []
          }
        ],
        "description": "Report available custombuild actions (cached until restart).",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Custombuild"
        ],
        "summary": "Get available custombuild actions",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/web.cbAction"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/apierror.BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/apierror.Unauthorized"
            }
          },
          "402": {
            "description": "Payment Required",
            "schema": {
              "$ref": "#/definitions/apierror.LicenseOverused"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/apierror.AccessDenied"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/apierror.InternalError"
            }
          }
        }
      }
    },
    "/api/custombuild/compile-scripts": {
      "get": {
        "security": [
          {
            "DaBasicAuth": []
          }
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Custombuild"
        ],
        "summary": "Get all custombuild's apps' compile scripts metadata",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/web.cbCompileScriptMetadata"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/apierror.BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/apierror.Unauthorized"
            }
          },
          "402": {
            "description": "Payment Required",
            "schema": {
              "$ref": "#/definitions/apierror.LicenseOverused"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/apierror.AccessDenied"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/apierror.InternalError"
            }
          }
        }
      }
    },
    "/api/custombuild/compile-scripts-custom/{app}": {
      "get": {
        "security": [
          {
            "DaBasicAuth": []
          }
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Custombuild"
        ],
        "summary": "Get custombuild's app's customized compile script",
        "parameters": [
          {
            "type": "string",
            "description": "Application name",
            "name": "app",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/web.cbCompileScript"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/apierror.BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/apierror.Unauthorized"
            }
          },
          "402": {
            "description": "Payment Required",
            "schema": {
              "$ref": "#/definitions/apierror.LicenseOverused"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/apierror.AccessDenied"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/apierror.NotFound"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/apierror.InternalError"
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "DaBasicAuth": []
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Custombuild"
        ],
        "summary": "Set custombuild's app's custom compile script",
        "parameters": [
          {
            "type": "string",
            "description": "Application name",
            "name": "app",
            "in": "path",
            "required": true
          },
          {
            "description": "Request Data",
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/web.cbCompileConfigRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/web.cbCompileScript"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/apierror.BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/apierror.Unauthorized"
            }
          },
          "402": {
            "description": "Payment Required",
            "schema": {
              "$ref": "#/definitions/apierror.LicenseOverused"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/apierror.AccessDenied"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/apierror.NotFound"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/apierror.InternalError"
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "DaBasicAuth": []
          }
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Custombuild"
        ],
        "summary": "Delete custombuild's app's custom compile script (reset to default)",
        "parameters": [
          {
            "type": "string",
            "description": "Application name",
            "name": "app",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/apierror.BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/apierror.Unauthorized"
            }
          },
          "402": {
            "description": "Payment Required",
            "schema": {
              "$ref": "#/definitions/apierror.LicenseOverused"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/apierror.AccessDenied"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/apierror.NotFound"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/apierror.InternalError"
            }
          }
        }
      }
    },
    "/api/custombuild/compile-scripts/{app}": {
      "get": {
        "security": [
          {
            "DaBasicAuth": []
          }
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Custombuild"
        ],
        "summary": "Get custombuild's app's default compile script",
        "parameters": [
          {
            "type": "string",
            "description": "Application name",
            "name": "app",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/web.cbCompileScript"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/apierror.BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/apierror.Unauthorized"
            }
          },
          "402": {
            "description": "Payment Required",
            "schema": {
              "$ref": "#/definitions/apierror.LicenseOverused"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/apierror.AccessDenied"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/apierror.NotFound"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/apierror.InternalError"
            }
          }
        }
      }
    },
    "/api/custombuild/kill": {
      "post": {
        "security": [
          {
            "DaBasicAuth": []
          }
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Custombuild"
        ],
        "summary": "Kill custombuild",
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/apierror.BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/apierror.Unauthorized"
            }
          },
          "402": {
            "description": "Payment Required",
            "schema": {
              "$ref": "#/definitions/apierror.LicenseOverused"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/apierror.AccessDenied"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/apierror.InternalError"
            }
          }
        }
      }
    },
    "/api/custombuild/logs": {
      "get": {
        "security": [
          {
            "DaBasicAuth": []
          }
        ],
        "description": "Get a list of custombuild log files with timestamps and sizes.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Custombuild"
        ],
        "summary": "Get all custombuild log files metadata",
        "responses": {
          "200": {
            "description": "Sorted from newest to oldest.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/web.cbLogMetadata"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/apierror.BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/apierror.Unauthorized"
            }
          },
          "402": {
            "description": "Payment Required",
            "schema": {
              "$ref": "#/definitions/apierror.LicenseOverused"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/apierror.AccessDenied"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/apierror.InternalError"
            }
          }
        }
      }
    },
    "/api/custombuild/logs/{logname}": {
      "delete": {
        "security": [
          {
            "DaBasicAuth": []
          }
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Custombuild"
        ],
        "summary": "Delete custombuild log",
        "parameters": [
          {
            "type": "string",
            "description": "Log file name.",
            "name": "logname",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/apierror.BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/apierror.Unauthorized"
            }
          },
          "402": {
            "description": "Payment Required",
            "schema": {
              "$ref": "#/definitions/apierror.LicenseOverused"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/apierror.AccessDenied"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/apierror.InternalError"
            }
          }
        }
      }
    },
    "/api/custombuild/logs/{logname}/sse": {
      "get": {
        "security": [
          {
            "DaBasicAuth": []
          }
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Custombuild"
        ],
        "summary": "Stream custombuild log file",
        "parameters": [
          {
            "type": "string",
            "description": "Log file name",
            "name": "logname",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Read from position.",
            "name": "Last-Event-Id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Event Data: log file bytes.",
            "schema": {
              "type": "string"
            }
          },
          "204": {
            "description": "End of log file."
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/apierror.BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/apierror.Unauthorized"
            }
          },
          "402": {
            "description": "Payment Required",
            "schema": {
              "$ref": "#/definitions/apierror.LicenseOverused"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/apierror.AccessDenied"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/apierror.NotFound"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/apierror.InternalError"
            }
          }
        }
      }
    },
    "/api/custombuild/options": {
      "get": {
        "security": [
          {
            "DaBasicAuth": []
          }
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Custombuild"
        ],
        "summary": "Get custombuild options",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/web.cbOptions"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/apierror.BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/apierror.Unauthorized"
            }
          },
          "402": {
            "description": "Payment Required",
            "schema": {
              "$ref": "#/definitions/apierror.LicenseOverused"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/apierror.AccessDenied"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/apierror.InternalError"
            }
          }
        }
      },
      "patch": {
        "security": [
          {
            "DaBasicAuth": []
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Custombuild"
        ],
        "summary": "Patch custombuild options",
        "parameters": [
          {
            "description": "Request Data",
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/web.cbOptionsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "All options patched successfully.",
            "schema": {
              "$ref": "#/definitions/web.cbOptions"
            }
          },
          "400": {
            "description": "Some options failed to be patched.",
            "schema": {
              "$ref": "#/definitions/apierror.BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/apierror.Unauthorized"
            }
          },
          "402": {
            "description": "Payment Required",
            "schema": {
              "$ref": "#/definitions/apierror.LicenseOverused"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/apierror.AccessDenied"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/apierror.InternalError"
            }
          }
        }
      }
    },
    "/api/custombuild/options-v2": {
      "get": {
        "security": [
          {
            "DaBasicAuth": []
          }
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Custombuild"
        ],
        "summary": "Get custombuild options",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/web.cbOptionFull"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/apierror.BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/apierror.Unauthorized"
            }
          },
          "402": {
            "description": "Payment Required",
            "schema": {
              "$ref": "#/definitions/apierror.LicenseOverused"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/apierror.AccessDenied"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/apierror.InternalError"
            }
          }
        }
      },
      "patch": {
        "security": [
          {
            "DaBasicAuth": []
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Custombuild"
        ],
        "summary": "Patch custombuild options",
        "parameters": [
          {
            "description": "List of key and value pairs to change",
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/web.cbOptionKV"
              }
            }
          }
        ],
        "responses": {
          "204": {
            "description": "All options updated successfully."
          },
          "400": {
            "description": "Option validation error.",
            "schema": {
              "$ref": "#/definitions/apierror.BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/apierror.Unauthorized"
            }
          },
          "402": {
            "description": "Payment Required",
            "schema": {
              "$ref": "#/definitions/apierror.LicenseOverused"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/apierror.AccessDenied"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/apierror.CBOptionInvalidValue"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/apierror.InternalError"
            }
          }
        }
      }
    },
    "/api/custombuild/options/validate": {
      "get": {
        "security": [
          {
            "DaBasicAuth": []
          }
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Custombuild"
        ],
        "summary": "Get custombuild options validation message",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/web.cbOptionsValidateResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/apierror.BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/apierror.Unauthorized"
            }
          },
          "402": {
            "description": "Payment Required",
            "schema": {
              "$ref": "#/definitions/apierror.LicenseOverused"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/apierror.AccessDenied"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/apierror.InternalError"
            }
          }
        }
      }
    },
    "/api/custombuild/removals": {
      "get": {
        "security": [
          {
            "DaBasicAuth": []
          }
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Custombuild"
        ],
        "summary": "List of custombuild commands to remove no longer needed software",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/web.cbAction"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/apierror.BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/apierror.Unauthorized"
            }
          },
          "402": {
            "description": "Payment Required",
            "schema": {
              "$ref": "#/definitions/apierror.LicenseOverused"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/apierror.AccessDenied"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/apierror.InternalError"
            }
          }
        }
      }
    },
    "/api/custombuild/run": {
      "post": {
        "security": [
          {
            "DaBasicAuth": []
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Custombuild"
        ],
        "summary": "Run Custombuild",
        "parameters": [
          {
            "description": "Request Data",
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/web.cbRunRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/web.cbRunResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/apierror.BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/apierror.Unauthorized"
            }
          },
          "402": {
            "description": "Payment Required",
            "schema": {
              "$ref": "#/definitions/apierror.LicenseOverused"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/apierror.AccessDenied"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/apierror.InternalError"
            }
          }
        }
      }
    },
    "/api/custombuild/software": {
      "get": {
        "security": [
          {
            "DaBasicAuth": []
          }
        ],
        "description": "Report available custombuild software.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Custombuild"
        ],
        "summary": "Get available custombuild software",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/web.cbSoftware"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/apierror.BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/apierror.Unauthorized"
            }
          },
          "402": {
            "description": "Payment Required",
            "schema": {
              "$ref": "#/definitions/apierror.LicenseOverused"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/apierror.AccessDenied"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/apierror.InternalError"
            }
          }
        }
      }
    },
    "/api/custombuild/state": {
      "get": {
        "security": [
          {
            "DaBasicAuth": []
          }
        ],
        "description": "Get number of available updates and whether custombuild is currently running.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Custombuild"
        ],
        "summary": "Get custombuild state",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/web.cbState"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/apierror.BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/apierror.Unauthorized"
            }
          },
          "402": {
            "description": "Payment Required",
            "schema": {
              "$ref": "#/definitions/apierror.LicenseOverused"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/apierror.AccessDenied"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/apierror.InternalError"
            }
          }
        }
      }
    },
    "/api/custombuild/state/sse": {
      "get": {
        "security": [
          {
            "DaBasicAuth": []
          }
        ],
        "description": "Get events about number of available updates and whether custombuild is currently running.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Custombuild"
        ],
        "summary": "Get custombuild state stream",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/web.cbState"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/apierror.BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/apierror.Unauthorized"
            }
          },
          "402": {
            "description": "Payment Required",
            "schema": {
              "$ref": "#/definitions/apierror.LicenseOverused"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/apierror.AccessDenied"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/apierror.InternalError"
            }
          }
        }
      }
    },
    "/api/custombuild/updates": {
      "get": {
        "security": [
          {
            "DaBasicAuth": []
          }
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Custombuild"
        ],
        "summary": "Get available custombuild updates",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/web.cbUpdate"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/apierror.BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/apierror.Unauthorized"
            }
          },
          "402": {
            "description": "Payment Required",
            "schema": {
              "$ref": "#/definitions/apierror.LicenseOverused"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/apierror.AccessDenied"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/apierror.InternalError"
            }
          }
        }
      }
    },
    "/api/custombuild/versions": {
      "get": {
        "security": [
          {
            "DaBasicAuth": []
          }
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Custombuild"
        ],
        "summary": "Get all custombuild's apps default versions",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/web.cbVersion"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/apierror.BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/apierror.Unauthorized"
            }
          },
          "402": {
            "description": "Payment Required",
            "schema": {
              "$ref": "#/definitions/apierror.LicenseOverused"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/apierror.AccessDenied"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/apierror.InternalError"
            }
          }
        }
      }
    },
    "/api/custombuild/versions-custom": {
      "get": {
        "security": [
          {
            "DaBasicAuth": []
          }
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Custombuild"
        ],
        "summary": "Get all custombuild's apps custom versions",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/web.cbVersion"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/apierror.BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/apierror.Unauthorized"
            }
          },
          "402": {
            "description": "Payment Required",
            "schema": {
              "$ref": "#/definitions/apierror.LicenseOverused"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/apierror.AccessDenied"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/apierror.InternalError"
            }
          }
        }
      }
    },
    "/api/custombuild/versions-custom/{app}": {
      "put": {
        "security": [
          {
            "DaBasicAuth": []
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Custombuild"
        ],
        "summary": "Set custombuild's app's custom version",
        "parameters": [
          {
            "type": "string",
            "description": "Application name",
            "name": "app",
            "in": "path",
            "required": true
          },
          {
            "description": "Request Data",
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/web.cbVersionsCustomRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/web.cbVersion"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/apierror.BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/apierror.Unauthorized"
            }
          },
          "402": {
            "description": "Payment Required",
            "schema": {
              "$ref": "#/definitions/apierror.LicenseOverused"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/apierror.AccessDenied"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/apierror.NotFound"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/apierror.InternalError"
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "DaBasicAuth": []
          }
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Custombuild"
        ],
        "summary": "Delete custombuild's app's custom version",
        "parameters": [
          {
            "type": "string",
            "description": "Application name",
            "name": "app",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "App's custom version has been deleted"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/apierror.BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/apierror.Unauthorized"
            }
          },
          "402": {
            "description": "Payment Required",
            "schema": {
              "$ref": "#/definitions/apierror.LicenseOverused"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/apierror.AccessDenied"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/apierror.InternalError"
            }
          }
        }
      }
    },
    "/api/db-manage/clone-db": {
      "post": {
        "security": [
          {
            "DaBasicAuth": []
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Database"
        ],
        "summary": "Clone database",
        "parameters": [
          {
            "description": "Data.",
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/web.dbCloneDatabaseRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/web.dbCloneDatabaseResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/apierror.BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/apierror.Unauthorized"
            }
          },
          "402": {
            "description": "Payment Required",
            "schema": {
              "$ref": "#/definitions/apierror.LicenseOverused"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/apierror.AccessDenied"
            }
          },
          "404": {
            "description": "Source database does not exist.",
            "schema": {
              "$ref": "#/definitions/apierror.NotFound"
            }
          },
          "490": {
            "description": "Database or db user already exists.",
            "schema": {
              "$ref": "#/definitions/apierror.AlreadyExists"
            }
          },
          "491": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apierror.ResellerExceedsLimits"
            }
          },
          "492": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apierror.DatabasesExceedLimit"
            }
          },
          "493": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apierror.DatabaseUsersExceedLimit"
            }
          },
          "494": {
            "description": "Database or db username is invalid.",
            "schema": {
              "$ref": "#/definitions/apierror.DatabaseInvalidEntityName"
            }
          },
          "495": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apierror.DatabaseClone"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/apierror.InternalError"
            }
          }
        }
      }
    },
    "/api/db-manage/create-db": {
      "post": {
        "security": [
          {
            "DaBasicAuth": []
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Database"
        ],
        "summary": "Create empty database",
        "parameters": [
          {
            "description": "Data.",
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/web.dbCreateDatabaseRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/apierror.BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/apierror.Unauthorized"
            }
          },
          "402": {
            "description": "Payment Required",
            "schema": {
              "$ref": "#/definitions/apierror.LicenseOverused"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/apierror.AccessDenied"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/apierror.AlreadyExists"
            }
          },
          "490": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apierror.PreHookError"
            }
          },
          "491": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apierror.DatabasesExceedLimit"
            }
          },
          "492": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apierror.DatabaseInvalidEntityName"
            }
          },
          "493": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apierror.ResellerExceedsLimits"
            }
          },
          "494": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apierror.DatabaseInvalidCharset"
            }
          },
          "495": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apierror.DatabaseInvalidCollation"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/apierror.InternalError"
            }
          }
        }
      }
    },
    "/api/db-manage/create-db-with-user": {
      "post": {
        "security": [
          {
            "DaBasicAuth": []
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Database"
        ],
        "summary": "Create database with user",
        "parameters": [
          {
            "description": "Data.",
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/web.dbCreateDatabaseWithUserRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/web.dbFullConnectionResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/apierror.BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/apierror.Unauthorized"
            }
          },
          "402": {
            "description": "Payment Required",
            "schema": {
              "$ref": "#/definitions/apierror.LicenseOverused"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/apierror.AccessDenied"
            }
          },
          "490": {
            "description": "Database or db user already exists.",
            "schema": {
              "$ref": "#/definitions/apierror.AlreadyExists"
            }
          },
          "491": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apierror.PreHookError"
            }
          },
          "492": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apierror.DatabaseInvalidCharset"
            }
          },
          "493": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apierror.DatabaseInvalidCollation"
            }
          },
          "494": {
            "description": "Database or db username is invalid.",
            "schema": {
              "$ref": "#/definitions/apierror.DatabaseInvalidEntityName"
            }
          },
          "495": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apierror.DatabaseUsersExceedLimit"
            }
          },
          "496": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apierror.DatabasesExceedLimit"
            }
          },
          "497": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apierror.ResellerExceedsLimits"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/apierror.InternalError"
            }
          }
        }
      }
    },
    "/api/db-manage/create-user": {
      "post": {
        "security": [
          {
            "DaBasicAuth": []
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Database"
        ],
        "summary": "Create database user",
        "parameters": [
          {
            "description": "Data.",
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/web.dbCreateUserRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/apierror.BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/apierror.Unauthorized"
            }
          },
          "402": {
            "description": "Payment Required",
            "schema": {
              "$ref": "#/definitions/apierror.LicenseOverused"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/apierror.AccessDenied"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/apierror.AlreadyExists"
            }
          },
          "491": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apierror.DatabaseUsersExceedLimit"
            }
          },
          "492": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apierror.DatabaseInvalidEntityName"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/apierror.InternalError"
            }
          }
        }
      }
    },
    "/api/db-manage/databases/{database}": {
      "delete": {
        "security": [
          {
            "DaBasicAuth": []
          }
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Database"
        ],
        "summary": "Delete database",
        "parameters": [
          {
            "type": "string",
            "description": "Database.",
            "name": "database",
            "in": "path",
            "required": true
          },
          {
            "type": "boolean",
            "description": "Delete users which had access only to the deleted database.",
            "name": "drop-orphan-users",
            "in": "query"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/apierror.Unauthorized"
            }
          },
          "402": {
            "description": "Payment Required",
            "schema": {
              "$ref": "#/definitions/apierror.LicenseOverused"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/apierror.AccessDenied"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/apierror.PreHookError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/apierror.InternalError"
            }
          }
        }
      }
    },
    "/api/db-manage/databases/{database}/check": {
      "post": {
        "security": [
          {
            "DaBasicAuth": []
          }
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Database"
        ],
        "summary": "Check database",
        "parameters": [
          {
            "type": "string",
            "description": "Database.",
            "name": "database",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/web.dbTableActionResult"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/apierror.Unauthorized"
            }
          },
          "402": {
            "description": "Payment Required",
            "schema": {
              "$ref": "#/definitions/apierror.LicenseOverused"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/apierror.AccessDenied"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/apierror.InternalError"
            }
          }
        }
      }
    },
    "/api/db-manage/databases/{database}/export": {
      "get": {
        "security": [
          {
            "DaBasicAuth": []
          }
        ],
        "produces": [
          "application/sql",
          "application/x-gzip",
          "application/json"
        ],
        "tags": [
          "Database"
        ],
        "summary": "Export database",
        "parameters": [
          {
            "type": "string",
            "description": "Database.",
            "name": "database",
            "in": "path",
            "required": true
          },
          {
            "type": "boolean",
            "default": false,
            "description": "Gzipped export.",
            "name": "gzip",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "File contents",
            "schema": {
              "type": "file"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/apierror.Unauthorized"
            }
          },
          "402": {
            "description": "Payment Required",
            "schema": {
              "$ref": "#/definitions/apierror.LicenseOverused"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/apierror.AccessDenied"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/apierror.NotFound"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/apierror.InternalError"
            }
          }
        }
      }
    },
    "/api/db-manage/databases/{database}/fix-definers": {
      "post": {
        "security": [
          {
            "DaBasicAuth": []
          }
        ],
        "description": "Fix broken definers for views, events, routines and triggers in the database. Broken definers include non-existing dbusers or dbusers directadmin user does not have access to.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Database"
        ],
        "summary": "Fix broken database definers",
        "parameters": [
          {
            "type": "string",
            "description": "Database.",
            "name": "database",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/apierror.Unauthorized"
            }
          },
          "402": {
            "description": "Payment Required",
            "schema": {
              "$ref": "#/definitions/apierror.LicenseOverused"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/apierror.AccessDenied"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/apierror.NotFound"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/apierror.DatabaseNoViableDefiner"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/apierror.InternalError"
            }
          }
        }
      }
    },
    "/api/db-manage/databases/{database}/import": {
      "post": {
        "security": [
          {
            "DaBasicAuth": []
          }
        ],
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Database"
        ],
        "summary": "Import database backup",
        "parameters": [
          {
            "type": "string",
            "description": "Database.",
            "name": "database",
            "in": "path",
            "required": true
          },
          {
            "type": "boolean",
            "default": false,
            "description": "Clean database before importing.",
            "name": "clean",
            "in": "query"
          },
          {
            "type": "file",
            "description": "SQL file to import (can be gzipped).",
            "name": "sqlfile",
            "in": "formData",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/apierror.BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/apierror.Unauthorized"
            }
          },
          "402": {
            "description": "Payment Required",
            "schema": {
              "$ref": "#/definitions/apierror.LicenseOverused"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/apierror.AccessDenied"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/apierror.NotFound"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/apierror.DatabaseImport"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/apierror.InternalError"
            }
          }
        }
      }
    },
    "/api/db-manage/databases/{database}/optimize": {
      "post": {
        "security": [
          {
            "DaBasicAuth": []
          }
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Database"
        ],
        "summary": "Optimize database",
        "parameters": [
          {
            "type": "string",
            "description": "Database.",
            "name": "database",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/web.dbTableActionResult"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/apierror.Unauthorized"
            }
          },
          "402": {
            "description": "Payment Required",
            "schema": {
              "$ref": "#/definitions/apierror.LicenseOverused"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/apierror.AccessDenied"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/apierror.InternalError"
            }
          }
        }
      }
    },
    "/api/db-manage/databases/{database}/repair": {
      "post": {
        "security": [
          {
            "DaBasicAuth": []
          }
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Database"
        ],
        "summary": "Repair database",
        "parameters": [
          {
            "type": "string",
            "description": "Database.",
            "name": "database",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/web.dbTableActionResult"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/apierror.Unauthorized"
            }
          },
          "402": {
            "description": "Payment Required",
            "schema": {
              "$ref": "#/definitions/apierror.LicenseOverused"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/apierror.AccessDenied"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/apierror.InternalError"
            }
          }
        }
      }
    },
    "/api/db-manage/users/{dbuser}": {
      "delete": {
        "security": [
          {
            "DaBasicAuth": []
          }
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Database"
        ],
        "summary": "Delete database user",
        "parameters": [
          {
            "type": "string",
            "description": "Database user.",
            "name": "dbuser",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Database user deleted / already was deleted."
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/apierror.Unauthorized"
            }
          },
          "402": {
            "description": "Payment Required",
            "schema": {
              "$ref": "#/definitions/apierror.LicenseOverused"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/apierror.AccessDenied"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/apierror.InternalError"
            }
          }
        }
      }
    },
    "/api/db-manage/users/{dbuser}/change-hosts": {
      "post": {
        "security": [
          {
            "DaBasicAuth": []
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Database"
        ],
        "summary": "Change database user hosts",
        "parameters": [
          {
            "type": "string",
            "description": "Database user.",
            "name": "dbuser",
            "in": "path",
            "required": true
          },
          {
            "description": "New user's host patterns. Valid values include wildcard '%', 'localhost', IPv4 and IPv6 addresses. At least one host pattern must exist but no more than 30.",
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/apierror.BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/apierror.Unauthorized"
            }
          },
          "402": {
            "description": "Payment Required",
            "schema": {
              "$ref": "#/definitions/apierror.LicenseOverused"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/apierror.AccessDenied"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/apierror.NotFound"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/apierror.InternalError"
            }
          }
        }
      }
    },
    "/api/db-manage/users/{dbuser}/change-password": {
      "post": {
        "security": [
          {
            "DaBasicAuth": []
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Database"
        ],
        "summary": "Change database user password",
        "parameters": [
          {
            "type": "string",
            "description": "Database user.",
            "name": "dbuser",
            "in": "path",
            "required": true
          },
          {
            "description": "Data.",
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/web.dbUserChangePasswordRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/apierror.BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/apierror.Unauthorized"
            }
          },
          "402": {
            "description": "Payment Required",
            "schema": {
              "$ref": "#/definitions/apierror.LicenseOverused"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/apierror.AccessDenied"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/apierror.NotFound"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/apierror.PreHookError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/apierror.InternalError"
            }
          }
        }
      }
    },
    "/api/db-manage/users/{dbuser}/databases/{database}/change-privs": {
      "put": {
        "security": [
          {
            "DaBasicAuth": []
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Database"
        ],
        "summary": "Set database privileges for dbuser",
        "parameters": [
          {
            "type": "string",
            "description": "Database.",
            "name": "database",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Database user.",
            "name": "dbuser",
            "in": "path",
            "required": true
          },
          {
            "description": "Data.",
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/web.dbUserChangePrivsRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/apierror.BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/apierror.Unauthorized"
            }
          },
          "402": {
            "description": "Payment Required",
            "schema": {
              "$ref": "#/definitions/apierror.LicenseOverused"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/apierror.AccessDenied"
            }
          },
          "404": {
            "description": "Database or database user does not exist.",
            "schema": {
              "$ref": "#/definitions/apierror.NotFound"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/apierror.InternalError"
            }
          }
        }
      }
    },
    "/api/db-monitor/processes": {
      "get": {
        "security": [
          {
            "DaBasicAuth": []
          }
        ],
        "description": "Exposes MySQL/MariaDB `information_schema.PROCESSLIST` contents.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Database monitor"
        ],
        "summary": "Get database processes list",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/web.dbMonitorProcess"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/apierror.BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/apierror.Unauthorized"
            }
          },
          "402": {
            "description": "Payment Required",
            "schema": {
              "$ref": "#/definitions/apierror.LicenseOverused"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/apierror.AccessDenied"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/apierror.InternalError"
            }
          }
        }
      }
    },
    "/api/db-monitor/processes/{id}/kill": {
      "post": {
        "security": [
          {
            "DaBasicAuth": []
          }
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Database monitor"
        ],
        "summary": "Kill database thread",
        "parameters": [
          {
            "type": "integer",
            "description": "Thread ID.",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/apierror.BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/apierror.Unauthorized"
            }
          },
          "402": {
            "description": "Payment Required",
            "schema": {
              "$ref": "#/definitions/apierror.LicenseOverused"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/apierror.AccessDenied"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/apierror.InternalError"
            }
          }
        }
      }
    },
    "/api/db-show/databases": {
      "get": {
        "security": [
          {
            "DaBasicAuth": []
          }
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Database"
        ],
        "summary": "Get Databases list",
        "parameters": [
          {
            "type": "boolean",
            "default": false,
            "description": "Do not compute size for the databases.",
            "name": "no-size",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/web.dbDatabaseListEntry"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/apierror.Unauthorized"
            }
          },
          "402": {
            "description": "Payment Required",
            "schema": {
              "$ref": "#/definitions/apierror.LicenseOverused"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/apierror.AccessDenied"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/apierror.InternalError"
            }
          }
        }
      }
    },
    "/api/db-show/databases/{database}": {
      "get": {
        "security": [
          {
            "DaBasicAuth": []
          }
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Database"
        ],
        "summary": "Get Database metadata",
        "parameters": [
          {
            "type": "string",
            "description": "Database.",
            "name": "database",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/web.dbDatabaseMetadata"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/apierror.Unauthorized"
            }
          },
          "402": {
            "description": "Payment Required",
            "schema": {
              "$ref": "#/definitions/apierror.LicenseOverused"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/apierror.AccessDenied"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/apierror.NotFound"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/apierror.InternalError"
            }
          }
        }
      }
    },
    "/api/db-show/databases/{database}/users": {
      "get": {
        "security": [
          {
            "DaBasicAuth": []
          }
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Database"
        ],
        "summary": "Get Database info",
        "parameters": [
          {
            "type": "boolean",
            "default": false,
            "description": "Include temporary users in the result.",
            "name": "include-temporary",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Database.",
            "name": "database",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/web.dbDatabaseUser"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/apierror.Unauthorized"
            }
          },
          "402": {
            "description": "Payment Required",
            "schema": {
              "$ref": "#/definitions/apierror.LicenseOverused"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/apierror.AccessDenied"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/apierror.NotFound"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/apierror.InternalError"
            }
          }
        }
      }
    },
    "/api/db-show/info": {
      "get": {
        "security": [
          {
            "DaBasicAuth": []
          }
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Database"
        ],
        "summary": "Database server info",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/web.dbInfoResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/apierror.Unauthorized"
            }
          },
          "402": {
            "description": "Payment Required",
            "schema": {
              "$ref": "#/definitions/apierror.LicenseOverused"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/apierror.AccessDenied"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/apierror.InternalError"
            }
          }
        }
      }
    },
    "/api/db-show/users": {
      "get": {
        "security": [
          {
            "DaBasicAuth": []
          }
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Database"
        ],
        "summary": "Get Users",
        "parameters": [
          {
            "type": "boolean",
            "default": false,
            "description": "Include temporary users in the result.",
            "name": "include-temporary",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/web.dbUser"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/apierror.Unauthorized"
            }
          },
          "402": {
            "description": "Payment Required",
            "schema": {
              "$ref": "#/definitions/apierror.LicenseOverused"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/apierror.AccessDenied"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/apierror.InternalError"
            }
          }
        }
      }
    },
    "/api/db-show/users/{dbuser}": {
      "get": {
        "security": [
          {
            "DaBasicAuth": []
          }
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Database"
        ],
        "summary": "Get User",
        "parameters": [
          {
            "type": "string",
            "description": "Database user.",
            "name": "dbuser",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/web.dbUser"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/apierror.Unauthorized"
            }
          },
          "402": {
            "description": "Payment Required",
            "schema": {
              "$ref": "#/definitions/apierror.LicenseOverused"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/apierror.AccessDenied"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/apierror.NotFound"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/apierror.InternalError"
            }
          }
        }
      }
    },
    "/api/db-show/users/{dbuser}/databases": {
      "get": {
        "security": [
          {
            "DaBasicAuth": []
          }
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Database"
        ],
        "summary": "Get user databases",
        "parameters": [
          {
            "type": "string",
            "description": "Database user.",
            "name": "dbuser",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/web.dbUserDatabase"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/apierror.Unauthorized"
            }
          },
          "402": {
            "description": "Payment Required",
            "schema": {
              "$ref": "#/definitions/apierror.LicenseOverused"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/apierror.AccessDenied"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/apierror.NotFound"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/apierror.InternalError"
            }
          }
        }
      }
    },
    "/api/email-config/mobileconfig": {
      "get": {
        "description": "Installing the Configuration Profile will setup mail account on an Apple device.",
        "produces": [
          "application/x-apple-aspen-config",
          "application/json"
        ],
        "tags": [
          "Email"
        ],
        "summary": "Download Apple Mail Configuration Profile",
        "parameters": [
          {
            "type": "string",
            "description": "Email address.",
            "name": "email",
            "in": "query",
            "required": true
          },
          {
            "enum": [
              "xml",
              "binary",
              "open-step",
              "gnu-step"
            ],
            "type": "string",
            "description": "Configuration Profile encoding format.",
            "name": "format",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/apierror.BadRequest"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/apierror.InternalError"
            }
          }
        }
      }
    },
    "/api/email-logs": {
      "get": {
        "security": [
          {
            "DaBasicAuth": []
          }
        ],
        "description": "Get structured info about emails from logs.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Email"
        ],
        "summary": "Get email logs",
        "parameters": [
          {
            "type": "string",
            "format": "date-time",
            "description": "Time frame start.",
            "name": "from",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "format": "date-time",
            "description": "Time frame end (defaults to 1 day).",
            "name": "to",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Addresses filter.",
            "name": "address",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Domains filter.",
            "name": "domain",
            "in": "query"
          },
          {
            "enum": [
              "delivered",
              "deferred",
              "failed",
              "unknown"
            ],
            "type": "string",
            "description": "Email state filter.",
            "name": "state",
            "in": "query"
          },
          {
            "enum": [
              "in",
              "out"
            ],
            "type": "string",
            "description": "Mail type (direction) filter.",
            "name": "type",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/web.emailLogResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/apierror.BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/apierror.Unauthorized"
            }
          },
          "402": {
            "description": "Payment Required",
            "schema": {
              "$ref": "#/definitions/apierror.LicenseOverused"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/apierror.AccessDenied"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/apierror.InternalError"
            }
          }
        }
      }
    },
    "/api/email-logs-summary": {
      "get": {
        "security": [
          {
            "DaBasicAuth": []
          }
        ],
        "description": "Get summarized emails in time frame.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Email"
        ],
        "summary": "Get emails log summary",
        "parameters": [
          {
            "type": "string",
            "format": "date-time",
            "description": "Time frame start.",
            "name": "from",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "format": "date-time",
            "description": "Time frame end (defaults to 1 day).",
            "name": "to",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/web.emailLogsSummary"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/apierror.BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/apierror.Unauthorized"
            }
          },
          "402": {
            "description": "Payment Required",
            "schema": {
              "$ref": "#/definitions/apierror.LicenseOverused"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/apierror.AccessDenied"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/apierror.InternalError"
            }
          }
        }
      }
    },
    "/api/emailvacation/{domain}": {
      "get": {
        "security": [
          {
            "DaBasicAuth": []
          }
        ],
        "tags": [
          "Vacation"
        ],
        "summary": "List vacation schedules for all mail users in domain",
        "parameters": [
          {
            "type": "string",
            "description": "Domain",
            "name": "domain",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "$ref": "#/definitions/web.EmailVacation"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/apierror.BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/apierror.Unauthorized"
            }
          },
          "402": {
            "description": "Payment Required",
            "schema": {
              "$ref": "#/definitions/apierror.LicenseOverused"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/apierror.AccessDenied"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/apierror.InternalError"
            }
          }
        }
      }
    },
    "/api/emailvacation/{domain}/{user}": {
      "get": {
        "security": [
          {
            "DaBasicAuth": []
          }
        ],
        "tags": [
          "Vacation"
        ],
        "summary": "List detailed vacation configuration for user.",
        "parameters": [
          {
            "type": "string",
            "description": "Domain",
            "name": "domain",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Email user",
            "name": "user",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/web.EmailVacationDetail"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/apierror.BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/apierror.Unauthorized"
            }
          },
          "402": {
            "description": "Payment Required",
            "schema": {
              "$ref": "#/definitions/apierror.LicenseOverused"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/apierror.AccessDenied"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/apierror.NotFound"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/apierror.InternalError"
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "DaBasicAuth": []
          }
        ],
        "tags": [
          "Vacation"
        ],
        "summary": "create or modify vacation configuration for user.",
        "parameters": [
          {
            "type": "string",
            "description": "Domain",
            "name": "domain",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Email user",
            "name": "user",
            "in": "path",
            "required": true
          },
          {
            "description": "Email user",
            "name": "details",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/web.EmailVacationDetail"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/apierror.BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/apierror.Unauthorized"
            }
          },
          "402": {
            "description": "Payment Required",
            "schema": {
              "$ref": "#/definitions/apierror.LicenseOverused"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/apierror.AccessDenied"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/apierror.NotFound"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/apierror.PreHookError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/apierror.InternalError"
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "DaBasicAuth": []
          }
        ],
        "tags": [
          "Vacation"
        ],
        "summary": "delete vacation configuration for user.",
        "parameters": [
          {
            "type": "string",
            "description": "Domain",
            "name": "domain",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Email user",
            "name": "user",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/apierror.BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/apierror.Unauthorized"
            }
          },
          "402": {
            "description": "Payment Required",
            "schema": {
              "$ref": "#/definitions/apierror.LicenseOverused"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/apierror.AccessDenied"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/apierror.NotFound"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/apierror.InternalError"
            }
          }
        }
      }
    },
    "/api/execute": {
      "post": {
        "security": [
          {
            "DaBasicAuth": []
          }
        ],
        "tags": [
          "Exec"
        ],
        "summary": "Executes command with options under user privileges",
        "parameters": [
          {
            "description": "command to execute",
            "name": "payload",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/web.execPayload"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/web.execResult"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/apierror.BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/apierror.Unauthorized"
            }
          },
          "402": {
            "description": "Payment Required",
            "schema": {
              "$ref": "#/definitions/apierror.LicenseOverused"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/apierror.AccessDenied"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/apierror.PreHookError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/apierror.InternalError"
            }
          }
        }
      }
    },
    "/api/filemanager/disk-usage": {
      "get": {
        "security": [
          {
            "DaBasicAuth": []
          }
        ],
        "description": "Get disk usage about a file or a directory.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Filemanager"
        ],
        "summary": "Disk usage.",
        "parameters": [
          {
            "type": "string",
            "default": "/",
            "description": "File path, chrooted to user's home dir.",
            "name": "path",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/web.fmDiskUsageResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/apierror.BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/apierror.Unauthorized"
            }
          },
          "402": {
            "description": "Payment Required",
            "schema": {
              "$ref": "#/definitions/apierror.LicenseOverused"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/apierror.AccessDenied"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/apierror.NotFound"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/apierror.InternalError"
            }
          }
        }
      }
    },
    "/api/filemanager/download": {
      "get": {
        "security": [
          {
            "DaBasicAuth": []
          }
        ],
        "description": "Download content of a regular file from the system.",
        "produces": [
          "*/*",
          "application/json"
        ],
        "tags": [
          "Filemanager"
        ],
        "summary": "Download file.",
        "parameters": [
          {
            "type": "string",
            "default": "/",
            "description": "File path, chrooted to user's home dir.",
            "name": "path",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "File content.",
            "schema": {
              "type": "file"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/apierror.Unauthorized"
            }
          },
          "402": {
            "description": "Payment Required",
            "schema": {
              "$ref": "#/definitions/apierror.LicenseOverused"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/apierror.AccessDenied"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/apierror.NotFound"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/apierror.InternalError"
            }
          }
        }
      }
    },
    "/api/filemanager/list": {
      "get": {
        "security": [
          {
            "DaBasicAuth": []
          }
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Filemanager"
        ],
        "summary": "List directory contents.",
        "parameters": [
          {
            "type": "string",
            "default": "/",
            "description": "Directory path, chrooted to user's home dir.",
            "name": "path",
            "in": "query"
          },
          {
            "type": "string",
            "description": "File name query.",
            "name": "query",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 1000,
            "description": "Files limit (0 disables it).",
            "name": "limit",
            "in": "query"
          },
          {
            "minimum": 0,
            "type": "integer",
            "default": 0,
            "description": "Files offset.",
            "name": "offset",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/web.fmListResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/apierror.BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/apierror.Unauthorized"
            }
          },
          "402": {
            "description": "Payment Required",
            "schema": {
              "$ref": "#/definitions/apierror.LicenseOverused"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/apierror.AccessDenied"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/apierror.NotFound"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/apierror.InternalError"
            }
          }
        }
      }
    },
    "/api/filemanager/metadata": {
      "get": {
        "security": [
          {
            "DaBasicAuth": []
          }
        ],
        "description": "Get data about any type of file in the system.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Filemanager"
        ],
        "summary": "File metadata.",
        "parameters": [
          {
            "type": "string",
            "default": "/",
            "description": "File path, chrooted to user's home dir.",
            "name": "path",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/web.fmMetadataResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/apierror.BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/apierror.Unauthorized"
            }
          },
          "402": {
            "description": "Payment Required",
            "schema": {
              "$ref": "#/definitions/apierror.LicenseOverused"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/apierror.AccessDenied"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/apierror.NotFound"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/apierror.InternalError"
            }
          }
        }
      }
    },
    "/api/filemanager/tree": {
      "get": {
        "security": [
          {
            "DaBasicAuth": []
          }
        ],
        "description": "Get directories and symlinks pointing to directories tree.\nSymlinks that point to directories are not followed any further.\nDirectories marked with `incomplete` flag report that directory wasn't fully traversed, this could happen due to either `rooted` or `filelimit` query params.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Filemanager"
        ],
        "summary": "Directories tree.",
        "parameters": [
          {
            "type": "string",
            "default": "/",
            "description": "Directory path, chrooted to user's home dir.",
            "name": "path",
            "in": "query"
          },
          {
            "minimum": 0,
            "type": "integer",
            "default": 1,
            "description": "Tree depth limit (0 disables it).",
            "name": "depth",
            "in": "query"
          },
          {
            "minimum": 0,
            "type": "integer",
            "default": 1000,
            "description": "Directory files limit: directories that exceed this limit are not traversed (0 disables it).",
            "name": "filelimit",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "Return a full tree starting from root, with directories before path marked with `incomplete` flag.",
            "name": "rooted",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/web.fmTreeResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/apierror.BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/apierror.Unauthorized"
            }
          },
          "402": {
            "description": "Payment Required",
            "schema": {
              "$ref": "#/definitions/apierror.LicenseOverused"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/apierror.AccessDenied"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/apierror.NotFound"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/apierror.InternalError"
            }
          }
        }
      }
    },
    "/api/filemanager/upload": {
      "post": {
        "security": [
          {
            "DaBasicAuth": []
          }
        ],
        "description": "Upload file to the system.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Filemanager"
        ],
        "summary": "Upload file.",
        "parameters": [
          {
            "type": "string",
            "description": "File path, chrooted to user's home dir.",
            "name": "path",
            "in": "query",
            "required": true
          },
          {
            "type": "integer",
            "description": "File permissions in decimal format (if omitted, defaults according to umask).",
            "name": "perm",
            "in": "query"
          },
          {
            "description": "File content.",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/apierror.Unauthorized"
            }
          },
          "402": {
            "description": "Payment Required",
            "schema": {
              "$ref": "#/definitions/apierror.LicenseOverused"
            }
          },
          "403": {
            "description": "Missing permissions for directory.",
            "schema": {
              "$ref": "#/definitions/apierror.AccessDenied"
            }
          },
          "404": {
            "description": "Path does not exist.",
            "schema": {
              "$ref": "#/definitions/apierror.NotFound"
            }
          },
          "409": {
            "description": "File already exists.",
            "schema": {
              "$ref": "#/definitions/apierror.AlreadyExists"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/apierror.InternalError"
            }
          }
        }
      }
    },
    "/api/git/domain/{domain}": {
      "get": {
        "security": [
          {
            "DaBasicAuth": []
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Git"
        ],
        "summary": "Returns information about all the repositories under the user's domain",
        "parameters": [
          {
            "type": "string",
            "description": "Domain",
            "name": "domain",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/web.gitRepositoryResult"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/apierror.Unauthorized"
            }
          },
          "402": {
            "description": "Payment Required",
            "schema": {
              "$ref": "#/definitions/apierror.LicenseOverused"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/apierror.AccessDenied"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/apierror.InternalError"
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "DaBasicAuth": []
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Git"
        ],
        "summary": "Initializes a repository or clones a remote one",
        "parameters": [
          {
            "type": "string",
            "description": "Domain",
            "name": "domain",
            "in": "path",
            "required": true
          },
          {
            "description": "payload",
            "name": "payload",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/web.gitCreateParameters"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/web.gitRepositoryResult"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/apierror.BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/apierror.Unauthorized"
            }
          },
          "402": {
            "description": "Payment Required",
            "schema": {
              "$ref": "#/definitions/apierror.LicenseOverused"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/apierror.AccessDenied"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/apierror.GitExecError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/apierror.InternalError"
            }
          }
        }
      }
    },
    "/api/git/user/{username}/uuid/{uuid}/webhook": {
      "post": {
        "tags": [
          "Git"
        ],
        "summary": "fetches and deploys repository",
        "parameters": [
          {
            "type": "string",
            "description": "UUID",
            "name": "uuid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Username",
            "name": "username",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/apierror.AccessDenied"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/apierror.GitExecError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/apierror.InternalError"
            }
          }
        }
      }
    },
    "/api/git/uuid/{uuid}": {
      "get": {
        "security": [
          {
            "DaBasicAuth": []
          }
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Git"
        ],
        "summary": "Returns information about one repository under user domain",
        "parameters": [
          {
            "type": "string",
            "description": "UUID",
            "name": "uuid",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/web.gitRepositoryResult"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/apierror.Unauthorized"
            }
          },
          "402": {
            "description": "Payment Required",
            "schema": {
              "$ref": "#/definitions/apierror.LicenseOverused"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/apierror.AccessDenied"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/apierror.InternalError"
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "DaBasicAuth": []
          }
        ],
        "consumes": [
          "application/json"
        ],
        "tags": [
          "Git"
        ],
        "summary": "Updates repository settings",
        "parameters": [
          {
            "type": "string",
            "description": "UUID",
            "name": "uuid",
            "in": "path",
            "required": true
          },
          {
            "description": "payload",
            "name": "payload",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/web.gitUpdateParameters"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/apierror.BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/apierror.Unauthorized"
            }
          },
          "402": {
            "description": "Payment Required",
            "schema": {
              "$ref": "#/definitions/apierror.LicenseOverused"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/apierror.AccessDenied"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/apierror.InternalError"
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "DaBasicAuth": []
          }
        ],
        "tags": [
          "Git"
        ],
        "summary": "Removes repository",
        "parameters": [
          {
            "type": "string",
            "description": "UUID",
            "name": "uuid",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/apierror.Unauthorized"
            }
          },
          "402": {
            "description": "Payment Required",
            "schema": {
              "$ref": "#/definitions/apierror.LicenseOverused"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/apierror.AccessDenied"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/apierror.InternalError"
            }
          }
        }
      }
    },
    "/api/git/uuid/{uuid}/branch/{branch}": {
      "get": {
        "security": [
          {
            "DaBasicAuth": []
          }
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Git"
        ],
        "summary": "Returns repository's branch log history",
        "parameters": [
          {
            "type": "string",
            "description": "UUID",
            "name": "uuid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Branch",
            "name": "branch",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "default": 0,
            "description": "Skip N commits",
            "name": "skip",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 10,
            "description": "Limit",
            "name": "limit",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/web.gitLogResult"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/apierror.BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/apierror.Unauthorized"
            }
          },
          "402": {
            "description": "Payment Required",
            "schema": {
              "$ref": "#/definitions/apierror.LicenseOverused"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/apierror.AccessDenied"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/apierror.GitExecError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/apierror.InternalError"
            }
          }
        }
      }
    },
    "/api/git/uuid/{uuid}/commit/{commit}": {
      "get": {
        "security": [
          {
            "DaBasicAuth": []
          }
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Git"
        ],
        "summary": "Returns commit information",
        "parameters": [
          {
            "type": "string",
            "description": "UUID",
            "name": "uuid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "commit",
            "name": "commit",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/web.gitCommitInfoResult"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/apierror.Unauthorized"
            }
          },
          "402": {
            "description": "Payment Required",
            "schema": {
              "$ref": "#/definitions/apierror.LicenseOverused"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/apierror.AccessDenied"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/apierror.GitExecError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/apierror.InternalError"
            }
          }
        }
      }
    },
    "/api/git/uuid/{uuid}/deploy": {
      "post": {
        "security": [
          {
            "DaBasicAuth": []
          }
        ],
        "tags": [
          "Git"
        ],
        "summary": "Deploys bare repository to a working tree",
        "parameters": [
          {
            "type": "string",
            "description": "UUID",
            "name": "uuid",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/apierror.Unauthorized"
            }
          },
          "402": {
            "description": "Payment Required",
            "schema": {
              "$ref": "#/definitions/apierror.LicenseOverused"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/apierror.AccessDenied"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/apierror.GitDeployBranchNotSet"
            }
          },
          "419": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apierror.GitDeployDirNotSet"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "schema": {
              "$ref": "#/definitions/apierror.GitExecError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/apierror.InternalError"
            }
          }
        }
      }
    },
    "/api/git/uuid/{uuid}/fetch": {
      "post": {
        "security": [
          {
            "DaBasicAuth": []
          }
        ],
        "consumes": [
          "application/json"
        ],
        "tags": [
          "Git"
        ],
        "summary": "Fetches latest repository changes from the remote",
        "parameters": [
          {
            "type": "string",
            "description": "UUID",
            "name": "uuid",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/apierror.Unauthorized"
            }
          },
          "402": {
            "description": "Payment Required",
            "schema": {
              "$ref": "#/definitions/apierror.LicenseOverused"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/apierror.AccessDenied"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/apierror.GitExecError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/apierror.InternalError"
            }
          }
        }
      }
    },
    "/api/imapsync/export": {
      "post": {
        "security": [
          {
            "DaBasicAuth": []
          }
        ],
        "tags": [
          "Imapsync"
        ],
        "summary": "Export emails over IMAP from DirecTadmin server to external server",
        "parameters": [
          {
            "description": "Export parameters",
            "name": "params",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/web.imapsyncExportRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/apierror.BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/apierror.Unauthorized"
            }
          },
          "402": {
            "description": "Payment Required",
            "schema": {
              "$ref": "#/definitions/apierror.LicenseOverused"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/apierror.AccessDenied"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/apierror.NotFound"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/apierror.ImapsyncMigrationLimitError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/apierror.InternalError"
            }
          },
          "520": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apierror.ImapsyncAuthenticationFailure"
            }
          },
          "521": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apierror.ImapsyncConnectionFailure"
            }
          },
          "522": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apierror.ImapsyncConnectionFailureHostSrc"
            }
          },
          "523": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apierror.ImapsyncConnectionFailureHostDst"
            }
          },
          "524": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apierror.ImapsyncAuthenticationFailureUserSrc"
            }
          },
          "525": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apierror.ImapsyncAuthenticationFailureUserDst"
            }
          }
        }
      }
    },
    "/api/imapsync/import": {
      "post": {
        "security": [
          {
            "DaBasicAuth": []
          }
        ],
        "tags": [
          "Imapsync"
        ],
        "summary": "Import emails over IMAP from external server to DirectAdmin server",
        "parameters": [
          {
            "description": "Import parameters",
            "name": "params",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/web.imapsyncImportRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/apierror.BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/apierror.Unauthorized"
            }
          },
          "402": {
            "description": "Payment Required",
            "schema": {
              "$ref": "#/definitions/apierror.LicenseOverused"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/apierror.AccessDenied"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/apierror.NotFound"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/apierror.ImapsyncMigrationLimitError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/apierror.InternalError"
            }
          },
          "520": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apierror.ImapsyncAuthenticationFailure"
            }
          },
          "521": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apierror.ImapsyncConnectionFailure"
            }
          },
          "522": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apierror.ImapsyncConnectionFailureHostSrc"
            }
          },
          "523": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apierror.ImapsyncConnectionFailureHostDst"
            }
          },
          "524": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apierror.ImapsyncAuthenticationFailureUserSrc"
            }
          },
          "525": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apierror.ImapsyncAuthenticationFailureUserDst"
            }
          }
        }
      }
    },
    "/api/imapsync/migrations": {
      "get": {
        "security": [
          {
            "DaBasicAuth": []
          }
        ],
        "tags": [
          "Imapsync"
        ],
        "summary": "List all running imapsync migrations",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/web.imapsyncMigration"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/apierror.BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/apierror.Unauthorized"
            }
          },
          "402": {
            "description": "Payment Required",
            "schema": {
              "$ref": "#/definitions/apierror.LicenseOverused"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/apierror.AccessDenied"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/apierror.InternalError"
            }
          }
        }
      }
    },
    "/api/imapsync/migrations/{id}": {
      "delete": {
        "security": [
          {
            "DaBasicAuth": []
          }
        ],
        "tags": [
          "Imapsync"
        ],
        "summary": "Cancel imapsync migration",
        "parameters": [
          {
            "type": "string",
            "description": "Migration ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/apierror.BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/apierror.Unauthorized"
            }
          },
          "402": {
            "description": "Payment Required",
            "schema": {
              "$ref": "#/definitions/apierror.LicenseOverused"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/apierror.AccessDenied"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/apierror.ImapsyncProcessNotFound"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/apierror.InternalError"
            }
          }
        }
      }
    },
    "/api/info": {
      "get": {
        "description": "Fetch basic server information.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Info"
        ],
        "summary": "Get basic server info",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/web.loginInfo"
            }
          }
        }
      }
    },
    "/api/license": {
      "get": {
        "security": [
          {
            "DaBasicAuth": []
          }
        ],
        "description": "Get license info (admins only).",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Licensing"
        ],
        "summary": "Get license info",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/web.licenseResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/apierror.BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/apierror.Unauthorized"
            }
          },
          "402": {
            "description": "Payment Required",
            "schema": {
              "$ref": "#/definitions/apierror.LicenseOverused"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/apierror.AccessDenied"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/apierror.InternalError"
            }
          }
        }
      }
    },
    "/api/license/proof": {
      "get": {
        "security": [
          {
            "DaBasicAuth": []
          }
        ],
        "description": "Generate license session proof for independent verification.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Licensing"
        ],
        "summary": "Get license session proof",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/web.licenseProofResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/apierror.BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/apierror.Unauthorized"
            }
          },
          "402": {
            "description": "Payment Required",
            "schema": {
              "$ref": "#/definitions/apierror.LicenseOverused"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/apierror.AccessDenied"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/apierror.InternalError"
            }
          },
          "503": {
            "description": "Service Unavailable",
            "schema": {
              "$ref": "#/definitions/apierror.LicenseSessionNotConnected"
            }
          }
        }
      }
    },
    "/api/license/update-key": {
      "post": {
        "security": [
          {
            "DaBasicAuth": []
          }
        ],
        "description": "Verify new license key is valid, switch to it and restart DirectAdmin.\nVerification is skipped if `force` is set to `true`.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Licensing"
        ],
        "summary": "Change license key",
        "parameters": [
          {
            "description": "Request Data",
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/web.licenseUpdateRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/apierror.BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/apierror.Unauthorized"
            }
          },
          "402": {
            "description": "Payment Required",
            "schema": {
              "$ref": "#/definitions/apierror.LicenseOverused"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/apierror.AccessDenied"
            }
          },
          "409": {
            "description": "License verification failed.",
            "schema": {
              "$ref": "#/definitions/apierror.LicenseInvalid"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/apierror.InternalError"
            }
          }
        }
      }
    },
    "/api/login": {
      "post": {
        "tags": [
          "Session control"
        ],
        "summary": "Create Login session",
        "parameters": [
          {
            "description": "Authentication attributes",
            "name": "params",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/web.LoginRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/web.LoginResult"
            },
            "headers": {
              "Set-Cookie": {
                "type": "string",
                "description": "`session`: session hash used for subsequent authorizations. `otp_trust_grant` (when `otp.remember` is set): allows user to skip OTP check for `twostep_auth_trust_days`"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/apierror.BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/apierror.Unauthorized"
            }
          },
          "403": {
            "description": "User account is disabled.",
            "schema": {
              "$ref": "#/definitions/apierror.LoginAccountDisabled"
            }
          },
          "409": {
            "description": "password is correct, but two step code required to finalize authentication. Resend request User and Password unchanged, but add OTPCode and OTPTrustDevice(optional), if client wants to skip 2fa authentication",
            "schema": {
              "$ref": "#/definitions/apierror.LoginFailedOTPResponse"
            }
          },
          "431": {
            "description": "Login key is valid but only for API access.",
            "schema": {
              "$ref": "#/definitions/apierror.LoginKeyAPIOnly"
            }
          },
          "492": {
            "description": "One of the hook scripts returned with non-zero exit, aborting the login",
            "schema": {
              "$ref": "#/definitions/apierror.PreHookError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/apierror.InternalError"
            }
          }
        }
      }
    },
    "/api/login-history": {
      "get": {
        "security": [
          {
            "DaBasicAuth": []
          }
        ],
        "description": "Get authenticated user's login history.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Users"
        ],
        "summary": "Get login history",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/web.userLoginHistory"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/apierror.BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/apierror.Unauthorized"
            }
          },
          "402": {
            "description": "Payment Required",
            "schema": {
              "$ref": "#/definitions/apierror.LicenseOverused"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/apierror.AccessDenied"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/apierror.InternalError"
            }
          }
        }
      }
    },
    "/api/login-keys/commands": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Login keys"
        ],
        "summary": "Get all commands available for login keys",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/web.loginKeyCommandsResponse"
            }
          }
        }
      }
    },
    "/api/login-keys/keys": {
      "get": {
        "security": [
          {
            "DaBasicAuth": []
          }
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Login keys"
        ],
        "summary": "Get all login keys",
        "responses": {
          "200": {
            "description": "Sorted from newest to oldest.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/web.loginKeyResponse"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/apierror.BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/apierror.Unauthorized"
            }
          },
          "402": {
            "description": "Payment Required",
            "schema": {
              "$ref": "#/definitions/apierror.LicenseOverused"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/apierror.AccessDenied"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/apierror.InternalError"
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "DaBasicAuth": []
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Login keys"
        ],
        "summary": "Create login key",
        "parameters": [
          {
            "description": "Request Data",
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/web.loginKeyCreateRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/web.loginKeyResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/apierror.BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/apierror.Unauthorized"
            }
          },
          "402": {
            "description": "Payment Required",
            "schema": {
              "$ref": "#/definitions/apierror.LicenseOverused"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/apierror.AccessDenied"
            }
          },
          "430": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apierror.LoginKeyBadCurrentPassword"
            }
          },
          "490": {
            "description": "Login key with given id already exists.",
            "schema": {
              "$ref": "#/definitions/apierror.LoginKeyAlreadyExists"
            }
          },
          "491": {
            "description": "Login key with given password already exists.",
            "schema": {
              "$ref": "#/definitions/apierror.LoginKeyDuplicatePassword"
            }
          },
          "492": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apierror.WeakPassword"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/apierror.InternalError"
            }
          }
        }
      }
    },
    "/api/login-keys/keys/{id}": {
      "get": {
        "security": [
          {
            "DaBasicAuth": []
          }
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Login keys"
        ],
        "summary": "Get login key",
        "parameters": [
          {
            "type": "string",
            "description": "Login key ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/web.loginKeyResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/apierror.BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/apierror.Unauthorized"
            }
          },
          "402": {
            "description": "Payment Required",
            "schema": {
              "$ref": "#/definitions/apierror.LicenseOverused"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/apierror.AccessDenied"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/apierror.NotFound"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/apierror.InternalError"
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "DaBasicAuth": []
          }
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Login keys"
        ],
        "summary": "Delete login key",
        "parameters": [
          {
            "type": "string",
            "description": "Login key ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/apierror.BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/apierror.Unauthorized"
            }
          },
          "402": {
            "description": "Payment Required",
            "schema": {
              "$ref": "#/definitions/apierror.LicenseOverused"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/apierror.AccessDenied"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/apierror.LoginKeyReadOnly"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/apierror.InternalError"
            }
          }
        }
      },
      "patch": {
        "security": [
          {
            "DaBasicAuth": []
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Login keys"
        ],
        "summary": "Update login key",
        "parameters": [
          {
            "type": "string",
            "description": "Login key ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "description": "Request Data",
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/web.loginKeyUpdateRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/web.loginKeyResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/apierror.BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/apierror.Unauthorized"
            }
          },
          "402": {
            "description": "Payment Required",
            "schema": {
              "$ref": "#/definitions/apierror.LicenseOverused"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/apierror.AccessDenied"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/apierror.NotFound"
            }
          },
          "430": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apierror.LoginKeyBadCurrentPassword"
            }
          },
          "490": {
            "description": "Login key with given password already exists.",
            "schema": {
              "$ref": "#/definitions/apierror.LoginKeyDuplicatePassword"
            }
          },
          "491": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apierror.LoginKeyReadOnly"
            }
          },
          "492": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apierror.WeakPassword"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/apierror.InternalError"
            }
          }
        }
      }
    },
    "/api/login-keys/keys/{id}/history": {
      "get": {
        "security": [
          {
            "DaBasicAuth": []
          }
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Login keys"
        ],
        "summary": "Get login key history",
        "parameters": [
          {
            "type": "string",
            "description": "Login key ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Sorted from newest to oldest.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/web.loginKeyHistoryEntry"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/apierror.BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/apierror.Unauthorized"
            }
          },
          "402": {
            "description": "Payment Required",
            "schema": {
              "$ref": "#/definitions/apierror.LicenseOverused"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/apierror.AccessDenied"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/apierror.NotFound"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/apierror.InternalError"
            }
          }
        }
      }
    },
    "/api/login-keys/urls": {
      "get": {
        "security": [
          {
            "DaBasicAuth": []
          }
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Login keys"
        ],
        "summary": "Get all login URLs",
        "responses": {
          "200": {
            "description": "Sorted from newest to oldest.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/web.loginURLResponse"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/apierror.BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/apierror.Unauthorized"
            }
          },
          "402": {
            "description": "Payment Required",
            "schema": {
              "$ref": "#/definitions/apierror.LicenseOverused"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/apierror.AccessDenied"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/apierror.InternalError"
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "DaBasicAuth": []
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Login keys"
        ],
        "summary": "Create login URL",
        "parameters": [
          {
            "description": "Request Data",
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/web.loginURLCreateRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/web.loginURLCreateResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/apierror.BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/apierror.Unauthorized"
            }
          },
          "402": {
            "description": "Payment Required",
            "schema": {
              "$ref": "#/definitions/apierror.LicenseOverused"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/apierror.AccessDenied"
            }
          },
          "430": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apierror.LoginKeyBadCurrentPassword"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/apierror.InternalError"
            }
          }
        }
      }
    },
    "/api/login-keys/urls/{id}": {
      "delete": {
        "security": [
          {
            "DaBasicAuth": []
          }
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Login keys"
        ],
        "summary": "Delete login URL",
        "parameters": [
          {
            "type": "string",
            "description": "Login key ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/apierror.BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/apierror.Unauthorized"
            }
          },
          "402": {
            "description": "Payment Required",
            "schema": {
              "$ref": "#/definitions/apierror.LicenseOverused"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/apierror.AccessDenied"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/apierror.InternalError"
            }
          }
        }
      }
    },
    "/api/login/url": {
      "get": {
        "description": "Endpoint intended to handle login urls.",
        "tags": [
          "Session control"
        ],
        "summary": "Create Login session using OTP",
        "parameters": [
          {
            "type": "string",
            "description": "One time password.",
            "name": "key",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "303": {
            "description": "See Other"
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/apierror.InternalError"
            }
          }
        }
      }
    },
    "/api/logout": {
      "post": {
        "security": [
          {
            "DaBasicAuth": []
          }
        ],
        "tags": [
          "Session control"
        ],
        "summary": "Create Login session",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/web.LogoutResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/apierror.Unauthorized"
            }
          },
          "402": {
            "description": "Payment Required",
            "schema": {
              "$ref": "#/definitions/apierror.LicenseOverused"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/apierror.AccessDenied"
            }
          }
        }
      }
    },
    "/api/maintenance": {
      "get": {
        "security": [
          {
            "DaBasicAuth": []
          }
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Maintenance"
        ],
        "summary": "List maintenance tasks",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/web.maintenanceTask"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/apierror.Unauthorized"
            }
          },
          "402": {
            "description": "Payment Required",
            "schema": {
              "$ref": "#/definitions/apierror.LicenseOverused"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/apierror.AccessDenied"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/apierror.AccountRoleMismatch"
            }
          },
          "419": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apierror.AccountNotFound"
            }
          }
        }
      }
    },
    "/api/maintenance/{task}/check": {
      "post": {
        "security": [
          {
            "DaBasicAuth": []
          }
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Maintenance"
        ],
        "summary": "run task checks",
        "parameters": [
          {
            "type": "string",
            "description": "task to check",
            "name": "task",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/web.checkResult"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/apierror.Unauthorized"
            }
          },
          "402": {
            "description": "Payment Required",
            "schema": {
              "$ref": "#/definitions/apierror.LicenseOverused"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/apierror.AccessDenied"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/apierror.NotFound"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/apierror.AccountRoleMismatch"
            }
          },
          "419": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apierror.AccountNotFound"
            }
          }
        }
      }
    },
    "/api/maintenance/{task}/fix": {
      "post": {
        "security": [
          {
            "DaBasicAuth": []
          }
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Maintenance"
        ],
        "summary": "run task automatic fix action",
        "parameters": [
          {
            "type": "string",
            "description": "task to fix",
            "name": "task",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/web.fixResult"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/apierror.Unauthorized"
            }
          },
          "402": {
            "description": "Payment Required",
            "schema": {
              "$ref": "#/definitions/apierror.LicenseOverused"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/apierror.AccessDenied"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/apierror.NotFound"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/apierror.AccountRoleMismatch"
            }
          },
          "419": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apierror.AccountNotFound"
            }
          }
        }
      }
    },
    "/api/messages": {
      "get": {
        "security": [
          {
            "DaBasicAuth": []
          }
        ],
        "description": "Fetch messages list.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Messages"
        ],
        "summary": "Get messages list",
        "parameters": [
          {
            "maximum": 1000,
            "minimum": 0,
            "type": "integer",
            "default": 500,
            "description": "Limit",
            "name": "limit",
            "in": "query"
          },
          {
            "minimum": 0,
            "type": "integer",
            "default": 0,
            "description": "Offset",
            "name": "offset",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/web.message"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/apierror.BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/apierror.Unauthorized"
            }
          },
          "402": {
            "description": "Payment Required",
            "schema": {
              "$ref": "#/definitions/apierror.LicenseOverused"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/apierror.AccessDenied"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/apierror.InternalError"
            }
          }
        }
      }
    },
    "/api/modsecurity-audit-log/entry": {
      "get": {
        "security": [
          {
            "DaBasicAuth": []
          }
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Modsecurity"
        ],
        "summary": "get unparsed log entry with the given refence",
        "parameters": [
          {
            "type": "string",
            "description": "reference string provided by `web.auditEntry`",
            "name": "reference",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/apierror.BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/apierror.Unauthorized"
            }
          },
          "402": {
            "description": "Payment Required",
            "schema": {
              "$ref": "#/definitions/apierror.LicenseOverused"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/apierror.AccessDenied"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/apierror.NotFound"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/apierror.InternalError"
            }
          }
        }
      }
    },
    "/api/modsecurity-audit-log/summary": {
      "get": {
        "security": [
          {
            "DaBasicAuth": []
          }
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Modsecurity"
        ],
        "summary": "Read and parse modsecurity audit log",
        "parameters": [
          {
            "type": "integer",
            "description": "number of rows wanted",
            "name": "lines",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "Show results for the given domains only",
            "name": "domains",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/web.auditEntry"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/apierror.BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/apierror.Unauthorized"
            }
          },
          "402": {
            "description": "Payment Required",
            "schema": {
              "$ref": "#/definitions/apierror.LicenseOverused"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/apierror.AccessDenied"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/apierror.InternalError"
            }
          }
        }
      }
    },
    "/api/phpmyadmin-sso/account-access": {
      "post": {
        "security": [
          {
            "DaBasicAuth": []
          }
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Database"
        ],
        "summary": "Create PhpMyAdmin single sign-on URL for user account access.",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/web.phpmyadminSSOResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/apierror.Unauthorized"
            }
          },
          "402": {
            "description": "Payment Required",
            "schema": {
              "$ref": "#/definitions/apierror.LicenseOverused"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/apierror.AccessDenied"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/apierror.InternalError"
            }
          }
        }
      }
    },
    "/api/phpmyadmin-sso/database-access/{database}": {
      "post": {
        "security": [
          {
            "DaBasicAuth": []
          }
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Database"
        ],
        "summary": "Create PhpMyAdmin single sign-on URL for single DB access.",
        "parameters": [
          {
            "type": "string",
            "description": "Database name",
            "name": "database",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/web.phpmyadminSSOResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/apierror.Unauthorized"
            }
          },
          "402": {
            "description": "Payment Required",
            "schema": {
              "$ref": "#/definitions/apierror.LicenseOverused"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/apierror.AccessDenied"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/apierror.NotFound"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/apierror.InternalError"
            }
          }
        }
      }
    },
    "/api/redis/disable": {
      "post": {
        "security": [
          {
            "DaBasicAuth": []
          }
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Redis"
        ],
        "summary": "Disable/Stop Redis",
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/apierror.BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/apierror.Unauthorized"
            }
          },
          "402": {
            "description": "Payment Required",
            "schema": {
              "$ref": "#/definitions/apierror.LicenseOverused"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/apierror.AccessDenied"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/apierror.InternalError"
            }
          }
        }
      }
    },
    "/api/redis/enable": {
      "post": {
        "security": [
          {
            "DaBasicAuth": []
          }
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Redis"
        ],
        "summary": "Enable/Start Redis",
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/apierror.BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/apierror.Unauthorized"
            }
          },
          "402": {
            "description": "Payment Required",
            "schema": {
              "$ref": "#/definitions/apierror.LicenseOverused"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/apierror.AccessDenied"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/apierror.InternalError"
            }
          }
        }
      }
    },
    "/api/redis/status": {
      "get": {
        "security": [
          {
            "DaBasicAuth": []
          }
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Redis"
        ],
        "summary": "Get Redis status",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/web.redisStatusResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/apierror.BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/apierror.Unauthorized"
            }
          },
          "402": {
            "description": "Payment Required",
            "schema": {
              "$ref": "#/definitions/apierror.LicenseOverused"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/apierror.AccessDenied"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/apierror.InternalError"
            }
          }
        }
      }
    },
    "/api/resellers/{username}/config": {
      "get": {
        "security": [
          {
            "DaBasicAuth": []
          }
        ],
        "description": "This endpoint returns reseller configuration.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Resellers"
        ],
        "summary": "Get reseller config",
        "parameters": [
          {
            "type": "string",
            "description": "Username of the user to fetch",
            "name": "username",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/web.resellerConfig"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/apierror.BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/apierror.Unauthorized"
            }
          },
          "402": {
            "description": "Payment Required",
            "schema": {
              "$ref": "#/definitions/apierror.LicenseOverused"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/apierror.AccessDenied"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/apierror.NotFound"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/apierror.InternalError"
            }
          }
        }
      }
    },
    "/api/resellers/{username}/usage": {
      "get": {
        "security": [
          {
            "DaBasicAuth": []
          }
        ],
        "description": "This endpoint returns combined reseller and his users resource usage and reseller limits.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Resellers"
        ],
        "summary": "Get reseller and his users usage",
        "parameters": [
          {
            "type": "string",
            "description": "Username of the user to fetch",
            "name": "username",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/web.resellerUsage"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/apierror.BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/apierror.Unauthorized"
            }
          },
          "402": {
            "description": "Payment Required",
            "schema": {
              "$ref": "#/definitions/apierror.LicenseOverused"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/apierror.AccessDenied"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/apierror.NotFound"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/apierror.InternalError"
            }
          }
        }
      }
    },
    "/api/restart": {
      "post": {
        "security": [
          {
            "DaBasicAuth": []
          }
        ],
        "description": "Calling this endpoint will make DirectAdmin web server to restart.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Misc"
        ],
        "summary": "Restart Directadmin",
        "responses": {
          "204": {
            "description": "Restart command executed successfully"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/apierror.BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/apierror.Unauthorized"
            }
          },
          "402": {
            "description": "Payment Required",
            "schema": {
              "$ref": "#/definitions/apierror.LicenseOverused"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/apierror.AccessDenied"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/apierror.InternalError"
            }
          }
        }
      }
    },
    "/api/security-txt/status": {
      "get": {
        "security": [
          {
            "DaBasicAuth": []
          }
        ],
        "tags": [
          "security.txt"
        ],
        "summary": "Check security.txt",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/web.securityTxtStatus"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/apierror.Unauthorized"
            }
          },
          "402": {
            "description": "Payment Required",
            "schema": {
              "$ref": "#/definitions/apierror.LicenseOverused"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/apierror.AccessDenied"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/apierror.InternalError"
            }
          }
        }
      }
    },
    "/api/server-tls/acme-config": {
      "get": {
        "security": [
          {
            "DaBasicAuth": []
          }
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "TLS"
        ],
        "summary": "Get main server's TLS ACME configuration",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/web.acmeConfig"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/apierror.Unauthorized"
            }
          },
          "402": {
            "description": "Payment Required",
            "schema": {
              "$ref": "#/definitions/apierror.LicenseOverused"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/apierror.AccessDenied"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/apierror.InternalError"
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "DaBasicAuth": []
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "TLS"
        ],
        "summary": "Set main server's TLS ACME configuration",
        "parameters": [
          {
            "description": "Request Data",
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/web.acmeConfig"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/apierror.BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/apierror.Unauthorized"
            }
          },
          "402": {
            "description": "Payment Required",
            "schema": {
              "$ref": "#/definitions/apierror.LicenseOverused"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/apierror.AccessDenied"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/apierror.InternalError"
            }
          }
        }
      }
    },
    "/api/server-tls/certificate": {
      "get": {
        "security": [
          {
            "DaBasicAuth": []
          }
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "TLS"
        ],
        "summary": "Get main server's TLS certificate",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/web.serverTLSCertificate"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/apierror.Unauthorized"
            }
          },
          "402": {
            "description": "Payment Required",
            "schema": {
              "$ref": "#/definitions/apierror.LicenseOverused"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/apierror.AccessDenied"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/apierror.NotFound"
            }
          }
        }
      }
    },
    "/api/server-tls/enable": {
      "post": {
        "security": [
          {
            "DaBasicAuth": []
          }
        ],
        "description": "Enables SSL and restarts main directadmin panel's server.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "TLS"
        ],
        "summary": "Enable SSL for main server",
        "parameters": [
          {
            "type": "boolean",
            "description": "Force enable SSL.",
            "name": "force",
            "in": "query"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/apierror.Unauthorized"
            }
          },
          "402": {
            "description": "Payment Required",
            "schema": {
              "$ref": "#/definitions/apierror.LicenseOverused"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/apierror.AccessDenied"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/apierror.TLSCertificateInvalid"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/apierror.InternalError"
            }
          }
        }
      }
    },
    "/api/server-tls/files": {
      "get": {
        "security": [
          {
            "DaBasicAuth": []
          }
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "TLS"
        ],
        "summary": "Retrieve server TLS certificates",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/web.serverTLSFiles"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/apierror.Unauthorized"
            }
          },
          "402": {
            "description": "Payment Required",
            "schema": {
              "$ref": "#/definitions/apierror.LicenseOverused"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/apierror.AccessDenied"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/apierror.InternalError"
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "DaBasicAuth": []
          }
        ],
        "consumes": [
          "application/json"
        ],
        "tags": [
          "TLS"
        ],
        "summary": "Replace server TLS certificates",
        "parameters": [
          {
            "description": "New key and certificate file contents",
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/web.serverTLSFiles"
            }
          },
          {
            "type": "boolean",
            "description": "Allow invalid tls certificate to be uploaded",
            "name": "force",
            "in": "query"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/apierror.Unauthorized"
            }
          },
          "402": {
            "description": "Payment Required",
            "schema": {
              "$ref": "#/definitions/apierror.LicenseOverused"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/apierror.AccessDenied"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/apierror.TLSCertificateInvalid"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/apierror.InternalError"
            }
          }
        }
      }
    },
    "/api/server-tls/obtain": {
      "post": {
        "security": [
          {
            "DaBasicAuth": []
          }
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "TLS"
        ],
        "summary": "Queues action to force obtain TLS certificate for main server",
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/apierror.Unauthorized"
            }
          },
          "402": {
            "description": "Payment Required",
            "schema": {
              "$ref": "#/definitions/apierror.LicenseOverused"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/apierror.AccessDenied"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/apierror.InternalError"
            }
          }
        }
      }
    },
    "/api/server-tls/status": {
      "get": {
        "security": [
          {
            "DaBasicAuth": []
          }
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "TLS"
        ],
        "summary": "Get main server's TLS certificate status",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/web.serverTLSStatus"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/apierror.Unauthorized"
            }
          },
          "402": {
            "description": "Payment Required",
            "schema": {
              "$ref": "#/definitions/apierror.LicenseOverused"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/apierror.AccessDenied"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/apierror.InternalError"
            }
          }
        }
      }
    },
    "/api/session": {
      "get": {
        "security": [
          {
            "DaBasicAuth": []
          }
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Sessions"
        ],
        "summary": "Get current session info",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/web.sessionInfo"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/apierror.BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/apierror.Unauthorized"
            }
          },
          "402": {
            "description": "Payment Required",
            "schema": {
              "$ref": "#/definitions/apierror.LicenseOverused"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/apierror.AccessDenied"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/apierror.InternalError"
            }
          }
        }
      }
    },
    "/api/session/login-as/return": {
      "post": {
        "security": [
          {
            "DaBasicAuth": []
          }
        ],
        "tags": [
          "Session control"
        ],
        "summary": "Drop out of Login-as session",
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/apierror.Unauthorized"
            }
          },
          "402": {
            "description": "Payment Required",
            "schema": {
              "$ref": "#/definitions/apierror.LicenseOverused"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/apierror.AccessDenied"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/apierror.PreHookError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/apierror.InternalError"
            }
          }
        }
      }
    },
    "/api/session/login-as/switch": {
      "post": {
        "security": [
          {
            "DaBasicAuth": []
          }
        ],
        "tags": [
          "Session control"
        ],
        "summary": "Swich to a new session that impersonating another account",
        "parameters": [
          {
            "description": "Authentication attributes",
            "name": "params",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/web.ImpersonateRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/apierror.BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/apierror.Unauthorized"
            }
          },
          "402": {
            "description": "Payment Required",
            "schema": {
              "$ref": "#/definitions/apierror.LicenseOverused"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/apierror.AccessDenied"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/apierror.PreHookError"
            }
          },
          "431": {
            "description": "Request Header Fields Too Large",
            "schema": {
              "$ref": "#/definitions/apierror.LoginKeyAPIOnly"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/apierror.InternalError"
            }
          }
        }
      }
    },
    "/api/session/login-as/user-list": {
      "get": {
        "security": [
          {
            "DaBasicAuth": []
          }
        ],
        "description": "query searches for user or domain that contains query `q`",
        "produces": [
          "application/json"
        ],
        "tags": [
          "User search"
        ],
        "summary": "Search for users when in login-as session",
        "parameters": [
          {
            "type": "string",
            "description": "query",
            "name": "q",
            "in": "query"
          },
          {
            "type": "number",
            "default": 50,
            "description": "Query limit",
            "name": "limit",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/web.searchResult"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/apierror.BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/apierror.Unauthorized"
            }
          },
          "402": {
            "description": "Payment Required",
            "schema": {
              "$ref": "#/definitions/apierror.LicenseOverused"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/apierror.AccessDenied"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/apierror.InternalError"
            }
          }
        }
      }
    },
    "/api/session/reseller-config": {
      "get": {
        "security": [
          {
            "DaBasicAuth": []
          }
        ],
        "description": "This endpoint returns reseller configuration. For non reseller accounts it will respond with 404 error.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Sessions"
        ],
        "summary": "Get reseller config",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/web.resellerConfig"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/apierror.BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/apierror.Unauthorized"
            }
          },
          "402": {
            "description": "Payment Required",
            "schema": {
              "$ref": "#/definitions/apierror.LicenseOverused"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/apierror.AccessDenied"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/apierror.NotFound"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/apierror.InternalError"
            }
          }
        }
      }
    },
    "/api/session/skin-customization/{skin}": {
      "get": {
        "security": [
          {
            "DaBasicAuth": []
          }
        ],
        "description": "Get list of active skin customizations.\nActive inherits creators' skin customizations per user basis, meaning if creator (e.g. reseller) has any customizations, admin customizations are ignored.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Skin customization"
        ],
        "summary": "Get list of active skin customizations",
        "parameters": [
          {
            "type": "string",
            "description": "Skin's name",
            "name": "skin",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/web.skinCustomizationsFile"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/apierror.BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/apierror.Unauthorized"
            }
          },
          "402": {
            "description": "Payment Required",
            "schema": {
              "$ref": "#/definitions/apierror.LicenseOverused"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/apierror.AccessDenied"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/apierror.InternalError"
            }
          }
        }
      }
    },
    "/api/session/skin-customization/{skin}/{filename}": {
      "get": {
        "security": [
          {
            "DaBasicAuth": []
          }
        ],
        "description": "Download active skin customization file.\nActive inherits creators' skin customizations per user basis, meaning if creator (e.g. reseller) has any customizations, admin customizations are ignored.",
        "produces": [
          "application/octet-stream",
          "image/png",
          "image/jpeg",
          "image/gif",
          "text/plain",
          "application/json"
        ],
        "tags": [
          "Skin customization"
        ],
        "summary": "Download active skin customization file",
        "parameters": [
          {
            "type": "string",
            "description": "Skin's name",
            "name": "skin",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Skin customization file name",
            "name": "filename",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Skin customization file",
            "schema": {
              "type": "file"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/apierror.BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/apierror.Unauthorized"
            }
          },
          "402": {
            "description": "Payment Required",
            "schema": {
              "$ref": "#/definitions/apierror.LicenseOverused"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/apierror.AccessDenied"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/apierror.NotFound"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/apierror.InternalError"
            }
          }
        }
      }
    },
    "/api/session/state": {
      "get": {
        "security": [
          {
            "DaBasicAuth": []
          }
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Sessions"
        ],
        "summary": "Get server state",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/web.stateResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/apierror.BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/apierror.Unauthorized"
            }
          },
          "402": {
            "description": "Payment Required",
            "schema": {
              "$ref": "#/definitions/apierror.LicenseOverused"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/apierror.AccessDenied"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/apierror.InternalError"
            }
          }
        }
      }
    },
    "/api/session/switch-active-domain": {
      "post": {
        "security": [
          {
            "DaBasicAuth": []
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Sessions"
        ],
        "summary": "Switch active domain for current session",
        "parameters": [
          {
            "description": "Request data.",
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/web.sessionSelectDomainRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/apierror.BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/apierror.Unauthorized"
            }
          },
          "402": {
            "description": "Payment Required",
            "schema": {
              "$ref": "#/definitions/apierror.LicenseOverused"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/apierror.AccessDenied"
            }
          },
          "404": {
            "description": "Such domain does not exist or belong to the user.",
            "schema": {
              "$ref": "#/definitions/apierror.NotFound"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/apierror.InternalError"
            }
          }
        }
      }
    },
    "/api/session/user-config": {
      "get": {
        "security": [
          {
            "DaBasicAuth": []
          }
        ],
        "description": "Returns current user config. Same as `/api/users/{user}/config` but limited to this session user.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Sessions"
        ],
        "summary": "Current user config",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/web.userConfig"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/apierror.BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/apierror.Unauthorized"
            }
          },
          "402": {
            "description": "Payment Required",
            "schema": {
              "$ref": "#/definitions/apierror.LicenseOverused"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/apierror.AccessDenied"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/apierror.InternalError"
            }
          }
        }
      }
    },
    "/api/session/user-usage": {
      "get": {
        "security": [
          {
            "DaBasicAuth": []
          }
        ],
        "description": "Returns current user usage and limits. Same as `/api/users/{username}/usage` but limited to this session user.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Sessions"
        ],
        "summary": "Get user's usage",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/web.userUsage"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/apierror.BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/apierror.Unauthorized"
            }
          },
          "402": {
            "description": "Payment Required",
            "schema": {
              "$ref": "#/definitions/apierror.LicenseOverused"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/apierror.AccessDenied"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/apierror.InternalError"
            }
          }
        }
      }
    },
    "/api/sessions": {
      "get": {
        "security": [
          {
            "DaBasicAuth": []
          }
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Sessions"
        ],
        "summary": "List active user sessions",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/web.sessionMetadata"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/apierror.Unauthorized"
            }
          },
          "402": {
            "description": "Payment Required",
            "schema": {
              "$ref": "#/definitions/apierror.LicenseOverused"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/apierror.AccessDenied"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/apierror.InternalError"
            }
          }
        }
      }
    },
    "/api/sessions/destroy-all-other": {
      "post": {
        "security": [
          {
            "DaBasicAuth": []
          }
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Sessions"
        ],
        "summary": "Destroy all active sessions except current",
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/apierror.Unauthorized"
            }
          },
          "402": {
            "description": "Payment Required",
            "schema": {
              "$ref": "#/definitions/apierror.LicenseOverused"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/apierror.AccessDenied"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/apierror.InternalError"
            }
          }
        }
      }
    },
    "/api/sessions/destroy/{public_id}": {
      "post": {
        "security": [
          {
            "DaBasicAuth": []
          }
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Sessions"
        ],
        "summary": "Destroy an active session",
        "parameters": [
          {
            "type": "string",
            "description": "Session's public ID.",
            "name": "public_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/apierror.Unauthorized"
            }
          },
          "402": {
            "description": "Payment Required",
            "schema": {
              "$ref": "#/definitions/apierror.LicenseOverused"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/apierror.AccessDenied"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/apierror.InternalError"
            }
          }
        }
      }
    },
    "/api/skin-customization/{skin}/creator": {
      "get": {
        "security": [
          {
            "DaBasicAuth": []
          }
        ],
        "description": "Get list of creator's skin customizations.\nAdmin \u0026 Reseller only.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Skin customization"
        ],
        "summary": "Get list of creator's skin customizations",
        "parameters": [
          {
            "type": "string",
            "description": "Skin's name",
            "name": "skin",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/web.skinCustomizationsFile"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/apierror.BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/apierror.Unauthorized"
            }
          },
          "402": {
            "description": "Payment Required",
            "schema": {
              "$ref": "#/definitions/apierror.LicenseOverused"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/apierror.AccessDenied"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/apierror.InternalError"
            }
          }
        }
      }
    },
    "/api/skin-customization/{skin}/creator/{filename}": {
      "get": {
        "security": [
          {
            "DaBasicAuth": []
          }
        ],
        "description": "Download creator's skin customization file.\nAdmin \u0026 Reseller only.",
        "produces": [
          "application/octet-stream",
          "image/png",
          "image/jpeg",
          "image/gif",
          "text/plain",
          "application/json"
        ],
        "tags": [
          "Skin customization"
        ],
        "summary": "Download creator's skin customization file",
        "parameters": [
          {
            "type": "string",
            "description": "Skin's name",
            "name": "skin",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Skin customization file name",
            "name": "filename",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Skin customization file",
            "schema": {
              "type": "file"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/apierror.BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/apierror.Unauthorized"
            }
          },
          "402": {
            "description": "Payment Required",
            "schema": {
              "$ref": "#/definitions/apierror.LicenseOverused"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/apierror.AccessDenied"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/apierror.NotFound"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/apierror.InternalError"
            }
          }
        }
      }
    },
    "/api/skin-customization/{skin}/local": {
      "get": {
        "security": [
          {
            "DaBasicAuth": []
          }
        ],
        "description": "Get list of my skin customizations.\nAdmin \u0026 Reseller only.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Skin customization"
        ],
        "summary": "Get list of my skin customizations",
        "parameters": [
          {
            "type": "string",
            "description": "Skin's name",
            "name": "skin",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/web.skinCustomizationsFile"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/apierror.BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/apierror.Unauthorized"
            }
          },
          "402": {
            "description": "Payment Required",
            "schema": {
              "$ref": "#/definitions/apierror.LicenseOverused"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/apierror.AccessDenied"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/apierror.InternalError"
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "DaBasicAuth": []
          }
        ],
        "description": "This endpoint allows uploading multiple skin customization files using standard multipart/form-data encoding.\nForm field names are ignored, only file-names associated with file upload is used when storing the file.\nAdmin \u0026 Reseller only.",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Skin customization"
        ],
        "summary": "Upload skin customization file (overwrites if exists)",
        "parameters": [
          {
            "type": "string",
            "description": "Skin's name",
            "name": "skin",
            "in": "path",
            "required": true
          },
          {
            "type": "file",
            "description": "Skin customization file",
            "name": "*",
            "in": "formData",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/apierror.BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/apierror.Unauthorized"
            }
          },
          "402": {
            "description": "Payment Required",
            "schema": {
              "$ref": "#/definitions/apierror.LicenseOverused"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/apierror.AccessDenied"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/apierror.InternalError"
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "DaBasicAuth": []
          }
        ],
        "description": "Delete all skin customization files.\nAdmin \u0026 Reseller only.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Skin customization"
        ],
        "summary": "Delete all skin customization files",
        "parameters": [
          {
            "type": "string",
            "description": "Skin's name",
            "name": "skin",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/apierror.BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/apierror.Unauthorized"
            }
          },
          "402": {
            "description": "Payment Required",
            "schema": {
              "$ref": "#/definitions/apierror.LicenseOverused"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/apierror.AccessDenied"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/apierror.InternalError"
            }
          }
        }
      }
    },
    "/api/skin-customization/{skin}/local/{filename}": {
      "get": {
        "security": [
          {
            "DaBasicAuth": []
          }
        ],
        "description": "Download my skin customization file.\nAdmin \u0026 Reseller only.",
        "produces": [
          "application/octet-stream",
          "image/png",
          "image/jpeg",
          "image/gif",
          "text/plain",
          "application/json"
        ],
        "tags": [
          "Skin customization"
        ],
        "summary": "Download my skin customization file",
        "parameters": [
          {
            "type": "string",
            "description": "Skin's name",
            "name": "skin",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Skin customization file name",
            "name": "filename",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Skin customization file",
            "schema": {
              "type": "file"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/apierror.BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/apierror.Unauthorized"
            }
          },
          "402": {
            "description": "Payment Required",
            "schema": {
              "$ref": "#/definitions/apierror.LicenseOverused"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/apierror.AccessDenied"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/apierror.NotFound"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/apierror.InternalError"
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "DaBasicAuth": []
          }
        ],
        "description": "Upload skin customization file (overwrites if exists).\nAdmin \u0026 Reseller only.",
        "consumes": [
          "application/octet-stream",
          "image/png",
          "image/jpeg",
          "image/gif",
          "text/plain",
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Skin customization"
        ],
        "summary": "Upload skin customization file (overwrites if exists)",
        "parameters": [
          {
            "type": "string",
            "description": "Skin's name",
            "name": "skin",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Skin customization file name",
            "name": "filename",
            "in": "path",
            "required": true
          },
          {
            "description": "Skin customization file binary",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/apierror.BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/apierror.Unauthorized"
            }
          },
          "402": {
            "description": "Payment Required",
            "schema": {
              "$ref": "#/definitions/apierror.LicenseOverused"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/apierror.AccessDenied"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/apierror.InternalError"
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "DaBasicAuth": []
          }
        ],
        "description": "Delete skin customization file.\nAdmin \u0026 Reseller only.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Skin customization"
        ],
        "summary": "Delete skin customization file",
        "parameters": [
          {
            "type": "string",
            "description": "Skin's name",
            "name": "skin",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Skin customization file name",
            "name": "filename",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/apierror.BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/apierror.Unauthorized"
            }
          },
          "402": {
            "description": "Payment Required",
            "schema": {
              "$ref": "#/definitions/apierror.LicenseOverused"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/apierror.AccessDenied"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/apierror.InternalError"
            }
          }
        }
      }
    },
    "/api/skin-global-options/{skin}": {
      "get": {
        "description": "Accessible to anyone.\nEmpty json object is returned if skin does not exist, skin options do not exist or skin options are malformed.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Skin options"
        ],
        "summary": "Get skin global options",
        "parameters": [
          {
            "type": "string",
            "description": "Skin's name",
            "name": "skin",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Skin global options",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/apierror.BadRequest"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/apierror.InternalError"
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "DaBasicAuth": []
          }
        ],
        "description": "Admin-only.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Skin options"
        ],
        "summary": "Update skin global options",
        "parameters": [
          {
            "type": "string",
            "description": "Skin's name",
            "name": "skin",
            "in": "path",
            "required": true
          },
          {
            "description": "Skin global options",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Skin global options",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/apierror.BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/apierror.Unauthorized"
            }
          },
          "402": {
            "description": "Payment Required",
            "schema": {
              "$ref": "#/definitions/apierror.LicenseOverused"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/apierror.AccessDenied"
            }
          },
          "404": {
            "description": "Skin does not exist",
            "schema": {
              "$ref": "#/definitions/apierror.NotFound"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/apierror.InternalError"
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "DaBasicAuth": []
          }
        ],
        "description": "Admin-only.\nNon-existing skins' options can also be deleted.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Skin options"
        ],
        "summary": "Delete skin global options",
        "parameters": [
          {
            "type": "string",
            "description": "Skin's name",
            "name": "skin",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Global options deleted or non-existent."
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/apierror.BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/apierror.Unauthorized"
            }
          },
          "402": {
            "description": "Payment Required",
            "schema": {
              "$ref": "#/definitions/apierror.LicenseOverused"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/apierror.AccessDenied"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/apierror.InternalError"
            }
          }
        }
      },
      "patch": {
        "security": [
          {
            "DaBasicAuth": []
          }
        ],
        "description": "Admin-only. Follows RFC7396.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Skin options"
        ],
        "summary": "Patch skin global options",
        "parameters": [
          {
            "type": "string",
            "description": "Skin's name",
            "name": "skin",
            "in": "path",
            "required": true
          },
          {
            "description": "Skin global options patch",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Patched skin global options",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/apierror.BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/apierror.Unauthorized"
            }
          },
          "402": {
            "description": "Payment Required",
            "schema": {
              "$ref": "#/definitions/apierror.LicenseOverused"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/apierror.AccessDenied"
            }
          },
          "404": {
            "description": "Skin does not exist",
            "schema": {
              "$ref": "#/definitions/apierror.NotFound"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/apierror.InternalError"
            }
          }
        }
      }
    },
    "/api/skin-options/{skin}": {
      "get": {
        "security": [
          {
            "DaBasicAuth": []
          }
        ],
        "description": "Skin options are user specific skin customizations.\nEach user can have its own options saved.\nEmpty json object is returned if demo is enabled, skin does not exist, skin options do not exist or skin options are malformed.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Skin options"
        ],
        "summary": "Get skin user options",
        "parameters": [
          {
            "type": "string",
            "description": "Skin's name",
            "name": "skin",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Contents of user_options.json",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/apierror.BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/apierror.Unauthorized"
            }
          },
          "402": {
            "description": "Payment Required",
            "schema": {
              "$ref": "#/definitions/apierror.LicenseOverused"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/apierror.AccessDenied"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/apierror.InternalError"
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "DaBasicAuth": []
          }
        ],
        "description": "This endpoint allows user to update his skin options for a given skin.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Skin options"
        ],
        "summary": "Update skin user options",
        "parameters": [
          {
            "type": "string",
            "description": "Skin's name",
            "name": "skin",
            "in": "path",
            "required": true
          },
          {
            "description": "Skin user options",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Skin user options",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/apierror.BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/apierror.Unauthorized"
            }
          },
          "402": {
            "description": "Payment Required",
            "schema": {
              "$ref": "#/definitions/apierror.LicenseOverused"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/apierror.AccessDenied"
            }
          },
          "404": {
            "description": "Skin does not exist",
            "schema": {
              "$ref": "#/definitions/apierror.NotFound"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/apierror.InternalError"
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "DaBasicAuth": []
          }
        ],
        "description": "This endpoint allows user specific skin options to be removed.\nGetting skin options after removal will return empty object.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Skin options"
        ],
        "summary": "Delete skin user options",
        "parameters": [
          {
            "type": "string",
            "description": "Skin's name",
            "name": "skin",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/apierror.BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/apierror.Unauthorized"
            }
          },
          "402": {
            "description": "Payment Required",
            "schema": {
              "$ref": "#/definitions/apierror.LicenseOverused"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/apierror.AccessDenied"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/apierror.InternalError"
            }
          }
        }
      },
      "patch": {
        "security": [
          {
            "DaBasicAuth": []
          }
        ],
        "description": "Follows RFC7396.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Skin options"
        ],
        "summary": "Patch skin user options",
        "parameters": [
          {
            "type": "string",
            "description": "Skin's name",
            "name": "skin",
            "in": "path",
            "required": true
          },
          {
            "description": "Skin user options patch",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Patched skin user options",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/apierror.BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/apierror.Unauthorized"
            }
          },
          "402": {
            "description": "Payment Required",
            "schema": {
              "$ref": "#/definitions/apierror.LicenseOverused"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/apierror.AccessDenied"
            }
          },
          "404": {
            "description": "Skin does not exist",
            "schema": {
              "$ref": "#/definitions/apierror.NotFound"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/apierror.InternalError"
            }
          }
        }
      }
    },
    "/api/skin-translation/{skin}/{lang}": {
      "get": {
        "description": "Get main skin translations merged with custom translations in JSON format following vue-gettext PO to JSON conversion rules.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Skin translations"
        ],
        "summary": "Skin translations by a language code",
        "parameters": [
          {
            "type": "string",
            "description": "Skin's name",
            "name": "skin",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Language code",
            "name": "lang",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          },
          "204": {
            "description": "No Content"
          }
        }
      }
    },
    "/api/system-info/cpu": {
      "get": {
        "security": [
          {
            "DaBasicAuth": []
          }
        ],
        "description": "Report server's CPU information.\nCan be disabled per user in `user.conf` with `sysinfo` field or adjusted globally in `directadmin.conf` with `cpu_in_system_info` field (`0` - disabled, `1` - count only, `2` - show all).",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Info"
        ],
        "summary": "Get system CPU",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/web.systemInfoCPU"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/apierror.BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/apierror.Unauthorized"
            }
          },
          "402": {
            "description": "Payment Required",
            "schema": {
              "$ref": "#/definitions/apierror.LicenseOverused"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/apierror.AccessDenied"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/apierror.InternalError"
            }
          }
        }
      }
    },
    "/api/system-info/fs": {
      "get": {
        "security": [
          {
            "DaBasicAuth": []
          }
        ],
        "description": "Can be disabled per user in `user.conf` with `sysinfo` field or globally in `directadmin.conf` with `disk_in_system_info` field.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Info"
        ],
        "summary": "Get file system space usage",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/web.systemInfoFS"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/apierror.Unauthorized"
            }
          },
          "402": {
            "description": "Payment Required",
            "schema": {
              "$ref": "#/definitions/apierror.LicenseOverused"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/apierror.AccessDenied"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/apierror.InternalError"
            }
          }
        }
      }
    },
    "/api/system-info/load": {
      "get": {
        "security": [
          {
            "DaBasicAuth": []
          }
        ],
        "description": "Report server's last 1, 5 and 10 minutes loads.\nCan be disabled per user in `user.conf` with `sysinfo` field or globally in `directadmin.conf` with `load_in_system_info` field.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Info"
        ],
        "summary": "Get system load",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/web.systemInfoLoad"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/apierror.BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/apierror.Unauthorized"
            }
          },
          "402": {
            "description": "Payment Required",
            "schema": {
              "$ref": "#/definitions/apierror.LicenseOverused"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/apierror.AccessDenied"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/apierror.InternalError"
            }
          }
        }
      }
    },
    "/api/system-info/memory": {
      "get": {
        "security": [
          {
            "DaBasicAuth": []
          }
        ],
        "description": "Report server's memory information.\nCan be disabled per user in `user.conf` with `sysinfo` field or globally in `directadmin.conf` with `ram_in_system_info` field.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Info"
        ],
        "summary": "Get system memory",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/web.systemInfoMemory"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/apierror.BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/apierror.Unauthorized"
            }
          },
          "402": {
            "description": "Payment Required",
            "schema": {
              "$ref": "#/definitions/apierror.LicenseOverused"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/apierror.AccessDenied"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/apierror.InternalError"
            }
          }
        }
      }
    },
    "/api/system-info/services": {
      "get": {
        "security": [
          {
            "DaBasicAuth": []
          }
        ],
        "description": "Return server's used and running services information.\nCan be disabled per user in `user.conf` with `sysinfo` field.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Info"
        ],
        "summary": "Get system services",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/web.systemInfoServices"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/apierror.BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/apierror.Unauthorized"
            }
          },
          "402": {
            "description": "Payment Required",
            "schema": {
              "$ref": "#/definitions/apierror.LicenseOverused"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/apierror.AccessDenied"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/apierror.InternalError"
            }
          }
        }
      }
    },
    "/api/system-info/uptime": {
      "get": {
        "security": [
          {
            "DaBasicAuth": []
          }
        ],
        "description": "Report server's uptime.\nCan be disabled per user in `user.conf` with `sysinfo` field.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Info"
        ],
        "summary": "Get system uptime",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/web.systemInfoUptime"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/apierror.BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/apierror.Unauthorized"
            }
          },
          "402": {
            "description": "Payment Required",
            "schema": {
              "$ref": "#/definitions/apierror.LicenseOverused"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/apierror.AccessDenied"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/apierror.InternalError"
            }
          }
        }
      }
    },
    "/api/terminal": {
      "get": {
        "security": [
          {
            "DaBasicAuth": []
          }
        ],
        "description": "Once connected it starts a new shell in a virtual terminal and emulates terminal communications over the WebSocket messages.",
        "tags": [
          "Xterm"
        ],
        "summary": "WebSocket endpoint to start new web terminal session",
        "parameters": [
          {
            "type": "string",
            "description": "Number of columns for the initial terminal size, 80 by default",
            "name": "cols",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Number of rows for the initial terminal size, 24 by default",
            "name": "rows",
            "in": "query"
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/apierror.BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/apierror.Unauthorized"
            }
          },
          "402": {
            "description": "Payment Required",
            "schema": {
              "$ref": "#/definitions/apierror.LicenseOverused"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/apierror.AccessDenied"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/apierror.InternalError"
            }
          }
        }
      }
    },
    "/api/ticket-requests": {
      "get": {
        "security": [
          {
            "DaBasicAuth": []
          }
        ],
        "description": "Fetch ticket requests list, i.e., tickets we created.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Tickets"
        ],
        "summary": "Get ticket requests list",
        "parameters": [
          {
            "maximum": 1000,
            "minimum": 0,
            "type": "integer",
            "default": 500,
            "description": "Limit",
            "name": "limit",
            "in": "query"
          },
          {
            "minimum": 0,
            "type": "integer",
            "default": 0,
            "description": "Offset",
            "name": "offset",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/web.ticketResponse"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/apierror.BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/apierror.Unauthorized"
            }
          },
          "402": {
            "description": "Payment Required",
            "schema": {
              "$ref": "#/definitions/apierror.LicenseOverused"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/apierror.AccessDenied"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/apierror.InternalError"
            }
          }
        }
      }
    },
    "/api/tickets": {
      "get": {
        "security": [
          {
            "DaBasicAuth": []
          }
        ],
        "description": "Fetch received tickets list (admin \u0026 reseller only).",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Tickets"
        ],
        "summary": "Get received tickets list",
        "parameters": [
          {
            "maximum": 1000,
            "minimum": 0,
            "type": "integer",
            "default": 500,
            "description": "Limit",
            "name": "limit",
            "in": "query"
          },
          {
            "minimum": 0,
            "type": "integer",
            "default": 0,
            "description": "Offset",
            "name": "offset",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/web.ticketResponse"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/apierror.BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/apierror.Unauthorized"
            }
          },
          "402": {
            "description": "Payment Required",
            "schema": {
              "$ref": "#/definitions/apierror.LicenseOverused"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/apierror.AccessDenied"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/apierror.InternalError"
            }
          }
        }
      }
    },
    "/api/users/{username}/config": {
      "get": {
        "security": [
          {
            "DaBasicAuth": []
          }
        ],
        "description": "Get user config as is.\nNegative values for fields suffixed with `Lim` indicate no limit.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Users"
        ],
        "summary": "Get user config",
        "parameters": [
          {
            "type": "string",
            "description": "Username of the user to fetch",
            "name": "username",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/web.userConfig"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/apierror.BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/apierror.Unauthorized"
            }
          },
          "402": {
            "description": "Payment Required",
            "schema": {
              "$ref": "#/definitions/apierror.LicenseOverused"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/apierror.AccessDenied"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/apierror.NotFound"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/apierror.InternalError"
            }
          }
        }
      }
    },
    "/api/users/{username}/login-history": {
      "get": {
        "security": [
          {
            "DaBasicAuth": []
          }
        ],
        "description": "Get user's login history (read-only).",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Users"
        ],
        "summary": "Get user's login history",
        "parameters": [
          {
            "type": "string",
            "description": "Username of the user to fetch",
            "name": "username",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/web.userLoginHistory"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/apierror.BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/apierror.Unauthorized"
            }
          },
          "402": {
            "description": "Payment Required",
            "schema": {
              "$ref": "#/definitions/apierror.LicenseOverused"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/apierror.AccessDenied"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/apierror.InternalError"
            }
          }
        }
      }
    },
    "/api/users/{username}/usage": {
      "get": {
        "security": [
          {
            "DaBasicAuth": []
          }
        ],
        "description": "Get user's usage and limits (read-only).",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Users"
        ],
        "summary": "Get user's usage",
        "parameters": [
          {
            "type": "string",
            "description": "Username of the user to fetch",
            "name": "username",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/web.userUsage"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/apierror.BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/apierror.Unauthorized"
            }
          },
          "402": {
            "description": "Payment Required",
            "schema": {
              "$ref": "#/definitions/apierror.LicenseOverused"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/apierror.AccessDenied"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/apierror.NotFound"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/apierror.InternalError"
            }
          }
        }
      }
    },
    "/api/version": {
      "get": {
        "security": [
          {
            "DaBasicAuth": []
          }
        ],
        "description": "Get Directadmin versions info (admins only).",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Versioning"
        ],
        "summary": "Get versions info",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/web.versionResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/apierror.BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/apierror.Unauthorized"
            }
          },
          "402": {
            "description": "Payment Required",
            "schema": {
              "$ref": "#/definitions/apierror.LicenseOverused"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/apierror.AccessDenied"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/apierror.InternalError"
            }
          }
        }
      },
      "patch": {
        "security": [
          {
            "DaBasicAuth": []
          }
        ],
        "description": "Change Directadmin update channel (admins only).",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Versioning"
        ],
        "summary": "Change update channel",
        "parameters": [
          {
            "description": "Update data.",
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/web.versionRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Changes saved",
            "schema": {
              "$ref": "#/definitions/web.versionResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/apierror.BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/apierror.Unauthorized"
            }
          },
          "402": {
            "description": "Payment Required",
            "schema": {
              "$ref": "#/definitions/apierror.LicenseOverused"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/apierror.AccessDenied"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/apierror.InternalError"
            }
          }
        }
      }
    },
    "/api/version/update": {
      "post": {
        "security": [
          {
            "DaBasicAuth": []
          }
        ],
        "description": "Start Directadmin update process (admins only).",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Versioning"
        ],
        "summary": "Update Directadmin",
        "responses": {
          "204": {
            "description": "Update is scheduled"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/apierror.BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/apierror.Unauthorized"
            }
          },
          "402": {
            "description": "Payment Required",
            "schema": {
              "$ref": "#/definitions/apierror.LicenseOverused"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/apierror.AccessDenied"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/apierror.InternalError"
            }
          }
        }
      }
    },
    "/api/wordpress/install": {
      "post": {
        "security": [
          {
            "DaBasicAuth": []
          }
        ],
        "tags": [
          "WordPress"
        ],
        "summary": "Performs new wordpress installation in a given location",
        "parameters": [
          {
            "description": "New wordpress installation configuration",
            "name": "payload",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/web.wordpressInstallRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/web.wordpressInstallResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/apierror.BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/apierror.Unauthorized"
            }
          },
          "402": {
            "description": "Payment Required",
            "schema": {
              "$ref": "#/definitions/apierror.LicenseOverused"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/apierror.AccessDenied"
            }
          },
          "490": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apierror.WordpressDatabaseError"
            }
          },
          "491": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apierror.WordpressAlreadyInstalled"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/apierror.InternalError"
            }
          }
        }
      }
    },
    "/api/wordpress/install-quick": {
      "post": {
        "security": [
          {
            "DaBasicAuth": []
          }
        ],
        "description": "Quick install variant creates a new database.",
        "tags": [
          "WordPress"
        ],
        "summary": "Performs quick new wordpress installation in a given location",
        "parameters": [
          {
            "description": "New wordpress installation configuration",
            "name": "payload",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/web.wordpressInstallQuickRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/web.wordpressInstallResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/apierror.BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/apierror.Unauthorized"
            }
          },
          "402": {
            "description": "Payment Required",
            "schema": {
              "$ref": "#/definitions/apierror.LicenseOverused"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/apierror.AccessDenied"
            }
          },
          "490": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apierror.WordpressAlreadyInstalled"
            }
          },
          "491": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apierror.DatabaseUsersExceedLimit"
            }
          },
          "492": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apierror.ResellerExceedsLimits"
            }
          },
          "493": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apierror.DatabasesExceedLimit"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/apierror.InternalError"
            }
          }
        }
      }
    },
    "/api/wordpress/locations": {
      "get": {
        "security": [
          {
            "DaBasicAuth": []
          }
        ],
        "tags": [
          "WordPress"
        ],
        "summary": "Returns list of known wordpress installations and potential installation locations.",
        "parameters": [
          {
            "type": "string",
            "description": "Filter locations by domain name, sub-domains are not accepted",
            "name": "domain",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/web.wordpressInstallation"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/apierror.BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/apierror.Unauthorized"
            }
          },
          "402": {
            "description": "Payment Required",
            "schema": {
              "$ref": "#/definitions/apierror.LicenseOverused"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/apierror.AccessDenied"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/apierror.InternalError"
            }
          }
        }
      }
    },
    "/api/wordpress/locations/{location_id}": {
      "delete": {
        "security": [
          {
            "DaBasicAuth": []
          }
        ],
        "description": "This endpoint will remove all DB tables and wordpress files, but database account and database will not be removed.",
        "tags": [
          "WordPress"
        ],
        "summary": "Remove wordpress installation.",
        "parameters": [
          {
            "type": "string",
            "description": "WordPress location ID",
            "name": "location_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/apierror.BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/apierror.Unauthorized"
            }
          },
          "402": {
            "description": "Payment Required",
            "schema": {
              "$ref": "#/definitions/apierror.LicenseOverused"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/apierror.AccessDenied"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/apierror.PreHookError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/apierror.InternalError"
            }
          }
        }
      }
    },
    "/api/wordpress/locations/{location_id}/config": {
      "get": {
        "security": [
          {
            "DaBasicAuth": []
          }
        ],
        "tags": [
          "WordPress"
        ],
        "summary": "Retrieve wordpress database configuration for a single installation.",
        "parameters": [
          {
            "type": "string",
            "description": "WordPress location ID",
            "name": "location_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/web.wordpressConfig"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/apierror.BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/apierror.Unauthorized"
            }
          },
          "402": {
            "description": "Payment Required",
            "schema": {
              "$ref": "#/definitions/apierror.LicenseOverused"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/apierror.AccessDenied"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/apierror.InternalError"
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "DaBasicAuth": []
          }
        ],
        "tags": [
          "WordPress"
        ],
        "summary": "Change wordpress database configuration for a single installation.",
        "parameters": [
          {
            "type": "string",
            "description": "WordPress location ID",
            "name": "location_id",
            "in": "path",
            "required": true
          },
          {
            "description": "New configuration",
            "name": "payload",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/web.wordpressConfig"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/web.wordpressConfig"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/apierror.BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/apierror.Unauthorized"
            }
          },
          "402": {
            "description": "Payment Required",
            "schema": {
              "$ref": "#/definitions/apierror.LicenseOverused"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/apierror.AccessDenied"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/apierror.InternalError"
            }
          }
        }
      }
    },
    "/api/wordpress/locations/{location_id}/config/auto-update": {
      "put": {
        "security": [
          {
            "DaBasicAuth": []
          }
        ],
        "tags": [
          "WordPress"
        ],
        "summary": "Change wordpress core auto update state.",
        "parameters": [
          {
            "type": "string",
            "description": "WordPress location ID",
            "name": "location_id",
            "in": "path",
            "required": true
          },
          {
            "description": "New configuration",
            "name": "payload",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/web.wordpressUpdateState"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/apierror.BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/apierror.Unauthorized"
            }
          },
          "402": {
            "description": "Payment Required",
            "schema": {
              "$ref": "#/definitions/apierror.LicenseOverused"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/apierror.AccessDenied"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/apierror.InternalError"
            }
          }
        }
      }
    },
    "/api/wordpress/locations/{location_id}/options": {
      "get": {
        "security": [
          {
            "DaBasicAuth": []
          }
        ],
        "tags": [
          "WordPress"
        ],
        "summary": "Retrieve all wordpress options for a single installation.",
        "parameters": [
          {
            "type": "string",
            "description": "WordPress location ID",
            "name": "location_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/apierror.BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/apierror.Unauthorized"
            }
          },
          "402": {
            "description": "Payment Required",
            "schema": {
              "$ref": "#/definitions/apierror.LicenseOverused"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/apierror.AccessDenied"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/apierror.InternalError"
            }
          }
        }
      },
      "patch": {
        "security": [
          {
            "DaBasicAuth": []
          }
        ],
        "tags": [
          "WordPress"
        ],
        "summary": "Change wordpress options for a given installation.",
        "parameters": [
          {
            "type": "string",
            "description": "WordPress location ID",
            "name": "location_id",
            "in": "path",
            "required": true
          },
          {
            "description": "Set of options to change, nil value deletes option",
            "name": "payload",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/apierror.BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/apierror.Unauthorized"
            }
          },
          "402": {
            "description": "Payment Required",
            "schema": {
              "$ref": "#/definitions/apierror.LicenseOverused"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/apierror.AccessDenied"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/apierror.InternalError"
            }
          }
        }
      }
    },
    "/api/wordpress/locations/{location_id}/users": {
      "get": {
        "security": [
          {
            "DaBasicAuth": []
          }
        ],
        "tags": [
          "WordPress"
        ],
        "summary": "Retrieve all wordpress user accounts",
        "parameters": [
          {
            "type": "string",
            "description": "WordPress location ID",
            "name": "location_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/web.wordpressUser"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/apierror.BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/apierror.Unauthorized"
            }
          },
          "402": {
            "description": "Payment Required",
            "schema": {
              "$ref": "#/definitions/apierror.LicenseOverused"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/apierror.AccessDenied"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/apierror.InternalError"
            }
          }
        }
      }
    },
    "/api/wordpress/locations/{location_id}/users/{user_id}/change-password": {
      "post": {
        "security": [
          {
            "DaBasicAuth": []
          }
        ],
        "tags": [
          "WordPress"
        ],
        "summary": "Change wordpress user account password",
        "parameters": [
          {
            "type": "string",
            "description": "WordPress location ID",
            "name": "location_id",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "User ID",
            "name": "user_id",
            "in": "path",
            "required": true
          },
          {
            "description": "payload",
            "name": "payload",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/web.wordpressUserPassword"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/apierror.BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/apierror.Unauthorized"
            }
          },
          "402": {
            "description": "Payment Required",
            "schema": {
              "$ref": "#/definitions/apierror.LicenseOverused"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/apierror.AccessDenied"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/apierror.InternalError"
            }
          }
        }
      }
    },
    "/api/wordpress/locations/{location_id}/users/{user_id}/sso-login": {
      "post": {
        "security": [
          {
            "DaBasicAuth": []
          }
        ],
        "description": "This endpoint will create a magic login link for specified user .",
        "tags": [
          "WordPress"
        ],
        "summary": "Create magic login URL.",
        "parameters": [
          {
            "type": "string",
            "description": "WordPress location ID",
            "name": "location_id",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "User ID",
            "name": "user_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/web.wordpressSSO"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/apierror.BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/apierror.Unauthorized"
            }
          },
          "402": {
            "description": "Payment Required",
            "schema": {
              "$ref": "#/definitions/apierror.LicenseOverused"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/apierror.AccessDenied"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/apierror.InternalError"
            }
          }
        }
      }
    },
    "/api/wordpress/locations/{location_id}/wordpress": {
      "get": {
        "security": [
          {
            "DaBasicAuth": []
          }
        ],
        "tags": [
          "WordPress"
        ],
        "summary": "Retrieve information about a single WordPress installation",
        "parameters": [
          {
            "type": "string",
            "description": "WordPress location ID",
            "name": "location_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/web.wordpressInstance"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/apierror.BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/apierror.Unauthorized"
            }
          },
          "402": {
            "description": "Payment Required",
            "schema": {
              "$ref": "#/definitions/apierror.LicenseOverused"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/apierror.AccessDenied"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/apierror.NotFound"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/apierror.InternalError"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "apierror.AccessDenied": {
      "type": "object",
      "required": [
        "type"
      ],
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "ACCESS_DENIED"
          ]
        }
      }
    },
    "apierror.AccountNotFound": {
      "type": "object",
      "required": [
        "account",
        "type"
      ],
      "properties": {
        "account": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "enum": [
            "ACCOUNT_NOT_FOUND"
          ]
        }
      }
    },
    "apierror.AccountRoleMismatch": {
      "type": "object",
      "required": [
        "account",
        "actual",
        "expected",
        "type"
      ],
      "properties": {
        "account": {
          "type": "string"
        },
        "actual": {
          "type": "string"
        },
        "expected": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "enum": [
            "ACCOUNT_ROLE_MISMATCH"
          ]
        }
      }
    },
    "apierror.AlreadyExists": {
      "type": "object",
      "required": [
        "type"
      ],
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "ALREADY_EXISTS"
          ]
        }
      }
    },
    "apierror.BadRequest": {
      "type": "object",
      "required": [
        "message",
        "type"
      ],
      "properties": {
        "message": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "enum": [
            "BAD_REQUEST"
          ]
        }
      }
    },
    "apierror.CBOptionInvalidValue": {
      "type": "object",
      "required": [
        "key",
        "reason",
        "type"
      ],
      "properties": {
        "key": {
          "description": "Options field which has invalid value",
          "type": "string"
        },
        "reason": {
          "description": "Reason why the value is not valid",
          "type": "string"
        },
        "type": {
          "type": "string",
          "enum": [
            "CB_OPTION_INVALID_VALUE"
          ]
        }
      }
    },
    "apierror.ChpasswdBadCurrentPassword": {
      "type": "object",
      "required": [
        "type"
      ],
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "CHPASSWD_BAD_CURRENT_PASSWORD"
          ]
        }
      }
    },
    "apierror.ClamAVPathNotFound": {
      "type": "object",
      "required": [
        "type"
      ],
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "CLAMAV_PATH_NOT_FOUND"
          ]
        }
      }
    },
    "apierror.ClamAVProcessNotFound": {
      "type": "object",
      "required": [
        "type"
      ],
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "CLAMAV_PROCESS_NOT_FOUND"
          ]
        }
      }
    },
    "apierror.ClamAVScanLimitError": {
      "type": "object",
      "required": [
        "type"
      ],
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "CLAMAV_SCAN_LIMIT_ERROR"
          ]
        }
      }
    },
    "apierror.CpanelImportSSHAuthFailed": {
      "type": "object",
      "required": [
        "type"
      ],
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "CPANEL_IMPORT_SSH_AUTH_FAILED"
          ]
        }
      }
    },
    "apierror.CpanelImportSSHConnectionFailed": {
      "type": "object",
      "required": [
        "type"
      ],
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "CPANEL_IMPORT_SSH_CONNECTION_FAILED"
          ]
        }
      }
    },
    "apierror.CpanelImportSSHNotCpanelServer": {
      "type": "object",
      "required": [
        "type"
      ],
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "CPANEL_IMPORT_SSH_NOT_CPANEL_SERVER"
          ]
        }
      }
    },
    "apierror.CpanelImportTaskAlreadyStarted": {
      "type": "object",
      "required": [
        "type"
      ],
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "CPANEL_IMPORT_TASK_ALREADY_STARTED"
          ]
        }
      }
    },
    "apierror.DatabaseClone": {
      "type": "object",
      "required": [
        "message",
        "type"
      ],
      "properties": {
        "message": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "enum": [
            "DATABASE_CLONE"
          ]
        }
      }
    },
    "apierror.DatabaseImport": {
      "type": "object",
      "required": [
        "message",
        "type"
      ],
      "properties": {
        "message": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "enum": [
            "DATABASE_IMPORT"
          ]
        }
      }
    },
    "apierror.DatabaseInvalidCharset": {
      "type": "object",
      "required": [
        "type"
      ],
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "DATABASE_INVALID_CHARSET"
          ]
        }
      }
    },
    "apierror.DatabaseInvalidCollation": {
      "type": "object",
      "required": [
        "type"
      ],
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "DATABASE_INVALID_COLLATION"
          ]
        }
      }
    },
    "apierror.DatabaseInvalidEntityName": {
      "type": "object",
      "required": [
        "type"
      ],
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "DATABASE_INVALID_ENTITY_NAME"
          ]
        }
      }
    },
    "apierror.DatabaseNoViableDefiner": {
      "type": "object",
      "required": [
        "message",
        "type"
      ],
      "properties": {
        "message": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "enum": [
            "DATABASE_NO_VIABLE_DEFINER"
          ]
        }
      }
    },
    "apierror.DatabaseUsersExceedLimit": {
      "type": "object",
      "required": [
        "type"
      ],
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "DATABASE_USERS_EXCEED_LIMIT"
          ]
        }
      }
    },
    "apierror.DatabasesExceedLimit": {
      "type": "object",
      "required": [
        "type"
      ],
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "DATABASES_EXCEED_LIMIT"
          ]
        }
      }
    },
    "apierror.GitDeployBranchNotSet": {
      "type": "object",
      "required": [
        "type"
      ],
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "GIT_DEPLOY_BRANCH_NOT_SET"
          ]
        }
      }
    },
    "apierror.GitDeployDirNotSet": {
      "type": "object",
      "required": [
        "type"
      ],
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "GIT_DEPLOY_DIR_NOT_SET"
          ]
        }
      }
    },
    "apierror.GitExecError": {
      "type": "object",
      "required": [
        "stderr",
        "type"
      ],
      "properties": {
        "stderr": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "enum": [
            "GIT_EXEC_ERROR"
          ]
        }
      }
    },
    "apierror.ImapsyncAuthenticationFailure": {
      "type": "object",
      "required": [
        "type"
      ],
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "IMAPSYNC_AUTHENTICATION_FAILURE"
          ]
        }
      }
    },
    "apierror.ImapsyncAuthenticationFailureUserDst": {
      "type": "object",
      "required": [
        "type"
      ],
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "IMAPSYNC_AUTHENTICATION_FAILURE_USER_DST"
          ]
        }
      }
    },
    "apierror.ImapsyncAuthenticationFailureUserSrc": {
      "type": "object",
      "required": [
        "type"
      ],
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "IMAPSYNC_AUTHENTICATION_FAILURE_USER_SRC"
          ]
        }
      }
    },
    "apierror.ImapsyncConnectionFailure": {
      "type": "object",
      "required": [
        "type"
      ],
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "IMAPSYNC_CONNECTION_FAILURE"
          ]
        }
      }
    },
    "apierror.ImapsyncConnectionFailureHostDst": {
      "type": "object",
      "required": [
        "type"
      ],
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "IMAPSYNC_CONNECTION_FAILURE_HOST_DST"
          ]
        }
      }
    },
    "apierror.ImapsyncConnectionFailureHostSrc": {
      "type": "object",
      "required": [
        "type"
      ],
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "IMAPSYNC_CONNECTION_FAILURE_HOST_SRC"
          ]
        }
      }
    },
    "apierror.ImapsyncMigrationLimitError": {
      "type": "object",
      "required": [
        "type"
      ],
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "IMAPSYNC_MIGRATION_LIMIT_ERROR"
          ]
        }
      }
    },
    "apierror.ImapsyncProcessNotFound": {
      "type": "object",
      "required": [
        "type"
      ],
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "IMAPSYNC_PROCESS_NOT_FOUND"
          ]
        }
      }
    },
    "apierror.InternalError": {
      "type": "object",
      "required": [
        "message",
        "type"
      ],
      "properties": {
        "message": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "enum": [
            "INTERNAL_ERROR"
          ]
        }
      }
    },
    "apierror.LicenseInvalid": {
      "type": "object",
      "required": [
        "message",
        "type"
      ],
      "properties": {
        "message": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "enum": [
            "LICENSE_INVALID"
          ]
        }
      }
    },
    "apierror.LicenseOverused": {
      "type": "object",
      "required": [
        "type"
      ],
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "LICENSE_OVERUSED"
          ]
        }
      }
    },
    "apierror.LicenseSessionNotConnected": {
      "type": "object",
      "required": [
        "type"
      ],
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "LICENSE_SESSION_NOT_CONNECTED"
          ]
        }
      }
    },
    "apierror.LoginAccountDisabled": {
      "type": "object",
      "required": [
        "type"
      ],
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "LOGIN_ACCOUNT_DISABLED"
          ]
        }
      }
    },
    "apierror.LoginFailedOTPResponse": {
      "type": "object",
      "required": [
        "type"
      ],
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "LOGIN_FAILED_OTP"
          ]
        }
      }
    },
    "apierror.LoginKeyAPIOnly": {
      "type": "object",
      "required": [
        "type"
      ],
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "LOGIN_KEY_API_ONLY"
          ]
        }
      }
    },
    "apierror.LoginKeyAlreadyExists": {
      "type": "object",
      "required": [
        "id",
        "type"
      ],
      "properties": {
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "enum": [
            "LOGIN_KEY_ALREADY_EXISTS"
          ]
        }
      }
    },
    "apierror.LoginKeyBadCurrentPassword": {
      "type": "object",
      "required": [
        "type"
      ],
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "LOGIN_KEY_BAD_CURRENT_PASSWORD"
          ]
        }
      }
    },
    "apierror.LoginKeyDuplicatePassword": {
      "type": "object",
      "required": [
        "type"
      ],
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "LOGIN_KEY_DUPLICATE_PASSWORD"
          ]
        }
      }
    },
    "apierror.LoginKeyReadOnly": {
      "type": "object",
      "required": [
        "id",
        "type"
      ],
      "properties": {
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "enum": [
            "LOGIN_KEY_READ_ONLY"
          ]
        }
      }
    },
    "apierror.NotFound": {
      "type": "object",
      "required": [
        "type"
      ],
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "NOT_FOUND"
          ]
        }
      }
    },
    "apierror.PreHookError": {
      "type": "object",
      "required": [
        "exitCode",
        "output",
        "path",
        "type"
      ],
      "properties": {
        "exitCode": {
          "type": "integer"
        },
        "output": {
          "type": "string"
        },
        "path": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "enum": [
            "PRE_HOOK_ERROR"
          ]
        }
      }
    },
    "apierror.ResellerExceedsLimits": {
      "type": "object",
      "required": [
        "type"
      ],
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "RESELLER_EXCEEDS_LIMIT"
          ]
        }
      }
    },
    "apierror.TLSCertificateInvalid": {
      "type": "object",
      "required": [
        "message",
        "type"
      ],
      "properties": {
        "message": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "enum": [
            "TLS_CERTIFICATE_INVALID"
          ]
        }
      }
    },
    "apierror.Unauthorized": {
      "type": "object",
      "required": [
        "type"
      ],
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "UNAUTHORIZED"
          ]
        }
      }
    },
    "apierror.WeakPassword": {
      "type": "object",
      "required": [
        "message",
        "type"
      ],
      "properties": {
        "message": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "enum": [
            "WEAK_PASSWORD"
          ]
        }
      }
    },
    "apierror.WordpressAlreadyInstalled": {
      "type": "object",
      "required": [
        "type"
      ],
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "WORDPRESS_ALREADY_INSTALLED"
          ]
        }
      }
    },
    "apierror.WordpressDatabaseError": {
      "type": "object",
      "required": [
        "type"
      ],
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "WORDPRESS_DATABASE_ERROR"
          ]
        }
      }
    },
    "eximlogparsing.Email": {
      "type": "object",
      "required": [
        "datetime",
        "from",
        "id",
        "state",
        "to"
      ],
      "properties": {
        "authenticator_client": {
          "description": "computed from AuthenticatorName",
          "type": "string",
          "example": "mindaugas@24average.com"
        },
        "authenticator_name": {
          "description": "Shared attributes",
          "type": "string",
          "example": "login:mindaugas@24average.com"
        },
        "authenticator_type": {
          "description": "computed from AuthenticatorName",
          "type": "string",
          "example": "login"
        },
        "certificate_verified": {
          "type": "boolean",
          "example": true
        },
        "chunking": {
          "type": "boolean"
        },
        "ciphers": {
          "type": "string",
          "example": "TLS1.3:TLS_AES_256_GCM_SHA384:256"
        },
        "datetime": {
          "type": "string",
          "format": "date-time"
        },
        "direction": {
          "description": "Incoming specific attributes",
          "type": "string",
          "enum": [
            "out",
            "in"
          ]
        },
        "dkim_verified": {
          "type": "string",
          "example": "gmail.com"
        },
        "envelope_from": {
          "type": "string",
          "example": "mindaugas@24average.com"
        },
        "from": {
          "type": "string",
          "example": "mindaugas@24average.com"
        },
        "host": {
          "type": "string",
          "example": "mail-il1-f170.google.com [209.85.166.170]"
        },
        "id": {
          "description": "General",
          "type": "string",
          "example": "1laYYj-0004qB-JQ"
        },
        "local_bounce": {
          "type": "string",
          "example": "1lXnHr-0008Mm-Ut"
        },
        "local_user": {
          "type": "string",
          "example": "mail"
        },
        "message_id": {
          "type": "string",
          "example": "CADDZ0X-L=zwMps5On3aJEpsSss_+esYqEXCRRkYxauTouG=1Rw@mail.gmail.com"
        },
        "other_values": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "protocol": {
          "type": "string",
          "example": "esmtpa"
        },
        "router": {
          "type": "string",
          "example": "localuser"
        },
        "size": {
          "type": "integer",
          "minimum": 0,
          "example": 1515
        },
        "smtp_confirmation": {
          "description": "Delivery specific attributes",
          "type": "string",
          "example": "250 2.0.0 OK  1623678986 v3si11398531ejc.422 - gsmtp"
        },
        "state": {
          "type": "string",
          "example": "failed"
        },
        "subject": {
          "type": "string",
          "example": "Test"
        },
        "to": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/eximlogparsing.Recipient"
          }
        },
        "transport": {
          "type": "string",
          "example": "remote_smtp"
        }
      }
    },
    "eximlogparsing.Recipient": {
      "type": "object",
      "required": [
        "address",
        "state"
      ],
      "properties": {
        "address": {
          "type": "string",
          "example": "diradmin@mindaugas.directadmin.dev"
        },
        "message": {
          "description": "Extra Deferred/Failed attributes",
          "type": "string",
          "example": "Unrouteable address"
        },
        "return_path": {
          "type": "string"
        },
        "state": {
          "type": "string",
          "enum": [
            "unknown",
            "deferred",
            "failed",
            "delivered"
          ]
        }
      }
    },
    "web.EmailVacation": {
      "type": "object",
      "required": [
        "endTime",
        "startTime"
      ],
      "properties": {
        "endTime": {
          "type": "string",
          "format": "date-time"
        },
        "startTime": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "web.EmailVacationDetail": {
      "type": "object",
      "required": [
        "endTime",
        "message",
        "plainContent",
        "replyIntervalSec",
        "startTime",
        "subjectPrefix"
      ],
      "properties": {
        "endTime": {
          "type": "string",
          "format": "date-time"
        },
        "message": {
          "type": "string"
        },
        "plainContent": {
          "description": "PlainContent denotes if Message provided is in plaintext",
          "type": "boolean"
        },
        "replyIntervalSec": {
          "type": "integer",
          "example": 2880
        },
        "startTime": {
          "type": "string",
          "format": "date-time"
        },
        "subjectPrefix": {
          "type": "string"
        }
      }
    },
    "web.ImpersonateRequest": {
      "type": "object",
      "required": [
        "username"
      ],
      "properties": {
        "username": {
          "type": "string"
        }
      }
    },
    "web.LoginRequest": {
      "type": "object",
      "required": [
        "password",
        "username"
      ],
      "properties": {
        "logoutURL": {
          "description": "An URL to redirect user after logout",
          "type": "string",
          "default": "/"
        },
        "otp": {
          "type": "object",
          "required": [
            "code",
            "remember"
          ],
          "properties": {
            "code": {
              "description": "Two factor authentication OTP code",
              "type": "string"
            },
            "remember": {
              "description": "if set to true sets a cookie to bypass 2FA auth in subsequent log-in attempts",
              "type": "boolean"
            }
          }
        },
        "password": {
          "type": "string"
        },
        "redirectURL": {
          "description": "An URL to redirect user after login",
          "type": "string",
          "default": "/"
        },
        "username": {
          "type": "string"
        }
      }
    },
    "web.LoginResult": {
      "type": "object",
      "required": [
        "loginURL",
        "sessionID"
      ],
      "properties": {
        "loginURL": {
          "description": "Can be used as browser navigation action to load DA from 3rd party domains",
          "type": "string"
        },
        "sessionID": {
          "type": "string"
        }
      }
    },
    "web.LogoutResponse": {
      "type": "object",
      "required": [
        "logoutURL"
      ],
      "properties": {
        "logoutURL": {
          "type": "string"
        }
      }
    },
    "web.acmeConfig": {
      "type": "object",
      "required": [
        "account",
        "additionalDomains",
        "dnsEnvironment",
        "dnsProvider",
        "enabled",
        "keyType",
        "provider"
      ],
      "properties": {
        "account": {
          "type": "string",
          "example": "admin@example.com"
        },
        "additionalDomains": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "example": [
            "extra.example.com"
          ]
        },
        "dnsEnvironment": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "example": {
            "CLOUDFLARE_DNS_API_TOKEN": "1234567890abcdefghijklmnopqrstuvwxyz"
          }
        },
        "dnsProvider": {
          "type": "string",
          "example": "cloudflare"
        },
        "enabled": {
          "type": "boolean",
          "example": true
        },
        "keyType": {
          "type": "string",
          "enum": [
            "ec256",
            "ec384",
            "rsa2048",
            "rsa3072",
            "rsa4096",
            "rsa8192"
          ],
          "example": "ec256"
        },
        "provider": {
          "description": "If empty, default provider is used.",
          "type": "string",
          "enum": [
            "",
            "letsencrypt",
            "letsencrypt-staging",
            "zerossl"
          ],
          "example": ""
        }
      }
    },
    "web.adminUsage": {
      "type": "object",
      "required": [
        "autoresponders",
        "bandwidthBytes",
        "dbQuotaBytes",
        "domainPointers",
        "domains",
        "emailAccounts",
        "emailDeliveries",
        "emailDeliveriesIncoming",
        "emailDeliveriesOutgoing",
        "emailForwarders",
        "emailQuotaBytes",
        "ftpAccounts",
        "inode",
        "lastTally",
        "mailingLists",
        "mySqlDatabases",
        "otherQuotaBytes",
        "quotaBytes",
        "resellers",
        "subdomains",
        "users"
      ],
      "properties": {
        "autoresponders": {
          "description": "admin.usage",
          "type": "integer",
          "example": 0
        },
        "bandwidthBytes": {
          "type": "integer",
          "example": 0
        },
        "dbQuotaBytes": {
          "type": "integer",
          "example": 425984
        },
        "domainPointers": {
          "type": "integer",
          "example": 0
        },
        "domains": {
          "type": "integer",
          "example": 5
        },
        "emailAccounts": {
          "type": "integer",
          "example": 8
        },
        "emailDeliveries": {
          "type": "integer",
          "example": 0
        },
        "emailDeliveriesIncoming": {
          "type": "integer",
          "example": 0
        },
        "emailDeliveriesOutgoing": {
          "type": "integer",
          "example": 0
        },
        "emailForwarders": {
          "type": "integer",
          "example": 0
        },
        "emailQuotaBytes": {
          "type": "integer",
          "example": 3624960
        },
        "ftpAccounts": {
          "type": "integer",
          "example": 7
        },
        "inode": {
          "type": "integer",
          "example": 948
        },
        "lastTally": {
          "type": "string",
          "format": "date-time"
        },
        "mailingLists": {
          "type": "integer",
          "example": 0
        },
        "mySqlDatabases": {
          "type": "integer",
          "example": 4
        },
        "otherQuotaBytes": {
          "type": "integer",
          "example": 0
        },
        "quotaBytes": {
          "type": "integer",
          "example": 9453541
        },
        "resellers": {
          "description": "Extra",
          "type": "integer",
          "example": 2
        },
        "subdomains": {
          "type": "integer",
          "example": 0
        },
        "users": {
          "type": "integer",
          "example": 4
        }
      }
    },
    "web.auditEntry": {
      "type": "object",
      "required": [
        "client_ip",
        "host",
        "id",
        "reference",
        "request_line",
        "rules",
        "timestamp"
      ],
      "properties": {
        "client_ip": {
          "type": "string"
        },
        "host": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "reference": {
          "type": "string"
        },
        "request_line": {
          "type": "string"
        },
        "rules": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/web.ruleData"
          }
        },
        "timestamp": {
          "type": "string"
        }
      }
    },
    "web.cbAction": {
      "type": "object",
      "required": [
        "command",
        "description",
        "name"
      ],
      "properties": {
        "command": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "description": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "web.cbCompileConfigRequest": {
      "type": "object",
      "required": [
        "script"
      ],
      "properties": {
        "script": {
          "type": "string",
          "example": "#!/bin/sh\n./configure --arg0=value0 --arg1=value1\n"
        }
      }
    },
    "web.cbCompileScript": {
      "type": "object",
      "required": [
        "app",
        "description",
        "script"
      ],
      "properties": {
        "app": {
          "type": "string",
          "example": "dovecot"
        },
        "description": {
          "type": "string",
          "example": "Dovecot configuration file"
        },
        "script": {
          "type": "string",
          "example": "#!/bin/sh\n./configure --prefix=/usr --sysconfdir=/etc --localstatedir=/var --with-systemdsystemunitdir=/etc/systemd/system --without-icu\n"
        }
      }
    },
    "web.cbCompileScriptMetadata": {
      "type": "object",
      "required": [
        "app",
        "custom",
        "description"
      ],
      "properties": {
        "app": {
          "type": "string",
          "example": "php74"
        },
        "custom": {
          "type": "boolean",
          "example": true
        },
        "description": {
          "type": "string",
          "example": "PHP 7.4 as php-fpm (default) configuration file"
        }
      }
    },
    "web.cbLogMetadata": {
      "type": "object",
      "required": [
        "bytes",
        "command",
        "name",
        "pid",
        "time"
      ],
      "properties": {
        "bytes": {
          "type": "integer",
          "example": 2235
        },
        "command": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "example": [
            "php",
            "7.4"
          ]
        },
        "name": {
          "type": "string",
          "example": "custombuild.1667908981.16800.cGhwX2ltYWdpY2sAOC4xAA.log"
        },
        "pid": {
          "type": "integer",
          "example": 16800
        },
        "time": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "web.cbOption": {
      "type": "object",
      "required": [
        "current",
        "default",
        "description",
        "name",
        "values"
      ],
      "properties": {
        "current": {
          "type": "string",
          "example": "7.4"
        },
        "default": {
          "type": "string",
          "example": "8.1"
        },
        "description": {
          "type": "string",
          "example": "Default version of PHP."
        },
        "name": {
          "type": "string",
          "example": "php1_release"
        },
        "values": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "example": [
            "5.3",
            "5.4",
            "5.5",
            "5.6",
            "7.0",
            "7.1",
            "7.2",
            "7.3",
            "7.4",
            "8.0",
            "8.1",
            "8.2"
          ]
        }
      }
    },
    "web.cbOptionFull": {
      "type": "object",
      "required": [
        "allowed",
        "default",
        "description",
        "key",
        "section",
        "value"
      ],
      "properties": {
        "allowed": {
          "description": "list of allowed option values, empty if any value is allowed",
          "type": "array",
          "items": {
            "type": "string"
          },
          "example": [
            "5.3",
            "5.4",
            "5.5",
            "5.6",
            "7.0",
            "7.1",
            "7.2",
            "7.3",
            "7.4",
            "8.0",
            "8.1",
            "8.2"
          ]
        },
        "default": {
          "description": "default option value",
          "type": "string",
          "example": "8.1"
        },
        "description": {
          "description": "human readable option description",
          "type": "string",
          "example": "Default version of PHP."
        },
        "key": {
          "description": "option key, same as in options.conf file",
          "type": "string",
          "example": "php1_release"
        },
        "section": {
          "description": "internal identifier of the options section",
          "type": "string",
          "example": "_php_"
        },
        "value": {
          "description": "currently set option value",
          "type": "string",
          "example": "7.4"
        }
      }
    },
    "web.cbOptionKV": {
      "type": "object",
      "required": [
        "key",
        "value"
      ],
      "properties": {
        "key": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      }
    },
    "web.cbOptionRequest": {
      "type": "object",
      "required": [
        "current",
        "name"
      ],
      "properties": {
        "current": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "web.cbOptions": {
      "type": "object",
      "required": [
        "advanced",
        "clamav",
        "cloudlinux",
        "cron",
        "custombuild",
        "ftp",
        "mail",
        "mysql",
        "php",
        "phpExtensions",
        "stats",
        "webapps",
        "webserver"
      ],
      "properties": {
        "advanced": {
          "$ref": "#/definitions/web.cbOptionsCategory"
        },
        "clamav": {
          "$ref": "#/definitions/web.cbOptionsCategory"
        },
        "cloudlinux": {
          "$ref": "#/definitions/web.cbOptionsCategory"
        },
        "cron": {
          "$ref": "#/definitions/web.cbOptionsCategory"
        },
        "custombuild": {
          "$ref": "#/definitions/web.cbOptionsCategory"
        },
        "ftp": {
          "$ref": "#/definitions/web.cbOptionsCategory"
        },
        "mail": {
          "$ref": "#/definitions/web.cbOptionsCategory"
        },
        "mysql": {
          "$ref": "#/definitions/web.cbOptionsCategory"
        },
        "php": {
          "$ref": "#/definitions/web.cbOptionsCategory"
        },
        "phpExtensions": {
          "$ref": "#/definitions/web.cbOptionsCategory"
        },
        "stats": {
          "$ref": "#/definitions/web.cbOptionsCategory"
        },
        "webapps": {
          "$ref": "#/definitions/web.cbOptionsCategory"
        },
        "webserver": {
          "$ref": "#/definitions/web.cbOptionsCategory"
        }
      }
    },
    "web.cbOptionsCategory": {
      "type": "object",
      "required": [
        "description",
        "options"
      ],
      "properties": {
        "description": {
          "type": "string",
          "example": "Advanced Settings"
        },
        "options": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/web.cbOption"
          }
        }
      }
    },
    "web.cbOptionsCategoryRequest": {
      "type": "object",
      "required": [
        "options"
      ],
      "properties": {
        "options": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/web.cbOptionRequest"
          }
        }
      }
    },
    "web.cbOptionsRequest": {
      "type": "object",
      "properties": {
        "advanced": {
          "$ref": "#/definitions/web.cbOptionsCategoryRequest"
        },
        "clamav": {
          "$ref": "#/definitions/web.cbOptionsCategoryRequest"
        },
        "cloudlinux": {
          "$ref": "#/definitions/web.cbOptionsCategoryRequest"
        },
        "cron": {
          "$ref": "#/definitions/web.cbOptionsCategoryRequest"
        },
        "custombuild": {
          "$ref": "#/definitions/web.cbOptionsCategoryRequest"
        },
        "ftp": {
          "$ref": "#/definitions/web.cbOptionsCategoryRequest"
        },
        "mail": {
          "$ref": "#/definitions/web.cbOptionsCategoryRequest"
        },
        "mysql": {
          "$ref": "#/definitions/web.cbOptionsCategoryRequest"
        },
        "php": {
          "$ref": "#/definitions/web.cbOptionsCategoryRequest"
        },
        "phpExtensions": {
          "$ref": "#/definitions/web.cbOptionsCategoryRequest"
        },
        "stats": {
          "$ref": "#/definitions/web.cbOptionsCategoryRequest"
        },
        "webapps": {
          "$ref": "#/definitions/web.cbOptionsCategoryRequest"
        },
        "webserver": {
          "$ref": "#/definitions/web.cbOptionsCategoryRequest"
        }
      }
    },
    "web.cbOptionsValidateResponse": {
      "type": "object",
      "required": [
        "valid"
      ],
      "properties": {
        "message": {
          "type": "string",
          "example": "unified_ftp_password_file is not set to 1.  You must convert before you can use pureftpd"
        },
        "valid": {
          "type": "boolean",
          "example": false
        }
      }
    },
    "web.cbRunRequest": {
      "type": "object",
      "required": [
        "command"
      ],
      "properties": {
        "command": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "web.cbRunResponse": {
      "type": "object",
      "required": [
        "logfile"
      ],
      "properties": {
        "logfile": {
          "type": "string",
          "example": "custombuild.1667908981.16800.cGhwX2ltYWdpY2sAOC4xAA.log"
        }
      }
    },
    "web.cbSoftware": {
      "type": "object",
      "required": [
        "main",
        "phpExtensions",
        "webapps"
      ],
      "properties": {
        "main": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/web.cbSoftwareApp"
          }
        },
        "phpExtensions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/web.cbSoftwareApp"
          }
        },
        "webapps": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/web.cbSoftwareApp"
          }
        }
      }
    },
    "web.cbSoftwareApp": {
      "type": "object",
      "required": [
        "command",
        "description",
        "disabled",
        "name",
        "version"
      ],
      "properties": {
        "command": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "example": [
            "apache"
          ]
        },
        "description": {
          "type": "string",
          "example": "Install/update Apache WEB server."
        },
        "disabled": {
          "type": "boolean",
          "example": false
        },
        "name": {
          "type": "string",
          "example": "Build Apache"
        },
        "version": {
          "type": "string",
          "example": "Version 2.4.54."
        }
      }
    },
    "web.cbState": {
      "type": "object",
      "required": [
        "running",
        "updatesCount"
      ],
      "properties": {
        "command": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "example": [
            "php",
            "7.4"
          ]
        },
        "logfile": {
          "type": "string",
          "example": "custombuild.1667908981.16800.cGhwX2ltYWdpY2sAOC4xAA.log"
        },
        "running": {
          "type": "boolean",
          "example": true
        },
        "updatesCount": {
          "type": "integer",
          "example": 2
        }
      }
    },
    "web.cbUpdate": {
      "type": "object",
      "required": [
        "available",
        "command",
        "name",
        "versionAvailable",
        "versionCurrent"
      ],
      "properties": {
        "available": {
          "description": "false if component is up to date",
          "type": "boolean",
          "example": true
        },
        "command": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "example": [
            "php",
            "8.1"
          ]
        },
        "name": {
          "type": "string",
          "example": "PHP 8.1"
        },
        "versionAvailable": {
          "type": "string",
          "example": "8.1.12"
        },
        "versionCurrent": {
          "type": "string",
          "example": "8.1.11"
        }
      }
    },
    "web.cbVersion": {
      "type": "object",
      "required": [
        "app",
        "version"
      ],
      "properties": {
        "app": {
          "type": "string",
          "example": "nginx"
        },
        "version": {
          "type": "string",
          "example": "1.23.1"
        }
      }
    },
    "web.cbVersionsCustomRequest": {
      "type": "object",
      "required": [
        "version"
      ],
      "properties": {
        "version": {
          "type": "string",
          "example": "1.23.1"
        }
      }
    },
    "web.changeUserCreatorRequest": {
      "type": "object",
      "required": [
        "account",
        "creator"
      ],
      "properties": {
        "account": {
          "description": "Username which creator is being changed",
          "type": "string"
        },
        "creator": {
          "description": "Username of the new user creator account",
          "type": "string"
        }
      }
    },
    "web.checkResult": {
      "type": "object",
      "required": [
        "details",
        "fixable",
        "issues"
      ],
      "properties": {
        "details": {
          "type": "string"
        },
        "fixable": {
          "type": "boolean"
        },
        "issues": {
          "description": "number of issues found",
          "type": "integer"
        }
      }
    },
    "web.chpasswdRequest": {
      "type": "object",
      "required": [
        "currentPassword",
        "newPassword"
      ],
      "properties": {
        "currentPassword": {
          "type": "string"
        },
        "newPassword": {
          "type": "string",
          "maxLength": 256,
          "minLength": 3
        }
      }
    },
    "web.clamAVProcess": {
      "type": "object",
      "required": [
        "path",
        "pid",
        "start_time"
      ],
      "properties": {
        "path": {
          "type": "string"
        },
        "pid": {
          "type": "integer"
        },
        "start_time": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "web.clamAVProcsResponse": {
      "type": "object",
      "required": [
        "processes"
      ],
      "properties": {
        "processes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/web.clamAVProcess"
          }
        }
      }
    },
    "web.clamAVRequest": {
      "type": "object",
      "required": [
        "path"
      ],
      "properties": {
        "path": {
          "type": "string"
        }
      }
    },
    "web.cpanelCheckRequest": {
      "type": "object",
      "required": [
        "remoteHost",
        "remotePassword",
        "remotePort",
        "remoteUser"
      ],
      "properties": {
        "remoteHost": {
          "description": "cpanel server hostname",
          "type": "string"
        },
        "remotePassword": {
          "description": "cpanel server SSH user password",
          "type": "string"
        },
        "remotePort": {
          "description": "cpanel server SSH port",
          "type": "integer"
        },
        "remoteUser": {
          "description": "cpanel server SSH user name",
          "type": "string"
        }
      }
    },
    "web.cpanelCheckResponse": {
      "type": "object",
      "required": [
        "accounts"
      ],
      "properties": {
        "accounts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/web.cpanelRemoteUser"
          }
        }
      }
    },
    "web.cpanelImportStart": {
      "type": "object",
      "required": [
        "accounts",
        "ignoreConvertErrors",
        "maxWorkers",
        "preserveOwner",
        "remoteHost",
        "remotePassword",
        "remotePort",
        "remoteUser",
        "replaceExistingUser"
      ],
      "properties": {
        "accounts": {
          "description": "list of accounts to restore",
          "type": "array",
          "items": {
            "type": "string"
          },
          "example": [
            "username1",
            "username2"
          ]
        },
        "homeOverride": {
          "description": "when non empty a given home directory is used when restoring this users",
          "type": "string",
          "example": "/home2"
        },
        "ignoreConvertErrors": {
          "description": "if true continue to restore account even if conversion step had some issues",
          "type": "boolean"
        },
        "maxWorkers": {
          "description": "maximum number of tasks that can be imported concurrently",
          "type": "integer",
          "default": 1,
          "maximum": 20,
          "minimum": 1,
          "example": 2
        },
        "preserveOwner": {
          "description": "admin only: if true user will be restored preserving original owner (owner has to already exist or be selected for import)",
          "type": "boolean"
        },
        "remoteHost": {
          "description": "cpanel server hostname",
          "type": "string",
          "example": "cp.example.net"
        },
        "remotePassword": {
          "description": "cpanel server SSH user password",
          "type": "string",
          "example": "secret-password"
        },
        "remotePort": {
          "description": "cpanel server SSH port",
          "type": "integer",
          "example": 22
        },
        "remoteUser": {
          "description": "cpanel server SSH user name",
          "type": "string",
          "example": "root"
        },
        "replaceExistingUser": {
          "description": "if true user will be restored even if such account already exists on DA server",
          "type": "boolean"
        }
      }
    },
    "web.cpanelImportTask": {
      "type": "object",
      "required": [
        "account",
        "error",
        "id",
        "ignoreConvertErrors",
        "pid",
        "preserveOwner",
        "remoteHost",
        "remotePort",
        "remoteUser",
        "replaceExistingUser",
        "stage",
        "startTime",
        "stopTime"
      ],
      "properties": {
        "account": {
          "description": "cpanel user account to import",
          "type": "string",
          "example": "username"
        },
        "dependsOn": {
          "type": "integer",
          "example": 3
        },
        "error": {
          "description": "error which caused import to terminate",
          "type": "string",
          "example": "connection refused"
        },
        "homeOverride": {
          "type": "string",
          "example": "/home2"
        },
        "id": {
          "description": "unique import task ID",
          "type": "integer",
          "example": 5
        },
        "ignoreConvertErrors": {
          "description": "if true continue to restore account even if conversion step had some issues",
          "type": "boolean"
        },
        "pid": {
          "description": "process ID of import task executor",
          "type": "integer",
          "example": 64237
        },
        "preserveOwner": {
          "description": "admin only: if true user will be restored preserving original owner (owner has to already exist or be selected for import)",
          "type": "boolean"
        },
        "remoteHost": {
          "description": "cpanel server hostname",
          "type": "string",
          "example": "cp.example.net"
        },
        "remotePort": {
          "description": "cpanel server SSH port",
          "type": "integer",
          "example": 22
        },
        "remoteUser": {
          "description": "cpanel server SSH user name",
          "type": "string",
          "example": "root"
        },
        "replaceExistingUser": {
          "description": "if true user will be restored even if such account already exists on DA server",
          "type": "boolean"
        },
        "stage": {
          "description": "current import task stage",
          "type": "string",
          "enum": [
            "pending",
            "backup",
            "download",
            "convert",
            "restore",
            "done"
          ]
        },
        "startTime": {
          "description": "time when import task started",
          "type": "string",
          "format": "date-time"
        },
        "stopTime": {
          "description": "time when import task ended",
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "web.cpanelImportTaskLog": {
      "type": "object",
      "required": [
        "id",
        "line",
        "stderr"
      ],
      "properties": {
        "id": {
          "type": "integer"
        },
        "line": {
          "type": "string"
        },
        "stderr": {
          "type": "boolean"
        }
      }
    },
    "web.cpanelRemoteUser": {
      "type": "object",
      "required": [
        "domain",
        "email",
        "ip",
        "owner",
        "plan",
        "reseller",
        "suspended",
        "user"
      ],
      "properties": {
        "domain": {
          "type": "string",
          "example": "example.net"
        },
        "email": {
          "type": "string",
          "example": "johndoe@example.net"
        },
        "ip": {
          "type": "string",
          "example": "192.168.0.1"
        },
        "owner": {
          "type": "string",
          "example": "root"
        },
        "plan": {
          "type": "string",
          "example": "default"
        },
        "reseller": {
          "type": "boolean"
        },
        "suspended": {
          "type": "boolean"
        },
        "user": {
          "type": "string",
          "example": "johndoe"
        }
      }
    },
    "web.dbCloneDatabaseDestination": {
      "type": "object",
      "required": [
        "database"
      ],
      "properties": {
        "database": {
          "type": "string"
        },
        "dbuser": {
          "description": "If non-empty, db user will be created.",
          "type": "string"
        },
        "password": {
          "description": "If empty, password is auto-generated.",
          "type": "string"
        }
      }
    },
    "web.dbCloneDatabaseRequest": {
      "type": "object",
      "required": [
        "destination",
        "source"
      ],
      "properties": {
        "destination": {
          "$ref": "#/definitions/web.dbCloneDatabaseDestination"
        },
        "source": {
          "type": "object",
          "required": [
            "database"
          ],
          "properties": {
            "database": {
              "type": "string"
            }
          }
        }
      }
    },
    "web.dbCloneDatabaseResponse": {
      "type": "object",
      "required": [
        "address",
        "database",
        "unixSocket"
      ],
      "properties": {
        "address": {
          "description": "Database address. If unixSocket is true, it's a path to the unixsocket, otherwise it's an URL.",
          "type": "string"
        },
        "database": {
          "type": "string"
        },
        "dbuser": {
          "description": "Empty if request dbuser is empty.",
          "type": "string"
        },
        "hostPatterns": {
          "description": "Empty if request dbuser is empty.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "password": {
          "description": "Empty if request dbuser is empty.",
          "type": "string"
        },
        "privileges": {
          "description": "Empty if request dbuser is empty.",
          "$ref": "#/definitions/web.dbPrivs"
        },
        "unixSocket": {
          "type": "boolean"
        }
      }
    },
    "web.dbCreateDatabaseRequest": {
      "type": "object",
      "required": [
        "database"
      ],
      "properties": {
        "charset": {
          "description": "If empty, uses default server charset.",
          "type": "string"
        },
        "collation": {
          "description": "If empty, uses default server collation.",
          "type": "string"
        },
        "database": {
          "type": "string"
        }
      }
    },
    "web.dbCreateDatabaseWithUserRequest": {
      "type": "object",
      "required": [
        "database"
      ],
      "properties": {
        "charset": {
          "description": "If empty, default server charset is used.",
          "type": "string"
        },
        "collation": {
          "description": "If empty, default server collation is used.",
          "type": "string"
        },
        "database": {
          "type": "string"
        },
        "dbuser": {
          "description": "If empty, database name is used.",
          "type": "string"
        },
        "hostPatterns": {
          "description": "If empty, access hosts from mysql config are used.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "password": {
          "description": "If empty, random password is generated.",
          "type": "string"
        },
        "privileges": {
          "description": "If empty, all privileges are granted.",
          "$ref": "#/definitions/web.dbPrivs"
        }
      }
    },
    "web.dbCreateUserRequest": {
      "type": "object",
      "required": [
        "dbuser",
        "password"
      ],
      "properties": {
        "dbuser": {
          "type": "string",
          "example": "admin_dbuser0"
        },
        "hostPatterns": {
          "description": "Valid values include wildcard '%', 'localhost', IPv4 and IPv6 addresses. At least one host pattern must exist but no more than 30.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "example": [
            "localhost",
            "127.0.0.1",
            "%"
          ]
        },
        "password": {
          "type": "string"
        }
      }
    },
    "web.dbDatabaseListEntry": {
      "type": "object",
      "required": [
        "database",
        "definerIssues",
        "sizeBytes",
        "tableCount",
        "userCount"
      ],
      "properties": {
        "database": {
          "type": "string",
          "example": "admin_wpAOTQzNX"
        },
        "definerIssues": {
          "type": "integer",
          "example": 0
        },
        "sizeBytes": {
          "type": "integer",
          "example": 655360
        },
        "tableCount": {
          "type": "integer",
          "example": 4
        },
        "userCount": {
          "type": "integer",
          "example": 5
        }
      }
    },
    "web.dbDatabaseMetadata": {
      "type": "object",
      "required": [
        "database",
        "defaultCharset",
        "defaultCollation",
        "definerIssues",
        "eventCount",
        "routineCount",
        "sizeBytes",
        "tableCount",
        "triggerCount",
        "userCount",
        "viewCount"
      ],
      "properties": {
        "database": {
          "type": "string",
          "example": "admin_wpAOTQzNX"
        },
        "defaultCharset": {
          "type": "string",
          "example": "utf8mb4"
        },
        "defaultCollation": {
          "type": "string",
          "example": "utf8mb4_bin"
        },
        "definerIssues": {
          "type": "integer",
          "example": 0
        },
        "eventCount": {
          "type": "integer",
          "example": 1
        },
        "routineCount": {
          "type": "integer",
          "example": 1
        },
        "sizeBytes": {
          "type": "integer",
          "example": 655360
        },
        "tableCount": {
          "type": "integer",
          "example": 4
        },
        "triggerCount": {
          "type": "integer",
          "example": 2
        },
        "userCount": {
          "type": "integer",
          "example": 5
        },
        "viewCount": {
          "type": "integer",
          "example": 3
        }
      }
    },
    "web.dbDatabaseUser": {
      "type": "object",
      "required": [
        "conflictingHosts",
        "dbuser",
        "hostPatterns",
        "privileges"
      ],
      "properties": {
        "conflictingHosts": {
          "description": "Reports whether privileges differ between hosts.",
          "type": "boolean"
        },
        "dbuser": {
          "type": "string",
          "example": "admin_wpAOTQzNX"
        },
        "hostPatterns": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "example": [
            "%",
            "localhost"
          ]
        },
        "privileges": {
          "$ref": "#/definitions/web.dbPrivs"
        }
      }
    },
    "web.dbFullConnectionResponse": {
      "type": "object",
      "required": [
        "address",
        "database",
        "dbuser",
        "hostPatterns",
        "password",
        "privileges",
        "unixSocket"
      ],
      "properties": {
        "address": {
          "description": "Database address. If unixSocket is true, it's a path to the unixsocket, otherwise it's an URL.",
          "type": "string"
        },
        "database": {
          "type": "string"
        },
        "dbuser": {
          "type": "string"
        },
        "hostPatterns": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "password": {
          "type": "string"
        },
        "privileges": {
          "$ref": "#/definitions/web.dbPrivs"
        },
        "unixSocket": {
          "type": "boolean"
        }
      }
    },
    "web.dbInfoResponse": {
      "type": "object",
      "required": [
        "address",
        "defaultHostPatterns",
        "maxDatabaseLength",
        "maxHostsPerUser",
        "maxUsernameLength",
        "oneClickPhpMyAdminLogin",
        "sqlMode",
        "unixSocket",
        "version"
      ],
      "properties": {
        "address": {
          "description": "Database address. If unixSocket is true, it's a path to the unixsocket, otherwise it's an URL.",
          "type": "string"
        },
        "defaultHostPatterns": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "maxDatabaseLength": {
          "type": "integer"
        },
        "maxHostsPerUser": {
          "type": "integer"
        },
        "maxUsernameLength": {
          "type": "integer"
        },
        "oneClickPhpMyAdminLogin": {
          "type": "boolean"
        },
        "sqlMode": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "unixSocket": {
          "type": "boolean"
        },
        "version": {
          "type": "string"
        }
      }
    },
    "web.dbMonitorProcess": {
      "type": "object",
      "required": [
        "command",
        "host",
        "id",
        "time",
        "user"
      ],
      "properties": {
        "command": {
          "type": "string",
          "example": "Query"
        },
        "database": {
          "type": "string",
          "example": "admin_wpXYZ"
        },
        "host": {
          "type": "string",
          "example": "localhost"
        },
        "id": {
          "type": "integer",
          "example": 1061
        },
        "info": {
          "type": "string",
          "example": "SELECT user_login FROM wp_users"
        },
        "state": {
          "type": "string",
          "example": "Executing"
        },
        "time": {
          "description": "In nanoseconds.",
          "type": "integer",
          "example": 1000000000
        },
        "user": {
          "type": "string",
          "example": "admin"
        }
      }
    },
    "web.dbPrivs": {
      "type": "object",
      "required": [
        "alter",
        "alterRoutine",
        "create",
        "createRoutine",
        "createTmpTable",
        "createView",
        "delete",
        "drop",
        "event",
        "execute",
        "index",
        "insert",
        "lockTables",
        "references",
        "select",
        "showView",
        "trigger",
        "update"
      ],
      "properties": {
        "alter": {
          "type": "boolean"
        },
        "alterRoutine": {
          "type": "boolean"
        },
        "create": {
          "type": "boolean"
        },
        "createRoutine": {
          "type": "boolean"
        },
        "createTmpTable": {
          "type": "boolean"
        },
        "createView": {
          "type": "boolean"
        },
        "delete": {
          "type": "boolean"
        },
        "drop": {
          "type": "boolean"
        },
        "event": {
          "type": "boolean"
        },
        "execute": {
          "type": "boolean"
        },
        "index": {
          "type": "boolean"
        },
        "insert": {
          "type": "boolean"
        },
        "lockTables": {
          "type": "boolean"
        },
        "references": {
          "type": "boolean"
        },
        "select": {
          "type": "boolean"
        },
        "showView": {
          "type": "boolean"
        },
        "trigger": {
          "type": "boolean"
        },
        "update": {
          "type": "boolean"
        }
      }
    },
    "web.dbTableActionResult": {
      "type": "object",
      "required": [
        "message",
        "success",
        "table"
      ],
      "properties": {
        "message": {
          "type": "string",
          "example": "[note] Table does not support optimize, doing recreate + analyze instead\n[status] OK"
        },
        "success": {
          "type": "boolean",
          "example": true
        },
        "table": {
          "type": "string",
          "example": "admin_db0.table0"
        }
      }
    },
    "web.dbUser": {
      "type": "object",
      "required": [
        "dbuser",
        "hostPatterns"
      ],
      "properties": {
        "dbuser": {
          "type": "string",
          "example": "admin_dbuser0"
        },
        "hostPatterns": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "example": [
            "localhost",
            "192.168.0.0/16"
          ]
        }
      }
    },
    "web.dbUserChangePasswordRequest": {
      "type": "object",
      "required": [
        "newPassword"
      ],
      "properties": {
        "newPassword": {
          "type": "string",
          "maxLength": 128,
          "minLength": 8
        }
      }
    },
    "web.dbUserChangePrivsRequest": {
      "type": "object",
      "required": [
        "privileges"
      ],
      "properties": {
        "privileges": {
          "$ref": "#/definitions/web.dbPrivs"
        }
      }
    },
    "web.dbUserDatabase": {
      "type": "object",
      "required": [
        "conflictingHosts",
        "database",
        "privileges"
      ],
      "properties": {
        "conflictingHosts": {
          "description": "Reports whether privileges differ between hosts.",
          "type": "boolean"
        },
        "database": {
          "type": "string",
          "example": "admin_wpAOTQzNX"
        },
        "privileges": {
          "$ref": "#/definitions/web.dbPrivs"
        }
      }
    },
    "web.emailLogResponse": {
      "type": "object",
      "required": [
        "emails",
        "more"
      ],
      "properties": {
        "emails": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/eximlogparsing.Email"
          }
        },
        "more": {
          "description": "More reports that more emails exist in given time frame but internal limit was hit.",
          "type": "boolean"
        }
      }
    },
    "web.emailLogsSummary": {
      "type": "object",
      "required": [
        "deferred",
        "delivered",
        "domain",
        "failed",
        "mailbox",
        "owner",
        "unknown"
      ],
      "properties": {
        "deferred": {
          "$ref": "#/definitions/web.emailLogsSummaryStat"
        },
        "delivered": {
          "$ref": "#/definitions/web.emailLogsSummaryStat"
        },
        "domain": {
          "type": "string",
          "example": "testdomain.com"
        },
        "failed": {
          "$ref": "#/definitions/web.emailLogsSummaryStat"
        },
        "mailbox": {
          "type": "string",
          "example": "testowner123@testdomain.com"
        },
        "owner": {
          "type": "string",
          "example": "testowner"
        },
        "unknown": {
          "$ref": "#/definitions/web.emailLogsSummaryStat"
        }
      }
    },
    "web.emailLogsSummaryStat": {
      "type": "object",
      "required": [
        "bytes",
        "count"
      ],
      "properties": {
        "bytes": {
          "type": "integer",
          "minimum": 0,
          "example": 14232
        },
        "count": {
          "type": "integer",
          "minimum": 0,
          "example": 6
        }
      }
    },
    "web.execPayload": {
      "type": "object",
      "required": [
        "command"
      ],
      "properties": {
        "command": {
          "type": "string"
        },
        "options": {
          "type": "string"
        }
      }
    },
    "web.execResult": {
      "type": "object",
      "required": [
        "exitCode",
        "output"
      ],
      "properties": {
        "exitCode": {
          "type": "integer"
        },
        "output": {
          "type": "string"
        }
      }
    },
    "web.fixResult": {
      "type": "object",
      "required": [
        "details",
        "fixed",
        "issues"
      ],
      "properties": {
        "details": {
          "type": "string"
        },
        "fixed": {
          "description": "numebr of issues fixed",
          "type": "integer"
        },
        "issues": {
          "description": "number of issues remaining (failed to fix)",
          "type": "integer"
        }
      }
    },
    "web.fmDiskUsageResponse": {
      "type": "object",
      "required": [
        "dirsTotal",
        "filesTotal",
        "sizeBytes",
        "sizeOnDiskBytes"
      ],
      "properties": {
        "dirsTotal": {
          "type": "integer"
        },
        "filesTotal": {
          "type": "integer"
        },
        "sizeBytes": {
          "type": "integer"
        },
        "sizeOnDiskBytes": {
          "type": "integer"
        }
      }
    },
    "web.fmListEntry": {
      "type": "object",
      "required": [
        "createTime",
        "gid",
        "group",
        "mode",
        "modifyTime",
        "name",
        "sizeBytes",
        "symlink",
        "type",
        "uid",
        "unixMode",
        "user"
      ],
      "properties": {
        "createTime": {
          "type": "string",
          "format": "date-time"
        },
        "gid": {
          "type": "integer",
          "example": 1003
        },
        "group": {
          "type": "string",
          "example": "apache"
        },
        "mode": {
          "type": "string",
          "example": "drwxr-x---"
        },
        "modifyTime": {
          "description": "Most recent of Change and Modify times.",
          "type": "string",
          "format": "date-time"
        },
        "name": {
          "type": "string",
          "example": "example.com"
        },
        "sizeBytes": {
          "type": "integer",
          "example": 4096
        },
        "symlink": {
          "type": "boolean",
          "example": true
        },
        "type": {
          "type": "string",
          "enum": [
            "dir",
            "file",
            "special",
            "broken_symlink"
          ],
          "example": "dir"
        },
        "uid": {
          "type": "integer",
          "example": 1002
        },
        "unixMode": {
          "type": "integer",
          "example": 16872
        },
        "user": {
          "type": "string",
          "example": "admin"
        }
      }
    },
    "web.fmListResponse": {
      "type": "object",
      "required": [
        "canonicalPath",
        "files",
        "filesLimit",
        "filesTotal"
      ],
      "properties": {
        "canonicalPath": {
          "type": "string",
          "example": "/domains/example.com/public_html"
        },
        "files": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/web.fmListEntry"
          }
        },
        "filesLimit": {
          "type": "integer",
          "example": 1000
        },
        "filesTotal": {
          "type": "integer",
          "example": 1445
        }
      }
    },
    "web.fmMetadataResponse": {
      "type": "object",
      "required": [
        "accessTime",
        "birthTime",
        "changeTime",
        "gid",
        "group",
        "mode",
        "modifyTime",
        "name",
        "sizeBytes",
        "type",
        "uid",
        "unixMode",
        "user"
      ],
      "properties": {
        "accessTime": {
          "type": "string",
          "format": "date-time"
        },
        "birthTime": {
          "type": "string",
          "format": "date-time"
        },
        "changeTime": {
          "type": "string",
          "format": "date-time"
        },
        "gid": {
          "type": "integer",
          "example": 1002
        },
        "group": {
          "type": "string",
          "example": "admin"
        },
        "mode": {
          "type": "string",
          "example": "Lrwxrwxrwx"
        },
        "modifyTime": {
          "type": "string",
          "format": "date-time"
        },
        "name": {
          "type": "string",
          "example": "link_to_final"
        },
        "sizeBytes": {
          "type": "integer",
          "example": 7
        },
        "symlink": {
          "description": "Omitted when type is not symlink.",
          "$ref": "#/definitions/web.fmMetadataSymlink"
        },
        "type": {
          "type": "string",
          "enum": [
            "dir",
            "file",
            "socket",
            "symlink",
            "named_pipe",
            "device",
            "char_device",
            "unknown"
          ],
          "example": "symlink"
        },
        "uid": {
          "type": "integer",
          "example": 1002
        },
        "unixMode": {
          "type": "integer",
          "example": 41471
        },
        "user": {
          "type": "string",
          "example": "admin"
        }
      }
    },
    "web.fmMetadataSymlink": {
      "type": "object",
      "required": [
        "resolved",
        "target"
      ],
      "properties": {
        "resolved": {
          "description": "Empty string means symlink is broken.",
          "type": "string",
          "example": "/testing/final"
        },
        "target": {
          "type": "string",
          "example": "./final"
        }
      }
    },
    "web.fmTreeEntry": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "dirs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/web.fmTreeEntry"
          }
        },
        "incomplete": {
          "description": "Reports that entry wasn't fully traversed.",
          "type": "boolean",
          "example": true
        },
        "name": {
          "type": "string",
          "example": "example.com"
        },
        "symlink": {
          "type": "boolean",
          "example": false
        }
      }
    },
    "web.fmTreeResponse": {
      "type": "object",
      "required": [
        "canonicalPath",
        "tree"
      ],
      "properties": {
        "canonicalPath": {
          "type": "string",
          "example": "/domains/example.com/public_html"
        },
        "tree": {
          "$ref": "#/definitions/web.fmTreeEntry"
        }
      }
    },
    "web.gitAuthor": {
      "type": "object",
      "required": [
        "email",
        "name"
      ],
      "properties": {
        "email": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "web.gitCommit": {
      "type": "object",
      "required": [
        "author",
        "hash",
        "message",
        "time"
      ],
      "properties": {
        "author": {
          "$ref": "#/definitions/web.gitAuthor"
        },
        "hash": {
          "type": "string"
        },
        "message": {
          "type": "string"
        },
        "time": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "web.gitCommitInfoResult": {
      "type": "object",
      "required": [
        "commit",
        "diff"
      ],
      "properties": {
        "commit": {
          "$ref": "#/definitions/web.gitCommit"
        },
        "diff": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/web.gitFileDiff"
          }
        }
      }
    },
    "web.gitCreateParameters": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "keyfile": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "remote": {
          "type": "string"
        }
      }
    },
    "web.gitDiffLine": {
      "type": "object",
      "required": [
        "line",
        "type"
      ],
      "properties": {
        "line": {
          "type": "string"
        },
        "type": {
          "type": "string"
        }
      }
    },
    "web.gitFileDiff": {
      "type": "object",
      "required": [
        "diffs",
        "filename"
      ],
      "properties": {
        "diffs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/web.gitDiffLine"
          }
        },
        "filename": {
          "type": "string"
        }
      }
    },
    "web.gitLogResult": {
      "type": "object",
      "required": [
        "commits",
        "more_newer",
        "more_older"
      ],
      "properties": {
        "commits": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/web.gitCommit"
          }
        },
        "more_newer": {
          "type": "boolean"
        },
        "more_older": {
          "type": "boolean"
        }
      }
    },
    "web.gitRepositoryResult": {
      "type": "object",
      "required": [
        "branches",
        "deploy_branch",
        "deploy_dir",
        "keyfile",
        "name",
        "remote",
        "url",
        "uuid",
        "valid",
        "webhook_url"
      ],
      "properties": {
        "branches": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "deploy_branch": {
          "type": "string"
        },
        "deploy_dir": {
          "type": "string"
        },
        "keyfile": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "remote": {
          "type": "string"
        },
        "url": {
          "type": "string"
        },
        "uuid": {
          "type": "string"
        },
        "valid": {
          "type": "boolean"
        },
        "webhook_url": {
          "type": "string"
        }
      }
    },
    "web.gitUpdateParameters": {
      "type": "object",
      "required": [
        "deploy_branch",
        "deploy_dir",
        "keyfile"
      ],
      "properties": {
        "deploy_branch": {
          "type": "string"
        },
        "deploy_dir": {
          "type": "string"
        },
        "keyfile": {
          "type": "string"
        }
      }
    },
    "web.imapsyncExportRequest": {
      "type": "object",
      "required": [
        "from",
        "to"
      ],
      "properties": {
        "from": {
          "$ref": "#/definitions/web.localLocation"
        },
        "to": {
          "$ref": "#/definitions/web.remoteLocation"
        }
      }
    },
    "web.imapsyncImportRequest": {
      "type": "object",
      "required": [
        "from",
        "to"
      ],
      "properties": {
        "from": {
          "$ref": "#/definitions/web.remoteLocation"
        },
        "to": {
          "$ref": "#/definitions/web.localLocation"
        }
      }
    },
    "web.imapsyncMigration": {
      "type": "object",
      "required": [
        "from",
        "id",
        "started",
        "to"
      ],
      "properties": {
        "from": {
          "$ref": "#/definitions/web.imapsyncMigrationLocation"
        },
        "id": {
          "type": "integer"
        },
        "started": {
          "type": "string",
          "format": "date-time"
        },
        "to": {
          "$ref": "#/definitions/web.imapsyncMigrationLocation"
        }
      }
    },
    "web.imapsyncMigrationLocation": {
      "type": "object",
      "required": [
        "server",
        "username"
      ],
      "properties": {
        "server": {
          "type": "string"
        },
        "username": {
          "type": "string"
        }
      }
    },
    "web.licenseLimitsResponse": {
      "type": "object",
      "required": [
        "legacy",
        "maxAdminsOrResellers",
        "maxDomains",
        "maxUsers",
        "onlyVPS",
        "proPack",
        "trial"
      ],
      "properties": {
        "legacy": {
          "description": "If set to true, this license is restricted to legacy DA mode.",
          "type": "boolean"
        },
        "maxAdminsOrResellers": {
          "description": "Max number of admin or reseller accounts allowed on the server, zero means no limit.",
          "type": "integer",
          "example": 1
        },
        "maxDomains": {
          "description": "Max number of domains allowed to be configured on the server, zero means no limit.",
          "type": "integer",
          "example": 50
        },
        "maxUsers": {
          "description": "Max number of normal users allowed on the server, zero means no limit.",
          "type": "integer",
          "example": 50
        },
        "onlyVPS": {
          "description": "If set to true, license can only be used on VPS (not physical machines).",
          "type": "boolean"
        },
        "proPack": {
          "description": "If set to true, this license has extended features offered with Pro-Pack.",
          "type": "boolean"
        },
        "trial": {
          "description": "If set to true, this is a trial license.",
          "type": "boolean"
        }
      }
    },
    "web.licenseProofResponse": {
      "type": "object",
      "required": [
        "checkUrl",
        "proof"
      ],
      "properties": {
        "checkUrl": {
          "type": "string",
          "example": "https://licensing.directadmin.com/?proof=kRLY1fpDL8yOcSU0THypmf43HZ4rjgIW0g0CGqZiynpBO6Bzm9QeBhbWXj4D8hj3Nr0Uuo7gwHqZk8ZYZrDOlvtojCettRJ5vzBUi5qJ3RE"
        },
        "proof": {
          "type": "string",
          "example": "kRLY1fpDL8yOcSU0THypmf43HZ4rjgIW0g0CGqZiynpBO6Bzm9QeBhbWXj4D8hj3Nr0Uuo7gwHqZk8ZYZrDOlvtojCettRJ5vzBUi5qJ3RE"
        }
      }
    },
    "web.licenseResponse": {
      "type": "object",
      "required": [
        "expires",
        "lid",
        "limits",
        "name",
        "pid",
        "type",
        "uid",
        "usage"
      ],
      "properties": {
        "expires": {
          "description": "Time when license will become expired if not renewed.",
          "type": "string",
          "format": "date-time"
        },
        "lid": {
          "description": "License ID.",
          "type": "integer",
          "example": 1234
        },
        "limits": {
          "description": "License usage limits and other restrictions.",
          "$ref": "#/definitions/web.licenseLimitsResponse"
        },
        "name": {
          "description": "License name assigned in the clients area.",
          "type": "string",
          "example": "A license name"
        },
        "pid": {
          "description": "Product (license type) ID.",
          "type": "integer",
          "example": 5678
        },
        "type": {
          "description": "Textual description of product (license type).",
          "type": "string",
          "example": "Standard - $29/month"
        },
        "uid": {
          "description": "User (license owner) ID.",
          "type": "integer",
          "example": 9012
        },
        "usage": {
          "description": "Actual resource usage on the server.",
          "$ref": "#/definitions/web.usageResponse"
        }
      }
    },
    "web.licenseUpdateRequest": {
      "type": "object",
      "required": [
        "key"
      ],
      "properties": {
        "force": {
          "description": "If true, license key is not verified whether it's valid.",
          "type": "boolean",
          "example": false
        },
        "key": {
          "type": "string",
          "example": "D0MVCCGQWOdNCwjLLS57WMPnFkoKfakxUNTaNQK6byw="
        }
      }
    },
    "web.localLocation": {
      "type": "object",
      "required": [
        "account",
        "domain",
        "password",
        "sso"
      ],
      "properties": {
        "account": {
          "type": "string"
        },
        "domain": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "sso": {
          "type": "boolean"
        }
      }
    },
    "web.loginInfo": {
      "type": "object",
      "required": [
        "OTPTrustDays",
        "allowPasswordReset",
        "hostname",
        "languages",
        "license",
        "time"
      ],
      "properties": {
        "OTPTrustDays": {
          "type": "integer",
          "example": 30
        },
        "allowPasswordReset": {
          "type": "boolean",
          "example": false
        },
        "hostname": {
          "type": "string",
          "example": "server.example.net"
        },
        "languages": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "example": [
            "en",
            "nl"
          ]
        },
        "license": {
          "$ref": "#/definitions/web.loginLicenseInfo"
        },
        "time": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "web.loginKeyCommand": {
      "type": "object",
      "required": [
        "available",
        "command",
        "role"
      ],
      "properties": {
        "available": {
          "description": "False if command is not available for current user",
          "type": "boolean",
          "example": false
        },
        "command": {
          "type": "string",
          "example": "system-info"
        },
        "role": {
          "description": "Minimum role required to access the command",
          "type": "string",
          "enum": [
            "admin",
            "reseller",
            "user"
          ],
          "example": "admin"
        }
      }
    },
    "web.loginKeyCommandsResponse": {
      "type": "object",
      "required": [
        "commands",
        "extended"
      ],
      "properties": {
        "commands": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "extended": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/web.loginKeyCommand"
          }
        }
      }
    },
    "web.loginKeyCreateRequest": {
      "type": "object",
      "required": [
        "allowCommands",
        "allowLogin",
        "allowNetworks",
        "autoRemove",
        "currentPassword",
        "denyCommands",
        "hasExpiry",
        "id",
        "password"
      ],
      "properties": {
        "allowCommands": {
          "description": "No restrictions if empty array.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "example": [
            "CMD_REDIS",
            "tickets",
            "wordpress"
          ]
        },
        "allowLogin": {
          "type": "boolean",
          "example": false
        },
        "allowNetworks": {
          "description": "No restrictions if empty array.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "example": [
            "10.11.12.13/32",
            "234.234.234.192/26",
            "2001:db8:dead:cafe::/96"
          ]
        },
        "autoRemove": {
          "type": "boolean",
          "example": true
        },
        "currentPassword": {
          "description": "Only for session requests.",
          "type": "string"
        },
        "denyCommands": {
          "description": "No restrictions if empty array.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "example": [
            "system-info",
            "terminal"
          ]
        },
        "expires": {
          "description": "Ignored if HasExpiry is false.",
          "type": "string",
          "format": "date-time",
          "example": "2022-12-12T00:00:00Z"
        },
        "hasExpiry": {
          "type": "boolean",
          "example": true
        },
        "id": {
          "type": "string",
          "example": "my-key"
        },
        "password": {
          "description": "Login key password.",
          "type": "string",
          "maxLength": 256,
          "minLength": 3,
          "example": "super-secure-passwd"
        }
      }
    },
    "web.loginKeyHistoryEntry": {
      "type": "object",
      "required": [
        "command",
        "ip",
        "result",
        "time"
      ],
      "properties": {
        "command": {
          "type": "string",
          "example": "/CMD_LOGIN_KEYS"
        },
        "ip": {
          "type": "string",
          "example": "127.0.0.1"
        },
        "result": {
          "type": "string",
          "example": "Valid Login"
        },
        "time": {
          "type": "string",
          "format": "date-time",
          "example": "2023-01-01T00:00:00Z"
        }
      }
    },
    "web.loginKeyResponse": {
      "type": "object",
      "required": [
        "allowCommands",
        "allowLogin",
        "allowNetworks",
        "autoRemove",
        "created",
        "createdBy",
        "denyCommands",
        "hasExpiry",
        "id",
        "readOnly"
      ],
      "properties": {
        "allowCommands": {
          "description": "No restrictions if empty array.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "example": [
            "CMD_REDIS",
            "tickets",
            "wordpress"
          ]
        },
        "allowLogin": {
          "type": "boolean",
          "example": false
        },
        "allowNetworks": {
          "description": "No restrictions if empty array.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "example": [
            "10.11.12.13/32",
            "234.234.234.192/26",
            "2001:db8:dead:cafe::/96"
          ]
        },
        "autoRemove": {
          "type": "boolean",
          "example": true
        },
        "created": {
          "type": "string",
          "format": "date-time",
          "example": "2022-12-10T00:00:00Z"
        },
        "createdBy": {
          "type": "string",
          "example": "123.123.123.123"
        },
        "denyCommands": {
          "description": "No restrictions if empty array.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "example": [
            "system-info",
            "terminal"
          ]
        },
        "expires": {
          "description": "Present only if HasExpiry.",
          "type": "string",
          "format": "date-time",
          "example": "2022-12-12T00:00:00Z"
        },
        "hasExpiry": {
          "type": "boolean",
          "example": true
        },
        "id": {
          "type": "string",
          "example": "my-key"
        },
        "readOnly": {
          "description": "True for `rootauth` login key.",
          "type": "boolean",
          "example": false
        }
      }
    },
    "web.loginKeyUpdateRequest": {
      "type": "object",
      "required": [
        "currentPassword"
      ],
      "properties": {
        "allowCommands": {
          "description": "No restrictions if empty array.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "example": [
            "CMD_REDIS",
            "tickets",
            "wordpress"
          ]
        },
        "allowLogin": {
          "type": "boolean",
          "example": false
        },
        "allowNetworks": {
          "description": "No restrictions if empty array.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "example": [
            "10.11.12.13/32",
            "234.234.234.192/26",
            "2001:db8:dead:cafe::/96"
          ]
        },
        "autoRemove": {
          "type": "boolean",
          "example": true
        },
        "currentPassword": {
          "type": "string"
        },
        "denyCommands": {
          "description": "No restrictions if empty array.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "example": [
            "system-info",
            "terminal"
          ]
        },
        "expires": {
          "description": "Ignored if HasExpiry is false.",
          "type": "string",
          "format": "date-time",
          "example": "2022-12-12T00:00:00Z"
        },
        "hasExpiry": {
          "type": "boolean",
          "example": true
        },
        "password": {
          "description": "Login key password.",
          "type": "string",
          "maxLength": 256,
          "minLength": 3,
          "example": "super-secure-passwd"
        }
      }
    },
    "web.loginLicenseInfo": {
      "type": "object",
      "required": [
        "active"
      ],
      "properties": {
        "active": {
          "description": "true if there are not licensing issues, false if server is non functional due to licensing failure",
          "type": "boolean"
        },
        "legacy": {
          "description": "true if server has legacy license and runs in legacy code-base",
          "type": "boolean"
        },
        "missing": {
          "description": "true if server does not have a license-key",
          "type": "boolean"
        },
        "reason": {
          "description": "mark-down formatted human readable licensing failure description, always present if active field is false",
          "type": "string",
          "example": "License usage is being rate-limited. This error happens if..."
        }
      }
    },
    "web.loginURLCreateRequest": {
      "type": "object",
      "required": [
        "allowNetworks",
        "currentPassword"
      ],
      "properties": {
        "allowNetworks": {
          "description": "No restrictions if empty array.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "example": [
            "10.11.12.13/32",
            "234.234.234.192/26",
            "2001:db8:dead:cafe::/96"
          ]
        },
        "currentPassword": {
          "description": "Only for session requests.",
          "type": "string"
        },
        "expires": {
          "description": "Defaults to `login_hash_expiry_minutes`.",
          "type": "string",
          "format": "date-time",
          "example": "2022-12-12T00:00:00Z"
        },
        "redirectURL": {
          "type": "string",
          "example": "/admin/settings/admin"
        }
      }
    },
    "web.loginURLCreateResponse": {
      "type": "object",
      "required": [
        "allowNetworks",
        "created",
        "createdBy",
        "expires",
        "id",
        "url"
      ],
      "properties": {
        "allowNetworks": {
          "description": "No restrictions if empty array.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "example": [
            "10.11.12.13/32",
            "234.234.234.192/26",
            "2001:db8:dead:cafe::/96"
          ]
        },
        "created": {
          "type": "string",
          "format": "date-time",
          "example": "2022-12-10T00:00:00Z"
        },
        "createdBy": {
          "type": "string",
          "example": "ssh:root,123.123.123.123"
        },
        "expires": {
          "type": "string",
          "format": "date-time",
          "example": "2022-12-12T00:00:00Z"
        },
        "id": {
          "type": "string",
          "example": "HASHURLX4P7VZEOGQE75ZMJDWVNARAAZY"
        },
        "redirectURL": {
          "type": "string",
          "example": "/admin/settings/admin"
        },
        "url": {
          "type": "string",
          "example": "https://test.directadmin.dev:2222/api/login/url?key=JZX7CCWZD7QRJILTDOQCJLGFCL5BGEMLPYQSILM63XSFY4S2UBEJNG65KQX2MAILFSDCWQJ6YNW3FJDPUJ7XK5LZOUL2BS3N2MQQ76EEQMLMQEUQ3ZRY72IU"
        }
      }
    },
    "web.loginURLResponse": {
      "type": "object",
      "required": [
        "allowNetworks",
        "created",
        "createdBy",
        "expires",
        "id"
      ],
      "properties": {
        "allowNetworks": {
          "description": "No restrictions if empty array.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "example": [
            "10.11.12.13/32",
            "234.234.234.192/26",
            "2001:db8:dead:cafe::/96"
          ]
        },
        "created": {
          "type": "string",
          "format": "date-time",
          "example": "2022-12-10T00:00:00Z"
        },
        "createdBy": {
          "type": "string",
          "example": "ssh:root,123.123.123.123"
        },
        "expires": {
          "type": "string",
          "format": "date-time",
          "example": "2022-12-12T00:00:00Z"
        },
        "id": {
          "type": "string",
          "example": "HASHURLX4P7VZEOGQE75ZMJDWVNARAAZY"
        },
        "redirectURL": {
          "type": "string",
          "example": "/admin/settings/admin"
        }
      }
    },
    "web.maintenanceTask": {
      "type": "object",
      "required": [
        "description",
        "name",
        "severity",
        "title"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "severity": {
          "type": "string",
          "enum": [
            "low",
            "medium",
            "high"
          ]
        },
        "title": {
          "type": "string"
        }
      }
    },
    "web.message": {
      "type": "object",
      "required": [
        "from",
        "fromName",
        "id",
        "legacyID",
        "message",
        "subject",
        "timestamp"
      ],
      "properties": {
        "from": {
          "type": "string",
          "example": "1wfaith"
        },
        "fromName": {
          "type": "string",
          "example": "1w/Faith"
        },
        "id": {
          "type": "integer",
          "example": 47
        },
        "legacyID": {
          "type": "string",
          "example": "000000047"
        },
        "message": {
          "type": "string",
          "example": "I do not understand why the Designer chose to put such flaws into the world, that it appears almost as if it were damaged. But I must believe that there is a purpose here I cannot see."
        },
        "subject": {
          "type": "string",
          "example": "Designer flaws"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time"
        },
        "unread": {
          "type": "boolean",
          "example": true
        }
      }
    },
    "web.phpmyadminSSOResponse": {
      "type": "object",
      "required": [
        "url"
      ],
      "properties": {
        "url": {
          "type": "string"
        }
      }
    },
    "web.redisStatusResponse": {
      "type": "object",
      "required": [
        "active",
        "version"
      ],
      "properties": {
        "active": {
          "type": "boolean"
        },
        "version": {
          "type": "string"
        }
      }
    },
    "web.remoteLocation": {
      "type": "object",
      "required": [
        "password",
        "server",
        "username"
      ],
      "properties": {
        "password": {
          "type": "string"
        },
        "server": {
          "type": "string"
        },
        "username": {
          "type": "string"
        }
      }
    },
    "web.resellerConfig": {
      "type": "object",
      "required": [
        "aftp",
        "autorespondersLimit",
        "bandwidthLimit",
        "catchAll",
        "cgi",
        "clamav",
        "cron",
        "dnsControl",
        "domainPointersLimit",
        "domainsLimit",
        "emailAccountsLimit",
        "emailForwardersLimit",
        "ftpAccountsLimit",
        "git",
        "inodeLimit",
        "loginKeys",
        "mailingListsLimit",
        "mysqlDatabasesLimit",
        "nginxUnit",
        "php",
        "quotaLimit",
        "redis",
        "spam",
        "ssl",
        "subdomainsLimit",
        "sysInfo",
        "userSsh",
        "usersLimit",
        "wordpress"
      ],
      "properties": {
        "aftp": {
          "type": "boolean"
        },
        "autorespondersLimit": {
          "type": "integer"
        },
        "bandwidthLimit": {
          "type": "number"
        },
        "catchAll": {
          "type": "boolean"
        },
        "cgi": {
          "type": "boolean"
        },
        "clamav": {
          "type": "boolean"
        },
        "cpuQuota": {
          "type": "string"
        },
        "cron": {
          "type": "boolean"
        },
        "dnsControl": {
          "type": "boolean"
        },
        "domainPointersLimit": {
          "type": "integer"
        },
        "domainsLimit": {
          "type": "integer"
        },
        "emailAccountsLimit": {
          "type": "integer"
        },
        "emailForwardersLimit": {
          "type": "integer"
        },
        "ftpAccountsLimit": {
          "type": "integer"
        },
        "git": {
          "type": "boolean"
        },
        "inodeLimit": {
          "type": "integer"
        },
        "ioReadBandwidthMax": {
          "type": "string"
        },
        "ioReadIOPSMax": {
          "type": "string"
        },
        "ioWriteBandwidthMax": {
          "type": "string"
        },
        "ioWriteIOPSMax": {
          "type": "string"
        },
        "loginKeys": {
          "type": "boolean"
        },
        "mailingListsLimit": {
          "type": "integer"
        },
        "memoryHigh": {
          "type": "string"
        },
        "memoryMax": {
          "type": "string"
        },
        "mysqlDatabasesLimit": {
          "type": "integer"
        },
        "nginxUnit": {
          "type": "boolean"
        },
        "php": {
          "type": "boolean"
        },
        "quotaLimit": {
          "type": "number"
        },
        "redis": {
          "type": "boolean"
        },
        "spam": {
          "type": "boolean"
        },
        "ssl": {
          "type": "boolean"
        },
        "subdomainsLimit": {
          "type": "integer"
        },
        "sysInfo": {
          "type": "boolean"
        },
        "tasksMax": {
          "type": "string"
        },
        "userSsh": {
          "type": "boolean"
        },
        "usersLimit": {
          "type": "integer"
        },
        "wordpress": {
          "type": "boolean"
        }
      }
    },
    "web.resellerToUserRequest": {
      "type": "object",
      "required": [
        "account",
        "creator"
      ],
      "properties": {
        "account": {
          "type": "string"
        },
        "creator": {
          "type": "string"
        }
      }
    },
    "web.resellerUsage": {
      "type": "object",
      "required": [
        "autoresponders",
        "bandwidthBytes",
        "bandwidthDeletedUserBytes",
        "dbQuotaBytes",
        "domainPointers",
        "domains",
        "emailAccounts",
        "emailDeliveries",
        "emailDeliveriesIncoming",
        "emailDeliveriesOutgoing",
        "emailForwarders",
        "emailQuotaBytes",
        "ftpAccounts",
        "inode",
        "mailingLists",
        "mySqlDatabases",
        "otherQuotaBytes",
        "quotaBytes",
        "subdomains",
        "users"
      ],
      "properties": {
        "autoresponders": {
          "$ref": "#/definitions/web.usageLimitAllocation"
        },
        "bandwidthBytes": {
          "$ref": "#/definitions/web.usageLimitAllocation"
        },
        "bandwidthDeletedUserBytes": {
          "type": "integer"
        },
        "dbQuotaBytes": {
          "type": "integer"
        },
        "domainPointers": {
          "$ref": "#/definitions/web.usageLimitAllocation"
        },
        "domains": {
          "$ref": "#/definitions/web.usageLimitAllocation"
        },
        "emailAccounts": {
          "$ref": "#/definitions/web.usageLimitAllocation"
        },
        "emailDeliveries": {
          "type": "integer"
        },
        "emailDeliveriesIncoming": {
          "type": "integer"
        },
        "emailDeliveriesOutgoing": {
          "type": "integer"
        },
        "emailForwarders": {
          "$ref": "#/definitions/web.usageLimitAllocation"
        },
        "emailQuotaBytes": {
          "type": "integer"
        },
        "ftpAccounts": {
          "$ref": "#/definitions/web.usageLimitAllocation"
        },
        "inode": {
          "$ref": "#/definitions/web.usageLimitAllocation"
        },
        "mailingLists": {
          "$ref": "#/definitions/web.usageLimitAllocation"
        },
        "mySqlDatabases": {
          "$ref": "#/definitions/web.usageLimitAllocation"
        },
        "otherQuotaBytes": {
          "type": "integer"
        },
        "quotaBytes": {
          "$ref": "#/definitions/web.usageLimitAllocation"
        },
        "subdomains": {
          "$ref": "#/definitions/web.usageLimitAllocation"
        },
        "users": {
          "$ref": "#/definitions/web.usageLimitAllocation"
        }
      }
    },
    "web.ruleData": {
      "type": "object",
      "required": [
        "id",
        "message"
      ],
      "properties": {
        "id": {
          "type": "string"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "web.searchResult": {
      "type": "object",
      "required": [
        "matchedDomains",
        "user"
      ],
      "properties": {
        "matchedDomains": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "user": {
          "type": "string"
        }
      }
    },
    "web.securityTxtStatus": {
      "type": "object",
      "required": [
        "autoSecurityTXT",
        "contacts",
        "domain",
        "message",
        "networkError",
        "user",
        "valid"
      ],
      "properties": {
        "autoSecurityTXT": {
          "type": "boolean"
        },
        "contacts": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "domain": {
          "type": "string"
        },
        "message": {
          "type": "string"
        },
        "networkError": {
          "type": "boolean"
        },
        "user": {
          "type": "string"
        },
        "valid": {
          "type": "boolean"
        }
      }
    },
    "web.serverTLSCertificate": {
      "type": "object",
      "required": [
        "certificate",
        "chainCertificates"
      ],
      "properties": {
        "certificate": {
          "$ref": "#/definitions/web.x509Certificate"
        },
        "chainCertificates": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/web.x509CertificateSimple"
          }
        }
      }
    },
    "web.serverTLSFiles": {
      "type": "object",
      "required": [
        "certificate",
        "key"
      ],
      "properties": {
        "certificate": {
          "type": "string"
        },
        "key": {
          "type": "string"
        }
      }
    },
    "web.serverTLSStatus": {
      "type": "object",
      "required": [
        "acmeEnabled",
        "certFileValid",
        "enabled",
        "keyFileValid",
        "validationError"
      ],
      "properties": {
        "acmeEnabled": {
          "description": "true when automatic server certificate renewal is enabled",
          "type": "boolean"
        },
        "certFileValid": {
          "description": "true if certificate file is present and contains one or more certificates",
          "type": "boolean"
        },
        "enabled": {
          "description": "true when DirectAdmin GUI uses TLS",
          "type": "boolean"
        },
        "keyFileValid": {
          "description": "true if private key file is present, contains a private key and private key matches the public key in the certificate",
          "type": "boolean"
        },
        "validationError": {
          "description": "empty if certificate should be trusted by clients or has a message explaining the problem",
          "type": "string"
        }
      }
    },
    "web.sessionCBOptions": {
      "type": "object",
      "required": [
        "modSecurity"
      ],
      "properties": {
        "modSecurity": {
          "type": "boolean"
        }
      }
    },
    "web.sessionConfigFeatures": {
      "type": "object",
      "required": [
        "auth2FA",
        "bruteforceLogScanner",
        "cgroup",
        "clamav",
        "composer",
        "dnssec",
        "git",
        "imapsync",
        "inode",
        "ipv6",
        "jail",
        "mxWithoutDNSControl",
        "netdataSock",
        "nginx",
        "nginxProxy",
        "nginxTemplates",
        "oneClickPMALogin",
        "phpmyadmin",
        "redis",
        "resellerCustomizeSkinConfigJson",
        "roundcube",
        "rspamdSock",
        "squirrelMail",
        "unit",
        "webmail",
        "wordpress"
      ],
      "properties": {
        "auth2FA": {
          "type": "boolean"
        },
        "bruteforceLogScanner": {
          "type": "boolean"
        },
        "cgroup": {
          "type": "boolean"
        },
        "clamav": {
          "type": "boolean"
        },
        "composer": {
          "type": "boolean"
        },
        "dnssec": {
          "type": "integer"
        },
        "git": {
          "type": "boolean"
        },
        "imapsync": {
          "type": "boolean"
        },
        "inode": {
          "type": "boolean"
        },
        "ipv6": {
          "type": "boolean"
        },
        "jail": {
          "type": "integer"
        },
        "mxWithoutDNSControl": {
          "type": "boolean"
        },
        "netdataSock": {
          "type": "boolean"
        },
        "nginx": {
          "type": "boolean"
        },
        "nginxProxy": {
          "type": "boolean"
        },
        "nginxTemplates": {
          "type": "boolean"
        },
        "oneClickPMALogin": {
          "type": "boolean"
        },
        "phpmyadmin": {
          "type": "boolean"
        },
        "redis": {
          "type": "boolean"
        },
        "resellerCustomizeSkinConfigJson": {
          "type": "boolean"
        },
        "roundcube": {
          "type": "boolean"
        },
        "rspamdSock": {
          "type": "boolean"
        },
        "squirrelMail": {
          "type": "boolean"
        },
        "unit": {
          "type": "boolean"
        },
        "webmail": {
          "type": "boolean"
        },
        "wordpress": {
          "type": "boolean"
        }
      }
    },
    "web.sessionCustomDomainItem": {
      "type": "object",
      "required": [
        "checked",
        "default",
        "description",
        "hidden",
        "label",
        "name",
        "options",
        "readOnly",
        "type"
      ],
      "properties": {
        "checked": {
          "description": "Default value for checkbox type elements",
          "type": "boolean"
        },
        "default": {
          "description": "Default value for the form element",
          "type": "string"
        },
        "description": {
          "description": "Detailed description of form element",
          "type": "string"
        },
        "hidden": {
          "description": "If true should not be shown in GUI",
          "type": "boolean"
        },
        "label": {
          "description": "Text shown in UI right before the form element",
          "type": "string"
        },
        "name": {
          "description": "Form element name, sent to the backend on submit additional name=value parameter",
          "type": "string"
        },
        "options": {
          "description": "List of options for listbox type element",
          "type": "array",
          "items": {
            "$ref": "#/definitions/web.sessionCustomDomainOption"
          }
        },
        "readOnly": {
          "description": "If true should be visible but not editable in GUI",
          "type": "boolean"
        },
        "type": {
          "description": "Type of form element, defines how form element should look like",
          "type": "string",
          "enum": [
            "checkbox",
            "text",
            "listbox"
          ]
        }
      }
    },
    "web.sessionCustomDomainOption": {
      "type": "object",
      "required": [
        "text",
        "value"
      ],
      "properties": {
        "text": {
          "description": "Text shown in the UI for this option",
          "type": "string"
        },
        "value": {
          "description": "Form element value when this option is selected",
          "type": "string"
        }
      }
    },
    "web.sessionDAConf": {
      "type": "object",
      "required": [
        "allowForwarderPipe",
        "ftpSeparator",
        "homeOverrides",
        "loginKeys",
        "maxFilesizeBytes",
        "passwordCheckDifficult",
        "passwordCheckMinLength",
        "resellerWarningBandwidthPercentage",
        "showPointersInList",
        "tableDefaultIPP",
        "userWarningBandwidthPercentage",
        "userWarningInodePercentage",
        "userWarningQuotaPercentage",
        "webappsSSL",
        "webmailHideLinks",
        "webmailLink"
      ],
      "properties": {
        "allowForwarderPipe": {
          "description": "Field `allow_forwarder_pipe` in `directadmin.conf`.",
          "type": "boolean",
          "example": true
        },
        "ftpSeparator": {
          "description": "Field `ftpsep` in `directadmin.conf`.",
          "type": "string",
          "example": "@"
        },
        "homeOverrides": {
          "description": "Field `home_override_list` in `directadmin.conf`.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "example": [
            "/home",
            "/home2"
          ]
        },
        "loginKeys": {
          "description": "Field `login_keys` in `directadmin.conf`.",
          "type": "boolean",
          "example": true
        },
        "maxFilesizeBytes": {
          "description": "Field `maxfilesize` in `directadmin.conf`.",
          "type": "integer",
          "example": 524288000
        },
        "passwordCheckDifficult": {
          "description": "If enabled, then user password must contain at least one symbol from three ranges [a-z], [A-Z], [0-9]. Field `enforce_difficult_passwords` in `directadmin.conf`.",
          "type": "boolean",
          "example": false
        },
        "passwordCheckMinLength": {
          "description": "Minimum number of symbols in user password. Field `difficult_password_length_min` in `directadmin.conf`.",
          "type": "integer",
          "example": 8
        },
        "resellerWarningBandwidthPercentage": {
          "description": "Field `reseller_warning_thresh` in `directadmin.conf`.",
          "type": "integer",
          "example": 75
        },
        "showPointersInList": {
          "description": "Field `show_pointers_in_list` in `directadmin.conf`.",
          "type": "integer",
          "example": 1
        },
        "tableDefaultIPP": {
          "description": "Default items per page. Field `table_default_ipp` in `directadmin.conf`.",
          "type": "integer",
          "example": 50
        },
        "userWarningBandwidthPercentage": {
          "description": "Field `user_warning_thresh` in `directadmin.conf`.",
          "type": "integer",
          "example": 80
        },
        "userWarningInodePercentage": {
          "description": "Field `user_warning_thresh_inode` in `directadmin.conf`.",
          "type": "integer",
          "example": 95
        },
        "userWarningQuotaPercentage": {
          "description": "Field `user_warning_thresh_disk` in `directadmin.conf`.",
          "type": "integer",
          "example": 95
        },
        "webappsSSL": {
          "description": "Field `webapps_ssl` in `directadmin.conf`.",
          "type": "boolean",
          "example": false
        },
        "webmailHideLinks": {
          "description": "Field `hide_webmail_links` in `directadmin.conf`.",
          "type": "boolean",
          "example": false
        },
        "webmailLink": {
          "description": "Field `webmail_link` in `directadmin.conf`.",
          "type": "string",
          "example": "squirrelmail"
        }
      }
    },
    "web.sessionInfo": {
      "type": "object",
      "required": [
        "allowedCommands",
        "configFeatures",
        "customDomainItems",
        "custombuildOptions",
        "demo",
        "directadminConfig",
        "effectiveRole",
        "effectiveUsername",
        "havePluginHooksAdmin",
        "havePluginHooksReseller",
        "havePluginHooksUser",
        "homeDir",
        "loginAsDNSControl",
        "phpmyadminPublic",
        "realUsername",
        "selectedDomain",
        "sessionID",
        "ticketsEnabled"
      ],
      "properties": {
        "allowedCommands": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "example": [
            "CMD_LICENSE",
            "CMD_EMAIL_LOG",
            "version",
            "license",
            "session"
          ]
        },
        "configFeatures": {
          "$ref": "#/definitions/web.sessionConfigFeatures"
        },
        "customDomainItems": {
          "description": "List of extra HTML form elements to be associated with domain config (when creating or updating).",
          "type": "array",
          "items": {
            "$ref": "#/definitions/web.sessionCustomDomainItem"
          }
        },
        "custombuildOptions": {
          "$ref": "#/definitions/web.sessionCBOptions"
        },
        "demo": {
          "type": "boolean",
          "example": true
        },
        "directadminConfig": {
          "$ref": "#/definitions/web.sessionDAConf"
        },
        "effectiveRole": {
          "description": "Minimum role required to access the command",
          "type": "string",
          "enum": [
            "user",
            "reseller",
            "admin"
          ]
        },
        "effectiveUsername": {
          "type": "string",
          "example": "gopher"
        },
        "havePluginHooksAdmin": {
          "type": "boolean",
          "example": true
        },
        "havePluginHooksReseller": {
          "type": "boolean",
          "example": true
        },
        "havePluginHooksUser": {
          "type": "boolean",
          "example": false
        },
        "homeDir": {
          "type": "string",
          "example": "/home/admin"
        },
        "loginAsDNSControl": {
          "type": "boolean"
        },
        "phpmyadminPublic": {
          "type": "boolean",
          "example": true
        },
        "realUsername": {
          "description": "Differs from effective username if an user with higher privileges (aka\nreal user) is logged in as effective user, otherwise is equal to\neffective user.",
          "type": "string",
          "example": "lemur-the-reseller"
        },
        "selectedDomain": {
          "description": "Can be empty, e. g., user has no domains.",
          "type": "string",
          "example": "example.com"
        },
        "sessionID": {
          "description": "Empty for Basic auth requests",
          "type": "string",
          "example": "MGYM2P3ATRQFXISR424ERVY4BFRRDSW4QEFGAYQ"
        },
        "ticketsEnabled": {
          "type": "boolean",
          "example": true
        }
      }
    },
    "web.sessionMetadata": {
      "type": "object",
      "required": [
        "created",
        "current",
        "expires",
        "host",
        "ip",
        "loggedInAs",
        "loginKey",
        "publicID",
        "valid"
      ],
      "properties": {
        "created": {
          "type": "string",
          "format": "date-time"
        },
        "current": {
          "type": "boolean"
        },
        "expires": {
          "type": "string",
          "format": "date-time"
        },
        "host": {
          "type": "string",
          "example": "directadmin.dev:2222"
        },
        "ip": {
          "type": "string",
          "example": "127.0.0.1"
        },
        "loggedInAs": {
          "type": "string",
          "example": "gopher"
        },
        "loginKey": {
          "type": "string"
        },
        "publicID": {
          "type": "string"
        },
        "valid": {
          "type": "boolean"
        }
      }
    },
    "web.sessionSelectDomainRequest": {
      "type": "object",
      "required": [
        "domain"
      ],
      "properties": {
        "domain": {
          "type": "string",
          "example": "example.com"
        }
      }
    },
    "web.skinCustomizationsFile": {
      "type": "object",
      "required": [
        "modTime",
        "name",
        "sizeBytes"
      ],
      "properties": {
        "modTime": {
          "type": "string",
          "format": "date-time"
        },
        "name": {
          "type": "string"
        },
        "sizeBytes": {
          "type": "integer"
        }
      }
    },
    "web.stateResponse": {
      "type": "object",
      "required": [
        "newMessages",
        "newTickets",
        "realUsername",
        "selectedDomain",
        "sessionID",
        "skinVersion"
      ],
      "properties": {
        "newMessages": {
          "type": "integer",
          "example": 123
        },
        "newTickets": {
          "type": "integer",
          "example": 4
        },
        "realUsername": {
          "type": "string",
          "example": "admin"
        },
        "selectedDomain": {
          "description": "Can be empty, e. g., user has no domains.",
          "type": "string",
          "example": "example.com"
        },
        "sessionID": {
          "description": "Empty for Basic auth requests",
          "type": "string",
          "example": "MGYM2P3ATRQFXISR424ERVY4BFRRDSW4QEFGAYQ"
        },
        "skinVersion": {
          "type": "string",
          "example": "develop-1474"
        }
      }
    },
    "web.systemInfoCPU": {
      "type": "object",
      "required": [
        "coresCount"
      ],
      "properties": {
        "cores": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/web.systemInfoCPUCore"
          }
        },
        "coresCount": {
          "type": "integer",
          "example": 4
        }
      }
    },
    "web.systemInfoCPUCore": {
      "type": "object",
      "required": [
        "bogoMIPS",
        "brand",
        "model"
      ],
      "properties": {
        "bogoMIPS": {
          "type": "number",
          "example": 6787.25
        },
        "brand": {
          "type": "string",
          "example": "ARM"
        },
        "clockMHz": {
          "type": "number",
          "example": 3393.626
        },
        "model": {
          "type": "string",
          "example": "Cortex-A72"
        }
      }
    },
    "web.systemInfoFS": {
      "type": "object",
      "required": [
        "availableBytes",
        "device",
        "fileSystem",
        "mountPoint",
        "reservedBytes",
        "totalBytes",
        "usedBytes"
      ],
      "properties": {
        "availableBytes": {
          "description": "Available bytes for unprivileged users.",
          "type": "integer",
          "example": 126919516160
        },
        "device": {
          "type": "string",
          "example": "/dev/sda1"
        },
        "fileSystem": {
          "type": "string",
          "example": "ext4"
        },
        "mountPoint": {
          "type": "string",
          "example": "/"
        },
        "reservedBytes": {
          "description": "Reserved bytes for privileged users.",
          "type": "integer",
          "example": 6590943232
        },
        "totalBytes": {
          "description": "Total bytes in file system.",
          "type": "integer",
          "example": 160980459520
        },
        "usedBytes": {
          "description": "Used bytes in file system.",
          "type": "integer",
          "example": 27470000128
        }
      }
    },
    "web.systemInfoLoad": {
      "type": "object",
      "required": [
        "last1",
        "last15",
        "last5"
      ],
      "properties": {
        "last1": {
          "type": "number",
          "example": 0.23
        },
        "last15": {
          "type": "number",
          "example": 0.25
        },
        "last5": {
          "type": "number",
          "example": 0.34
        }
      }
    },
    "web.systemInfoMemory": {
      "type": "object",
      "required": [
        "ram",
        "swap"
      ],
      "properties": {
        "ram": {
          "$ref": "#/definitions/web.systemInfoRAM"
        },
        "swap": {
          "$ref": "#/definitions/web.systemInfoSwap"
        }
      }
    },
    "web.systemInfoRAM": {
      "type": "object",
      "required": [
        "cachedBytes",
        "freeBytes",
        "totalBytes",
        "usedBytes"
      ],
      "properties": {
        "cachedBytes": {
          "description": "/proc/meminfo `MemAvailable-MemFree`",
          "type": "integer",
          "example": 3870838784
        },
        "freeBytes": {
          "description": "/proc/meminfo `MemFree`",
          "type": "integer",
          "example": 377368576
        },
        "totalBytes": {
          "description": "/proc/meminfo `MemTotal`",
          "type": "integer",
          "example": 8264384512
        },
        "usedBytes": {
          "description": "/proc/meminfo `MemTotal-MemAvailable`",
          "type": "integer",
          "example": 4016177152
        }
      }
    },
    "web.systemInfoService": {
      "type": "object",
      "required": [
        "inUse",
        "isRunning"
      ],
      "properties": {
        "inUse": {
          "description": "InUse reports whether service is selected to be used in `directadmin.conf`.",
          "type": "boolean",
          "example": true
        },
        "isRunning": {
          "type": "boolean",
          "example": true
        },
        "version": {
          "type": "string",
          "example": "1.14.2"
        }
      }
    },
    "web.systemInfoServices": {
      "type": "object",
      "required": [
        "directadmin",
        "dovecot",
        "exim",
        "httpd",
        "litespeed",
        "mysqld",
        "named",
        "nginx",
        "openlitespeed",
        "proftpd",
        "pure-ftpd",
        "sshd"
      ],
      "properties": {
        "directadmin": {
          "$ref": "#/definitions/web.systemInfoService"
        },
        "dovecot": {
          "$ref": "#/definitions/web.systemInfoService"
        },
        "exim": {
          "$ref": "#/definitions/web.systemInfoService"
        },
        "httpd": {
          "$ref": "#/definitions/web.systemInfoService"
        },
        "litespeed": {
          "$ref": "#/definitions/web.systemInfoService"
        },
        "mysqld": {
          "$ref": "#/definitions/web.systemInfoService"
        },
        "named": {
          "$ref": "#/definitions/web.systemInfoService"
        },
        "nginx": {
          "$ref": "#/definitions/web.systemInfoService"
        },
        "openlitespeed": {
          "$ref": "#/definitions/web.systemInfoService"
        },
        "proftpd": {
          "$ref": "#/definitions/web.systemInfoService"
        },
        "pure-ftpd": {
          "$ref": "#/definitions/web.systemInfoService"
        },
        "sshd": {
          "$ref": "#/definitions/web.systemInfoService"
        }
      }
    },
    "web.systemInfoSwap": {
      "type": "object",
      "required": [
        "freeBytes",
        "totalBytes",
        "usedBytes"
      ],
      "properties": {
        "freeBytes": {
          "description": "/proc/meminfo `SwapFree`",
          "type": "integer",
          "example": 441266176
        },
        "totalBytes": {
          "description": "/proc/meminfo `SwapTotal`",
          "type": "integer",
          "example": 1022357504
        },
        "usedBytes": {
          "description": "/proc/meminfo `SwapTotal-SwapFree`",
          "type": "integer",
          "example": 581091328
        }
      }
    },
    "web.systemInfoUptime": {
      "type": "object",
      "required": [
        "uptimeNano"
      ],
      "properties": {
        "uptimeNano": {
          "description": "In nanoseconds.",
          "type": "integer",
          "example": 0
        }
      }
    },
    "web.ticketReply": {
      "type": "object",
      "required": [
        "from",
        "fromName",
        "message",
        "subject",
        "timestamp",
        "to"
      ],
      "properties": {
        "from": {
          "type": "string",
          "example": "admin"
        },
        "fromName": {
          "type": "string",
          "example": "Admin"
        },
        "message": {
          "type": "string",
          "example": "I tried to warn you."
        },
        "subject": {
          "type": "string",
          "example": "Reaching the Summit"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time"
        },
        "to": {
          "type": "string",
          "example": "madeline"
        }
      }
    },
    "web.ticketResponse": {
      "type": "object",
      "required": [
        "from",
        "fromName",
        "id",
        "legacyID",
        "message",
        "open",
        "priority",
        "replies",
        "subject",
        "timestamp"
      ],
      "properties": {
        "from": {
          "type": "string",
          "example": "cavejohnson"
        },
        "fromName": {
          "type": "string",
          "example": "Cave Johnson"
        },
        "id": {
          "type": "integer",
          "example": 1982
        },
        "legacyID": {
          "type": "string",
          "example": "000001982"
        },
        "message": {
          "type": "string",
          "example": "All right, I've been thinking. When life gives you lemons? Don't make lemonade. Make life take the lemons back! Get mad! 'I don't want your damn lemons! What am I supposed to do with these?"
        },
        "open": {
          "type": "boolean",
          "example": true
        },
        "priority": {
          "type": "integer",
          "enum": [
            10,
            20,
            30
          ],
          "example": 30
        },
        "replies": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/web.ticketReply"
          }
        },
        "subject": {
          "type": "string",
          "example": "Lemons"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time"
        },
        "unread": {
          "type": "boolean",
          "example": true
        }
      }
    },
    "web.updateResponse": {
      "type": "object",
      "required": [
        "available",
        "availableChannels",
        "channel"
      ],
      "properties": {
        "available": {
          "type": "boolean",
          "example": true
        },
        "availableChannels": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "current",
              "stable",
              "beta",
              "alpha"
            ],
            "example": "alpha"
          },
          "example": [
            "current",
            "stable",
            "beta",
            "alpha"
          ]
        },
        "channel": {
          "type": "string",
          "enum": [
            "current",
            "stable",
            "beta",
            "alpha"
          ],
          "example": "current"
        },
        "commit": {
          "type": "string",
          "example": "3fbf36cb8450996e2e199434b55d4900c8b48454"
        },
        "version": {
          "type": "string",
          "example": "1.628"
        }
      }
    },
    "web.usageLimitAllocation": {
      "type": "object",
      "required": [
        "allocation",
        "limit",
        "usage"
      ],
      "properties": {
        "allocation": {
          "type": "integer",
          "example": 9993456
        },
        "limit": {
          "type": "integer",
          "example": -1
        },
        "unlimited": {
          "type": "boolean",
          "example": true
        },
        "usage": {
          "type": "integer",
          "example": 265265
        }
      }
    },
    "web.usageResponse": {
      "type": "object",
      "required": [
        "adminsOrResellers",
        "domains",
        "users"
      ],
      "properties": {
        "adminsOrResellers": {
          "type": "integer",
          "example": 1
        },
        "domains": {
          "type": "integer",
          "example": 3
        },
        "users": {
          "type": "integer",
          "example": 2
        }
      }
    },
    "web.userConfig": {
      "type": "object",
      "required": [
        "account",
        "aftp",
        "apiAllowPassword",
        "autorespondersLim",
        "bandwidthLim",
        "catchAll",
        "cgi",
        "clamav",
        "creator",
        "cron",
        "dateCreated",
        "dnsControl",
        "domain",
        "domainPointersLim",
        "domains",
        "domainsLim",
        "email",
        "emailAccountsLim",
        "emailForwardersLim",
        "featureSets",
        "ftpAccountsLim",
        "git",
        "inodeLim",
        "ip",
        "jail",
        "language",
        "letsEncrypt",
        "loginKeys",
        "mailPartition",
        "mailingListsLim",
        "mySqlConf",
        "mySqlDatabasesLim",
        "name",
        "nginxUnit",
        "ns1",
        "ns2",
        "package",
        "php",
        "pluginsBlacklist",
        "pluginsWhitelist",
        "quotaLim",
        "redis",
        "skin",
        "spam",
        "ssh",
        "ssl",
        "subdomainsLim",
        "suspended",
        "sysInfo",
        "twoStepAuth",
        "twoStepAuthDesc",
        "userType",
        "username",
        "users",
        "usersLim",
        "usersManageDomains",
        "wordpress",
        "zoom"
      ],
      "properties": {
        "account": {
          "type": "boolean"
        },
        "aftp": {
          "type": "boolean"
        },
        "apiAllowPassword": {
          "type": "boolean"
        },
        "autorespondersLim": {
          "type": "integer"
        },
        "bandwidthLim": {
          "type": "number"
        },
        "catchAll": {
          "type": "boolean"
        },
        "cgi": {
          "type": "boolean"
        },
        "clamav": {
          "type": "boolean"
        },
        "cpuQuota": {
          "type": "string"
        },
        "creator": {
          "type": "string"
        },
        "cron": {
          "type": "boolean"
        },
        "dateCreated": {
          "description": "FIXME: would be nice to have time.Time",
          "type": "string"
        },
        "dnsControl": {
          "type": "boolean"
        },
        "domain": {
          "type": "string"
        },
        "domainPointersLim": {
          "type": "integer"
        },
        "domains": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "domainsLim": {
          "type": "integer"
        },
        "email": {
          "type": "string"
        },
        "emailAccountsLim": {
          "description": "POP Email Accounts",
          "type": "integer"
        },
        "emailForwardersLim": {
          "type": "integer"
        },
        "featureSets": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "ftpAccountsLim": {
          "type": "integer"
        },
        "git": {
          "type": "boolean"
        },
        "inodeLim": {
          "type": "integer"
        },
        "ioReadBandwidthMax": {
          "type": "string"
        },
        "ioReadIOPSMax": {
          "type": "string"
        },
        "ioWriteBandwidthMax": {
          "type": "string"
        },
        "ioWriteIOPSMax": {
          "type": "string"
        },
        "ip": {
          "type": "string"
        },
        "jail": {
          "type": "boolean"
        },
        "language": {
          "type": "string"
        },
        "letsEncrypt": {
          "type": "integer"
        },
        "loginKeys": {
          "type": "boolean"
        },
        "mailPartition": {
          "type": "string"
        },
        "mailingListsLim": {
          "type": "integer"
        },
        "memoryHigh": {
          "type": "string"
        },
        "memoryMax": {
          "type": "string"
        },
        "mySqlConf": {
          "type": "string"
        },
        "mySqlDatabasesLim": {
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "nginxUnit": {
          "type": "boolean"
        },
        "ns1": {
          "type": "string"
        },
        "ns2": {
          "type": "string"
        },
        "package": {
          "type": "string"
        },
        "php": {
          "type": "boolean"
        },
        "pluginsBlacklist": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "pluginsWhitelist": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "quotaLim": {
          "type": "number"
        },
        "redis": {
          "type": "boolean"
        },
        "skin": {
          "type": "string"
        },
        "spam": {
          "type": "boolean"
        },
        "ssh": {
          "type": "boolean"
        },
        "ssl": {
          "type": "boolean"
        },
        "subdomainsLim": {
          "type": "integer"
        },
        "suspended": {
          "type": "boolean"
        },
        "sysInfo": {
          "type": "boolean"
        },
        "tasksMax": {
          "type": "string"
        },
        "twoStepAuth": {
          "type": "boolean"
        },
        "twoStepAuthDesc": {
          "type": "string"
        },
        "userType": {
          "description": "Minimum role required to access the command",
          "type": "string"
        },
        "username": {
          "type": "string"
        },
        "users": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "usersLim": {
          "type": "integer"
        },
        "usersManageDomains": {
          "type": "integer"
        },
        "wordpress": {
          "type": "boolean"
        },
        "zoom": {
          "type": "integer"
        }
      }
    },
    "web.userLimit": {
      "type": "object",
      "required": [
        "limit",
        "usage"
      ],
      "properties": {
        "limit": {
          "type": "integer",
          "example": -1
        },
        "unlimited": {
          "type": "boolean",
          "example": true
        },
        "usage": {
          "type": "integer",
          "example": 265265
        }
      }
    },
    "web.userLoginHistory": {
      "type": "object",
      "required": [
        "attempts",
        "host",
        "timestamp"
      ],
      "properties": {
        "attempts": {
          "type": "integer",
          "example": 1
        },
        "host": {
          "type": "string",
          "example": "55.74.78.123"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "web.userToResellerRequest": {
      "type": "object",
      "required": [
        "account"
      ],
      "properties": {
        "account": {
          "type": "string"
        },
        "creator": {
          "description": "If empty default admin account will be used as creator",
          "type": "string"
        }
      }
    },
    "web.userUsage": {
      "type": "object",
      "required": [
        "autoresponders",
        "bandwidthBytes",
        "dbQuotaBytes",
        "domainPointers",
        "domains",
        "emailAccounts",
        "emailDeliveries",
        "emailDeliveriesIncoming",
        "emailDeliveriesOutgoing",
        "emailForwarders",
        "emailQuotaBytes",
        "ftpAccounts",
        "inode",
        "mailingLists",
        "mySqlDatabases",
        "otherQuotaBytes",
        "quotaBytes",
        "quotaWithoutSystemBytes",
        "subdomains"
      ],
      "properties": {
        "autoresponders": {
          "description": "With limit",
          "$ref": "#/definitions/web.userLimit"
        },
        "bandwidthBytes": {
          "$ref": "#/definitions/web.userLimit"
        },
        "dbQuotaBytes": {
          "description": "Without limit",
          "type": "integer"
        },
        "domainPointers": {
          "$ref": "#/definitions/web.userLimit"
        },
        "domains": {
          "$ref": "#/definitions/web.userLimit"
        },
        "emailAccounts": {
          "$ref": "#/definitions/web.userLimit"
        },
        "emailDeliveries": {
          "type": "integer"
        },
        "emailDeliveriesIncoming": {
          "type": "integer"
        },
        "emailDeliveriesOutgoing": {
          "type": "integer"
        },
        "emailForwarders": {
          "$ref": "#/definitions/web.userLimit"
        },
        "emailQuotaBytes": {
          "type": "integer"
        },
        "ftpAccounts": {
          "$ref": "#/definitions/web.userLimit"
        },
        "inode": {
          "$ref": "#/definitions/web.userLimit"
        },
        "mailingLists": {
          "$ref": "#/definitions/web.userLimit"
        },
        "mySqlDatabases": {
          "$ref": "#/definitions/web.userLimit"
        },
        "otherQuotaBytes": {
          "type": "integer"
        },
        "quotaBytes": {
          "$ref": "#/definitions/web.userLimit"
        },
        "quotaWithoutSystemBytes": {
          "type": "integer"
        },
        "subdomains": {
          "$ref": "#/definitions/web.userLimit"
        }
      }
    },
    "web.versionRequest": {
      "type": "object",
      "required": [
        "update"
      ],
      "properties": {
        "update": {
          "type": "object",
          "required": [
            "channel"
          ],
          "properties": {
            "channel": {
              "type": "string",
              "enum": [
                "current",
                "stable",
                "beta",
                "alpha"
              ],
              "example": "alpha"
            }
          }
        }
      }
    },
    "web.versionResponse": {
      "type": "object",
      "required": [
        "arch",
        "commit",
        "distro",
        "eol",
        "os",
        "update",
        "uptime",
        "version"
      ],
      "properties": {
        "arch": {
          "description": "Hardware architecture this build is compiled for",
          "type": "string",
          "example": "amd64"
        },
        "commit": {
          "description": "Software build ID",
          "type": "string",
          "example": "58366a005fe06947b8322bf8509030a78ebe0018"
        },
        "distro": {
          "description": "Detected Linux distribution",
          "type": "string",
          "example": "rhel9"
        },
        "eol": {
          "description": "True when Linux distribution is no longer supported and DA receives limited updates",
          "type": "boolean"
        },
        "os": {
          "description": "Operating system this build is targeted for",
          "type": "string",
          "example": "linux"
        },
        "update": {
          "description": "Latest version data",
          "$ref": "#/definitions/web.updateResponse"
        },
        "uptime": {
          "description": "Elapsed time in nanoseconds",
          "type": "integer",
          "example": 245000000000
        },
        "version": {
          "description": "Software version",
          "type": "string",
          "example": "1.626"
        }
      }
    },
    "web.wordpressConfig": {
      "type": "object",
      "required": [
        "dbHost",
        "dbName",
        "dbPass",
        "dbPrefix",
        "dbUser"
      ],
      "properties": {
        "dbHost": {
          "type": "string"
        },
        "dbName": {
          "type": "string"
        },
        "dbPass": {
          "type": "string"
        },
        "dbPrefix": {
          "type": "string"
        },
        "dbUser": {
          "type": "string"
        }
      }
    },
    "web.wordpressInstallQuickRequest": {
      "type": "object",
      "required": [
        "filePath",
        "title"
      ],
      "properties": {
        "adminEmail": {
          "type": "string"
        },
        "adminName": {
          "type": "string"
        },
        "adminPass": {
          "type": "string"
        },
        "filePath": {
          "type": "string"
        },
        "title": {
          "type": "string"
        }
      }
    },
    "web.wordpressInstallRequest": {
      "type": "object",
      "required": [
        "adminEmail",
        "adminName",
        "adminPass",
        "dbName",
        "dbPass",
        "dbPrefix",
        "dbUser",
        "filePath",
        "title"
      ],
      "properties": {
        "adminEmail": {
          "type": "string"
        },
        "adminName": {
          "type": "string"
        },
        "adminPass": {
          "type": "string"
        },
        "dbName": {
          "type": "string"
        },
        "dbPass": {
          "type": "string"
        },
        "dbPrefix": {
          "type": "string"
        },
        "dbUser": {
          "type": "string"
        },
        "filePath": {
          "type": "string"
        },
        "siteURL": {
          "type": "string"
        },
        "title": {
          "type": "string"
        }
      }
    },
    "web.wordpressInstallResponse": {
      "type": "object",
      "required": [
        "adminEmail",
        "adminName",
        "adminPass",
        "dbName",
        "filePath",
        "siteURL",
        "title"
      ],
      "properties": {
        "adminEmail": {
          "type": "string"
        },
        "adminName": {
          "type": "string"
        },
        "adminPass": {
          "type": "string"
        },
        "dbName": {
          "type": "string"
        },
        "filePath": {
          "type": "string"
        },
        "siteURL": {
          "type": "string"
        },
        "title": {
          "type": "string"
        }
      }
    },
    "web.wordpressInstallation": {
      "type": "object",
      "required": [
        "filePath",
        "host",
        "id",
        "webPath"
      ],
      "properties": {
        "filePath": {
          "description": "Installation location on file system relative to user home dir",
          "type": "string"
        },
        "host": {
          "description": "Server host name to reach DA installation",
          "type": "string"
        },
        "id": {
          "description": "Installation ID",
          "type": "string"
        },
        "webPath": {
          "description": "Installation location on URL, non empty only for wordpress installations in a sub-directory",
          "type": "string"
        },
        "wordpress": {
          "description": "Basic information about wordpress installation, empty if location does not have wordpress installed",
          "$ref": "#/definitions/web.wordpressInstance"
        }
      }
    },
    "web.wordpressInstance": {
      "type": "object",
      "required": [
        "autoUpdateMajor",
        "autoUpdateMinor",
        "error",
        "siteURL",
        "template",
        "title",
        "version"
      ],
      "properties": {
        "autoUpdateMajor": {
          "description": "WordPress minor auto update is enabled by option flags",
          "type": "boolean"
        },
        "autoUpdateMinor": {
          "description": "WordPress minor auto update is enabled by option flags",
          "type": "boolean"
        },
        "error": {
          "description": "Errors received from wp-cli tool if not empty",
          "type": "string"
        },
        "siteURL": {
          "description": "Site URL as configured in wordpress \"siteurl\" option",
          "type": "string"
        },
        "template": {
          "description": "Current template as configured in wordpress \"template\" option",
          "type": "string"
        },
        "title": {
          "description": "Site name as configured in wordpress \"blogname\" option",
          "type": "string"
        },
        "version": {
          "description": "WordPress version",
          "type": "string"
        }
      }
    },
    "web.wordpressSSO": {
      "type": "object",
      "required": [
        "url"
      ],
      "properties": {
        "url": {
          "type": "string"
        }
      }
    },
    "web.wordpressUpdateState": {
      "type": "object",
      "required": [
        "major",
        "minor"
      ],
      "properties": {
        "major": {
          "description": "WordPress minor auto update is enabled by option flags",
          "type": "boolean"
        },
        "minor": {
          "description": "WordPress minor auto update is enabled by option flags",
          "type": "boolean"
        }
      }
    },
    "web.wordpressUser": {
      "type": "object",
      "required": [
        "displayName",
        "email",
        "id",
        "login",
        "registered",
        "roles"
      ],
      "properties": {
        "displayName": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "id": {
          "type": "integer"
        },
        "login": {
          "type": "string"
        },
        "registered": {
          "type": "string",
          "format": "date-time"
        },
        "roles": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "web.wordpressUserPassword": {
      "type": "object",
      "required": [
        "password"
      ],
      "properties": {
        "password": {
          "type": "string"
        }
      }
    },
    "web.x509Certificate": {
      "type": "object",
      "required": [
        "dnsNames",
        "ipAddresses",
        "issuer",
        "notAfter",
        "notBefore",
        "prettyType",
        "serialNumber",
        "subject"
      ],
      "properties": {
        "dnsNames": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "ipAddresses": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "issuer": {
          "type": "string"
        },
        "notAfter": {
          "type": "string"
        },
        "notBefore": {
          "type": "string"
        },
        "prettyType": {
          "type": "string"
        },
        "serialNumber": {
          "type": "string"
        },
        "subject": {
          "type": "string"
        }
      }
    },
    "web.x509CertificateSimple": {
      "type": "object",
      "required": [
        "issuer",
        "serialNumber",
        "subject"
      ],
      "properties": {
        "issuer": {
          "type": "string"
        },
        "serialNumber": {
          "type": "string"
        },
        "subject": {
          "type": "string"
        }
      }
    }
  },
  "securityDefinitions": {
    "DaBasicAuth": {
      "type": "basic"
    }
  }
}
