<?php
/**
 * SessionsApi
 * PHP version 8.1
 *
 * @category Class
 * @package  COMPITAUT\DirectAdminAPI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Swagger DirectAdmin API
 *
 * Swagger API for DirectAdmin server
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@directadmin.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace COMPITAUT\DirectAdminAPI\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Psr\Http\Message\RequestInterface;
use Psr\Http\Message\ResponseInterface;
use COMPITAUT\DirectAdminAPI\ApiException;
use COMPITAUT\DirectAdminAPI\Configuration;
use COMPITAUT\DirectAdminAPI\FormDataProcessor;
use COMPITAUT\DirectAdminAPI\HeaderSelector;
use COMPITAUT\DirectAdminAPI\ObjectSerializer;

/**
 * SessionsApi Class Doc Comment
 *
 * @category Class
 * @package  COMPITAUT\DirectAdminAPI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class SessionsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'apiSessionGet' => [
            'application/json',
        ],
        'apiSessionResellerConfigGet' => [
            'application/json',
        ],
        'apiSessionStateGet' => [
            'application/json',
        ],
        'apiSessionSwitchActiveDomainPost' => [
            'application/json',
        ],
        'apiSessionUserConfigGet' => [
            'application/json',
        ],
        'apiSessionUserUsageGet' => [
            'application/json',
        ],
        'apiSessionsDestroyAllOtherPost' => [
            'application/json',
        ],
        'apiSessionsDestroyPublicIdPost' => [
            'application/json',
        ],
        'apiSessionsGet' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ?ClientInterface $client = null,
        ?Configuration $config = null,
        ?HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation apiSessionGet
     *
     * Get current session info
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiSessionGet'] to see the possible values for this operation
     *
     * @throws \COMPITAUT\DirectAdminAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \COMPITAUT\DirectAdminAPI\Model\WebSessionInfo|\COMPITAUT\DirectAdminAPI\Model\ApierrorBadRequest|\COMPITAUT\DirectAdminAPI\Model\ApierrorUnauthorized|\COMPITAUT\DirectAdminAPI\Model\ApierrorLicenseOverused|\COMPITAUT\DirectAdminAPI\Model\ApierrorAccessDenied|\COMPITAUT\DirectAdminAPI\Model\ApierrorInternalError
     */
    public function apiSessionGet(string $contentType = self::contentTypes['apiSessionGet'][0])
    {
        list($response) = $this->apiSessionGetWithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation apiSessionGetWithHttpInfo
     *
     * Get current session info
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiSessionGet'] to see the possible values for this operation
     *
     * @throws \COMPITAUT\DirectAdminAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \COMPITAUT\DirectAdminAPI\Model\WebSessionInfo|\COMPITAUT\DirectAdminAPI\Model\ApierrorBadRequest|\COMPITAUT\DirectAdminAPI\Model\ApierrorUnauthorized|\COMPITAUT\DirectAdminAPI\Model\ApierrorLicenseOverused|\COMPITAUT\DirectAdminAPI\Model\ApierrorAccessDenied|\COMPITAUT\DirectAdminAPI\Model\ApierrorInternalError, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiSessionGetWithHttpInfo(string $contentType = self::contentTypes['apiSessionGet'][0])
    {
        $request = $this->apiSessionGetRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\COMPITAUT\DirectAdminAPI\Model\WebSessionInfo',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorBadRequest',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorUnauthorized',
                        $request,
                        $response,
                    );
                case 402:
                    return $this->handleResponseWithDataType(
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorLicenseOverused',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorAccessDenied',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorInternalError',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\COMPITAUT\DirectAdminAPI\Model\WebSessionInfo',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\WebSessionInfo',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorBadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorUnauthorized',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 402:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorLicenseOverused',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorAccessDenied',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorInternalError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation apiSessionGetAsync
     *
     * Get current session info
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiSessionGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiSessionGetAsync(string $contentType = self::contentTypes['apiSessionGet'][0])
    {
        return $this->apiSessionGetAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiSessionGetAsyncWithHttpInfo
     *
     * Get current session info
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiSessionGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiSessionGetAsyncWithHttpInfo(string $contentType = self::contentTypes['apiSessionGet'][0])
    {
        $returnType = '\COMPITAUT\DirectAdminAPI\Model\WebSessionInfo';
        $request = $this->apiSessionGetRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiSessionGet'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiSessionGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiSessionGetRequest(string $contentType = self::contentTypes['apiSessionGet'][0])
    {


        $resourcePath = '/api/session';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiSessionResellerConfigGet
     *
     * Get reseller config
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiSessionResellerConfigGet'] to see the possible values for this operation
     *
     * @throws \COMPITAUT\DirectAdminAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \COMPITAUT\DirectAdminAPI\Model\WebResellerConfig|\COMPITAUT\DirectAdminAPI\Model\ApierrorBadRequest|\COMPITAUT\DirectAdminAPI\Model\ApierrorUnauthorized|\COMPITAUT\DirectAdminAPI\Model\ApierrorLicenseOverused|\COMPITAUT\DirectAdminAPI\Model\ApierrorAccessDenied|\COMPITAUT\DirectAdminAPI\Model\ApierrorNotFound|\COMPITAUT\DirectAdminAPI\Model\ApierrorInternalError
     */
    public function apiSessionResellerConfigGet(string $contentType = self::contentTypes['apiSessionResellerConfigGet'][0])
    {
        list($response) = $this->apiSessionResellerConfigGetWithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation apiSessionResellerConfigGetWithHttpInfo
     *
     * Get reseller config
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiSessionResellerConfigGet'] to see the possible values for this operation
     *
     * @throws \COMPITAUT\DirectAdminAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \COMPITAUT\DirectAdminAPI\Model\WebResellerConfig|\COMPITAUT\DirectAdminAPI\Model\ApierrorBadRequest|\COMPITAUT\DirectAdminAPI\Model\ApierrorUnauthorized|\COMPITAUT\DirectAdminAPI\Model\ApierrorLicenseOverused|\COMPITAUT\DirectAdminAPI\Model\ApierrorAccessDenied|\COMPITAUT\DirectAdminAPI\Model\ApierrorNotFound|\COMPITAUT\DirectAdminAPI\Model\ApierrorInternalError, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiSessionResellerConfigGetWithHttpInfo(string $contentType = self::contentTypes['apiSessionResellerConfigGet'][0])
    {
        $request = $this->apiSessionResellerConfigGetRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\COMPITAUT\DirectAdminAPI\Model\WebResellerConfig',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorBadRequest',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorUnauthorized',
                        $request,
                        $response,
                    );
                case 402:
                    return $this->handleResponseWithDataType(
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorLicenseOverused',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorAccessDenied',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorNotFound',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorInternalError',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\COMPITAUT\DirectAdminAPI\Model\WebResellerConfig',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\WebResellerConfig',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorBadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorUnauthorized',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 402:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorLicenseOverused',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorAccessDenied',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorNotFound',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorInternalError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation apiSessionResellerConfigGetAsync
     *
     * Get reseller config
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiSessionResellerConfigGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiSessionResellerConfigGetAsync(string $contentType = self::contentTypes['apiSessionResellerConfigGet'][0])
    {
        return $this->apiSessionResellerConfigGetAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiSessionResellerConfigGetAsyncWithHttpInfo
     *
     * Get reseller config
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiSessionResellerConfigGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiSessionResellerConfigGetAsyncWithHttpInfo(string $contentType = self::contentTypes['apiSessionResellerConfigGet'][0])
    {
        $returnType = '\COMPITAUT\DirectAdminAPI\Model\WebResellerConfig';
        $request = $this->apiSessionResellerConfigGetRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiSessionResellerConfigGet'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiSessionResellerConfigGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiSessionResellerConfigGetRequest(string $contentType = self::contentTypes['apiSessionResellerConfigGet'][0])
    {


        $resourcePath = '/api/session/reseller-config';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiSessionStateGet
     *
     * Get server state
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiSessionStateGet'] to see the possible values for this operation
     *
     * @throws \COMPITAUT\DirectAdminAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \COMPITAUT\DirectAdminAPI\Model\WebStateResponse|\COMPITAUT\DirectAdminAPI\Model\ApierrorBadRequest|\COMPITAUT\DirectAdminAPI\Model\ApierrorUnauthorized|\COMPITAUT\DirectAdminAPI\Model\ApierrorLicenseOverused|\COMPITAUT\DirectAdminAPI\Model\ApierrorAccessDenied|\COMPITAUT\DirectAdminAPI\Model\ApierrorInternalError
     */
    public function apiSessionStateGet(string $contentType = self::contentTypes['apiSessionStateGet'][0])
    {
        list($response) = $this->apiSessionStateGetWithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation apiSessionStateGetWithHttpInfo
     *
     * Get server state
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiSessionStateGet'] to see the possible values for this operation
     *
     * @throws \COMPITAUT\DirectAdminAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \COMPITAUT\DirectAdminAPI\Model\WebStateResponse|\COMPITAUT\DirectAdminAPI\Model\ApierrorBadRequest|\COMPITAUT\DirectAdminAPI\Model\ApierrorUnauthorized|\COMPITAUT\DirectAdminAPI\Model\ApierrorLicenseOverused|\COMPITAUT\DirectAdminAPI\Model\ApierrorAccessDenied|\COMPITAUT\DirectAdminAPI\Model\ApierrorInternalError, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiSessionStateGetWithHttpInfo(string $contentType = self::contentTypes['apiSessionStateGet'][0])
    {
        $request = $this->apiSessionStateGetRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\COMPITAUT\DirectAdminAPI\Model\WebStateResponse',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorBadRequest',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorUnauthorized',
                        $request,
                        $response,
                    );
                case 402:
                    return $this->handleResponseWithDataType(
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorLicenseOverused',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorAccessDenied',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorInternalError',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\COMPITAUT\DirectAdminAPI\Model\WebStateResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\WebStateResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorBadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorUnauthorized',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 402:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorLicenseOverused',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorAccessDenied',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorInternalError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation apiSessionStateGetAsync
     *
     * Get server state
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiSessionStateGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiSessionStateGetAsync(string $contentType = self::contentTypes['apiSessionStateGet'][0])
    {
        return $this->apiSessionStateGetAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiSessionStateGetAsyncWithHttpInfo
     *
     * Get server state
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiSessionStateGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiSessionStateGetAsyncWithHttpInfo(string $contentType = self::contentTypes['apiSessionStateGet'][0])
    {
        $returnType = '\COMPITAUT\DirectAdminAPI\Model\WebStateResponse';
        $request = $this->apiSessionStateGetRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiSessionStateGet'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiSessionStateGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiSessionStateGetRequest(string $contentType = self::contentTypes['apiSessionStateGet'][0])
    {


        $resourcePath = '/api/session/state';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiSessionSwitchActiveDomainPost
     *
     * Switch active domain for current session
     *
     * @param  \COMPITAUT\DirectAdminAPI\Model\WebSessionSelectDomainRequest $request Request data. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiSessionSwitchActiveDomainPost'] to see the possible values for this operation
     *
     * @throws \COMPITAUT\DirectAdminAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiSessionSwitchActiveDomainPost($request, string $contentType = self::contentTypes['apiSessionSwitchActiveDomainPost'][0])
    {
        $this->apiSessionSwitchActiveDomainPostWithHttpInfo($request, $contentType);
    }

    /**
     * Operation apiSessionSwitchActiveDomainPostWithHttpInfo
     *
     * Switch active domain for current session
     *
     * @param  \COMPITAUT\DirectAdminAPI\Model\WebSessionSelectDomainRequest $request Request data. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiSessionSwitchActiveDomainPost'] to see the possible values for this operation
     *
     * @throws \COMPITAUT\DirectAdminAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiSessionSwitchActiveDomainPostWithHttpInfo($request, string $contentType = self::contentTypes['apiSessionSwitchActiveDomainPost'][0])
    {
        $request = $this->apiSessionSwitchActiveDomainPostRequest($request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorBadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorUnauthorized',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 402:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorLicenseOverused',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorAccessDenied',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorNotFound',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorInternalError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation apiSessionSwitchActiveDomainPostAsync
     *
     * Switch active domain for current session
     *
     * @param  \COMPITAUT\DirectAdminAPI\Model\WebSessionSelectDomainRequest $request Request data. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiSessionSwitchActiveDomainPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiSessionSwitchActiveDomainPostAsync($request, string $contentType = self::contentTypes['apiSessionSwitchActiveDomainPost'][0])
    {
        return $this->apiSessionSwitchActiveDomainPostAsyncWithHttpInfo($request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiSessionSwitchActiveDomainPostAsyncWithHttpInfo
     *
     * Switch active domain for current session
     *
     * @param  \COMPITAUT\DirectAdminAPI\Model\WebSessionSelectDomainRequest $request Request data. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiSessionSwitchActiveDomainPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiSessionSwitchActiveDomainPostAsyncWithHttpInfo($request, string $contentType = self::contentTypes['apiSessionSwitchActiveDomainPost'][0])
    {
        $returnType = '';
        $request = $this->apiSessionSwitchActiveDomainPostRequest($request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiSessionSwitchActiveDomainPost'
     *
     * @param  \COMPITAUT\DirectAdminAPI\Model\WebSessionSelectDomainRequest $request Request data. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiSessionSwitchActiveDomainPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiSessionSwitchActiveDomainPostRequest($request, string $contentType = self::contentTypes['apiSessionSwitchActiveDomainPost'][0])
    {

        // verify the required parameter 'request' is set
        if ($request === null || (is_array($request) && count($request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $request when calling apiSessionSwitchActiveDomainPost'
            );
        }


        $resourcePath = '/api/session/switch-active-domain';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($request));
            } else {
                $httpBody = $request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiSessionUserConfigGet
     *
     * Current user config
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiSessionUserConfigGet'] to see the possible values for this operation
     *
     * @throws \COMPITAUT\DirectAdminAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \COMPITAUT\DirectAdminAPI\Model\WebUserConfig|\COMPITAUT\DirectAdminAPI\Model\ApierrorBadRequest|\COMPITAUT\DirectAdminAPI\Model\ApierrorUnauthorized|\COMPITAUT\DirectAdminAPI\Model\ApierrorLicenseOverused|\COMPITAUT\DirectAdminAPI\Model\ApierrorAccessDenied|\COMPITAUT\DirectAdminAPI\Model\ApierrorInternalError
     */
    public function apiSessionUserConfigGet(string $contentType = self::contentTypes['apiSessionUserConfigGet'][0])
    {
        list($response) = $this->apiSessionUserConfigGetWithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation apiSessionUserConfigGetWithHttpInfo
     *
     * Current user config
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiSessionUserConfigGet'] to see the possible values for this operation
     *
     * @throws \COMPITAUT\DirectAdminAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \COMPITAUT\DirectAdminAPI\Model\WebUserConfig|\COMPITAUT\DirectAdminAPI\Model\ApierrorBadRequest|\COMPITAUT\DirectAdminAPI\Model\ApierrorUnauthorized|\COMPITAUT\DirectAdminAPI\Model\ApierrorLicenseOverused|\COMPITAUT\DirectAdminAPI\Model\ApierrorAccessDenied|\COMPITAUT\DirectAdminAPI\Model\ApierrorInternalError, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiSessionUserConfigGetWithHttpInfo(string $contentType = self::contentTypes['apiSessionUserConfigGet'][0])
    {
        $request = $this->apiSessionUserConfigGetRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\COMPITAUT\DirectAdminAPI\Model\WebUserConfig',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorBadRequest',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorUnauthorized',
                        $request,
                        $response,
                    );
                case 402:
                    return $this->handleResponseWithDataType(
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorLicenseOverused',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorAccessDenied',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorInternalError',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\COMPITAUT\DirectAdminAPI\Model\WebUserConfig',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\WebUserConfig',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorBadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorUnauthorized',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 402:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorLicenseOverused',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorAccessDenied',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorInternalError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation apiSessionUserConfigGetAsync
     *
     * Current user config
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiSessionUserConfigGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiSessionUserConfigGetAsync(string $contentType = self::contentTypes['apiSessionUserConfigGet'][0])
    {
        return $this->apiSessionUserConfigGetAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiSessionUserConfigGetAsyncWithHttpInfo
     *
     * Current user config
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiSessionUserConfigGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiSessionUserConfigGetAsyncWithHttpInfo(string $contentType = self::contentTypes['apiSessionUserConfigGet'][0])
    {
        $returnType = '\COMPITAUT\DirectAdminAPI\Model\WebUserConfig';
        $request = $this->apiSessionUserConfigGetRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiSessionUserConfigGet'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiSessionUserConfigGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiSessionUserConfigGetRequest(string $contentType = self::contentTypes['apiSessionUserConfigGet'][0])
    {


        $resourcePath = '/api/session/user-config';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiSessionUserUsageGet
     *
     * Get user&#39;s usage
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiSessionUserUsageGet'] to see the possible values for this operation
     *
     * @throws \COMPITAUT\DirectAdminAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \COMPITAUT\DirectAdminAPI\Model\WebUserUsage|\COMPITAUT\DirectAdminAPI\Model\ApierrorBadRequest|\COMPITAUT\DirectAdminAPI\Model\ApierrorUnauthorized|\COMPITAUT\DirectAdminAPI\Model\ApierrorLicenseOverused|\COMPITAUT\DirectAdminAPI\Model\ApierrorAccessDenied|\COMPITAUT\DirectAdminAPI\Model\ApierrorInternalError
     */
    public function apiSessionUserUsageGet(string $contentType = self::contentTypes['apiSessionUserUsageGet'][0])
    {
        list($response) = $this->apiSessionUserUsageGetWithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation apiSessionUserUsageGetWithHttpInfo
     *
     * Get user&#39;s usage
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiSessionUserUsageGet'] to see the possible values for this operation
     *
     * @throws \COMPITAUT\DirectAdminAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \COMPITAUT\DirectAdminAPI\Model\WebUserUsage|\COMPITAUT\DirectAdminAPI\Model\ApierrorBadRequest|\COMPITAUT\DirectAdminAPI\Model\ApierrorUnauthorized|\COMPITAUT\DirectAdminAPI\Model\ApierrorLicenseOverused|\COMPITAUT\DirectAdminAPI\Model\ApierrorAccessDenied|\COMPITAUT\DirectAdminAPI\Model\ApierrorInternalError, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiSessionUserUsageGetWithHttpInfo(string $contentType = self::contentTypes['apiSessionUserUsageGet'][0])
    {
        $request = $this->apiSessionUserUsageGetRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\COMPITAUT\DirectAdminAPI\Model\WebUserUsage',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorBadRequest',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorUnauthorized',
                        $request,
                        $response,
                    );
                case 402:
                    return $this->handleResponseWithDataType(
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorLicenseOverused',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorAccessDenied',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorInternalError',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\COMPITAUT\DirectAdminAPI\Model\WebUserUsage',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\WebUserUsage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorBadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorUnauthorized',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 402:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorLicenseOverused',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorAccessDenied',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorInternalError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation apiSessionUserUsageGetAsync
     *
     * Get user&#39;s usage
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiSessionUserUsageGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiSessionUserUsageGetAsync(string $contentType = self::contentTypes['apiSessionUserUsageGet'][0])
    {
        return $this->apiSessionUserUsageGetAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiSessionUserUsageGetAsyncWithHttpInfo
     *
     * Get user&#39;s usage
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiSessionUserUsageGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiSessionUserUsageGetAsyncWithHttpInfo(string $contentType = self::contentTypes['apiSessionUserUsageGet'][0])
    {
        $returnType = '\COMPITAUT\DirectAdminAPI\Model\WebUserUsage';
        $request = $this->apiSessionUserUsageGetRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiSessionUserUsageGet'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiSessionUserUsageGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiSessionUserUsageGetRequest(string $contentType = self::contentTypes['apiSessionUserUsageGet'][0])
    {


        $resourcePath = '/api/session/user-usage';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiSessionsDestroyAllOtherPost
     *
     * Destroy all active sessions except current
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiSessionsDestroyAllOtherPost'] to see the possible values for this operation
     *
     * @throws \COMPITAUT\DirectAdminAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiSessionsDestroyAllOtherPost(string $contentType = self::contentTypes['apiSessionsDestroyAllOtherPost'][0])
    {
        $this->apiSessionsDestroyAllOtherPostWithHttpInfo($contentType);
    }

    /**
     * Operation apiSessionsDestroyAllOtherPostWithHttpInfo
     *
     * Destroy all active sessions except current
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiSessionsDestroyAllOtherPost'] to see the possible values for this operation
     *
     * @throws \COMPITAUT\DirectAdminAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiSessionsDestroyAllOtherPostWithHttpInfo(string $contentType = self::contentTypes['apiSessionsDestroyAllOtherPost'][0])
    {
        $request = $this->apiSessionsDestroyAllOtherPostRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorUnauthorized',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 402:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorLicenseOverused',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorAccessDenied',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorInternalError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation apiSessionsDestroyAllOtherPostAsync
     *
     * Destroy all active sessions except current
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiSessionsDestroyAllOtherPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiSessionsDestroyAllOtherPostAsync(string $contentType = self::contentTypes['apiSessionsDestroyAllOtherPost'][0])
    {
        return $this->apiSessionsDestroyAllOtherPostAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiSessionsDestroyAllOtherPostAsyncWithHttpInfo
     *
     * Destroy all active sessions except current
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiSessionsDestroyAllOtherPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiSessionsDestroyAllOtherPostAsyncWithHttpInfo(string $contentType = self::contentTypes['apiSessionsDestroyAllOtherPost'][0])
    {
        $returnType = '';
        $request = $this->apiSessionsDestroyAllOtherPostRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiSessionsDestroyAllOtherPost'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiSessionsDestroyAllOtherPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiSessionsDestroyAllOtherPostRequest(string $contentType = self::contentTypes['apiSessionsDestroyAllOtherPost'][0])
    {


        $resourcePath = '/api/sessions/destroy-all-other';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiSessionsDestroyPublicIdPost
     *
     * Destroy an active session
     *
     * @param  string $publicId Session&#39;s public ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiSessionsDestroyPublicIdPost'] to see the possible values for this operation
     *
     * @throws \COMPITAUT\DirectAdminAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiSessionsDestroyPublicIdPost($publicId, string $contentType = self::contentTypes['apiSessionsDestroyPublicIdPost'][0])
    {
        $this->apiSessionsDestroyPublicIdPostWithHttpInfo($publicId, $contentType);
    }

    /**
     * Operation apiSessionsDestroyPublicIdPostWithHttpInfo
     *
     * Destroy an active session
     *
     * @param  string $publicId Session&#39;s public ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiSessionsDestroyPublicIdPost'] to see the possible values for this operation
     *
     * @throws \COMPITAUT\DirectAdminAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiSessionsDestroyPublicIdPostWithHttpInfo($publicId, string $contentType = self::contentTypes['apiSessionsDestroyPublicIdPost'][0])
    {
        $request = $this->apiSessionsDestroyPublicIdPostRequest($publicId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorUnauthorized',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 402:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorLicenseOverused',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorAccessDenied',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorInternalError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation apiSessionsDestroyPublicIdPostAsync
     *
     * Destroy an active session
     *
     * @param  string $publicId Session&#39;s public ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiSessionsDestroyPublicIdPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiSessionsDestroyPublicIdPostAsync($publicId, string $contentType = self::contentTypes['apiSessionsDestroyPublicIdPost'][0])
    {
        return $this->apiSessionsDestroyPublicIdPostAsyncWithHttpInfo($publicId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiSessionsDestroyPublicIdPostAsyncWithHttpInfo
     *
     * Destroy an active session
     *
     * @param  string $publicId Session&#39;s public ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiSessionsDestroyPublicIdPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiSessionsDestroyPublicIdPostAsyncWithHttpInfo($publicId, string $contentType = self::contentTypes['apiSessionsDestroyPublicIdPost'][0])
    {
        $returnType = '';
        $request = $this->apiSessionsDestroyPublicIdPostRequest($publicId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiSessionsDestroyPublicIdPost'
     *
     * @param  string $publicId Session&#39;s public ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiSessionsDestroyPublicIdPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiSessionsDestroyPublicIdPostRequest($publicId, string $contentType = self::contentTypes['apiSessionsDestroyPublicIdPost'][0])
    {

        // verify the required parameter 'publicId' is set
        if ($publicId === null || (is_array($publicId) && count($publicId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $publicId when calling apiSessionsDestroyPublicIdPost'
            );
        }


        $resourcePath = '/api/sessions/destroy/{public_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($publicId !== null) {
            $resourcePath = str_replace(
                '{' . 'public_id' . '}',
                ObjectSerializer::toPathValue($publicId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiSessionsGet
     *
     * List active user sessions
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiSessionsGet'] to see the possible values for this operation
     *
     * @throws \COMPITAUT\DirectAdminAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \COMPITAUT\DirectAdminAPI\Model\WebSessionMetadata[]|\COMPITAUT\DirectAdminAPI\Model\ApierrorUnauthorized|\COMPITAUT\DirectAdminAPI\Model\ApierrorLicenseOverused|\COMPITAUT\DirectAdminAPI\Model\ApierrorAccessDenied|\COMPITAUT\DirectAdminAPI\Model\ApierrorInternalError
     */
    public function apiSessionsGet(string $contentType = self::contentTypes['apiSessionsGet'][0])
    {
        list($response) = $this->apiSessionsGetWithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation apiSessionsGetWithHttpInfo
     *
     * List active user sessions
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiSessionsGet'] to see the possible values for this operation
     *
     * @throws \COMPITAUT\DirectAdminAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \COMPITAUT\DirectAdminAPI\Model\WebSessionMetadata[]|\COMPITAUT\DirectAdminAPI\Model\ApierrorUnauthorized|\COMPITAUT\DirectAdminAPI\Model\ApierrorLicenseOverused|\COMPITAUT\DirectAdminAPI\Model\ApierrorAccessDenied|\COMPITAUT\DirectAdminAPI\Model\ApierrorInternalError, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiSessionsGetWithHttpInfo(string $contentType = self::contentTypes['apiSessionsGet'][0])
    {
        $request = $this->apiSessionsGetRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\COMPITAUT\DirectAdminAPI\Model\WebSessionMetadata[]',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorUnauthorized',
                        $request,
                        $response,
                    );
                case 402:
                    return $this->handleResponseWithDataType(
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorLicenseOverused',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorAccessDenied',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorInternalError',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\COMPITAUT\DirectAdminAPI\Model\WebSessionMetadata[]',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\WebSessionMetadata[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorUnauthorized',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 402:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorLicenseOverused',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorAccessDenied',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorInternalError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation apiSessionsGetAsync
     *
     * List active user sessions
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiSessionsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiSessionsGetAsync(string $contentType = self::contentTypes['apiSessionsGet'][0])
    {
        return $this->apiSessionsGetAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiSessionsGetAsyncWithHttpInfo
     *
     * List active user sessions
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiSessionsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiSessionsGetAsyncWithHttpInfo(string $contentType = self::contentTypes['apiSessionsGet'][0])
    {
        $returnType = '\COMPITAUT\DirectAdminAPI\Model\WebSessionMetadata[]';
        $request = $this->apiSessionsGetRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiSessionsGet'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiSessionsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiSessionsGetRequest(string $contentType = self::contentTypes['apiSessionsGet'][0])
    {


        $resourcePath = '/api/sessions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }

    private function handleResponseWithDataType(
        string $dataType,
        RequestInterface $request,
        ResponseInterface $response
    ): array {
        if ($dataType === '\SplFileObject') {
            $content = $response->getBody(); //stream goes to serializer
        } else {
            $content = (string) $response->getBody();
            if ($dataType !== 'string') {
                try {
                    $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                } catch (\JsonException $exception) {
                    throw new ApiException(
                        sprintf(
                            'Error JSON decoding server response (%s)',
                            $request->getUri()
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                        $content
                    );
                }
            }
        }

        return [
            ObjectSerializer::deserialize($content, $dataType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    private function responseWithinRangeCode(
        string $rangeCode,
        int $statusCode
    ): bool {
        $left = (int) ($rangeCode[0].'00');
        $right = (int) ($rangeCode[0].'99');

        return $statusCode >= $left && $statusCode <= $right;
    }
}
