<?php
/**
 * DatabaseApi
 * PHP version 8.1
 *
 * @category Class
 * @package  COMPITAUT\DirectAdminAPI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Swagger DirectAdmin API
 *
 * Swagger API for DirectAdmin server
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@directadmin.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace COMPITAUT\DirectAdminAPI\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Psr\Http\Message\RequestInterface;
use Psr\Http\Message\ResponseInterface;
use COMPITAUT\DirectAdminAPI\ApiException;
use COMPITAUT\DirectAdminAPI\Configuration;
use COMPITAUT\DirectAdminAPI\FormDataProcessor;
use COMPITAUT\DirectAdminAPI\HeaderSelector;
use COMPITAUT\DirectAdminAPI\ObjectSerializer;

/**
 * DatabaseApi Class Doc Comment
 *
 * @category Class
 * @package  COMPITAUT\DirectAdminAPI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class DatabaseApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'apiDbManageCloneDbPost' => [
            'application/json',
        ],
        'apiDbManageCreateDbPost' => [
            'application/json',
        ],
        'apiDbManageCreateDbWithUserPost' => [
            'application/json',
        ],
        'apiDbManageCreateUserPost' => [
            'application/json',
        ],
        'apiDbManageDatabasesDatabaseCheckPost' => [
            'application/json',
        ],
        'apiDbManageDatabasesDatabaseDelete' => [
            'application/json',
        ],
        'apiDbManageDatabasesDatabaseExportGet' => [
            'application/json',
        ],
        'apiDbManageDatabasesDatabaseFixDefinersPost' => [
            'application/json',
        ],
        'apiDbManageDatabasesDatabaseImportPost' => [
            'multipart/form-data',
        ],
        'apiDbManageDatabasesDatabaseOptimizePost' => [
            'application/json',
        ],
        'apiDbManageDatabasesDatabaseRepairPost' => [
            'application/json',
        ],
        'apiDbManageUsersDbuserChangeHostsPost' => [
            'application/json',
        ],
        'apiDbManageUsersDbuserChangePasswordPost' => [
            'application/json',
        ],
        'apiDbManageUsersDbuserDatabasesDatabaseChangePrivsPut' => [
            'application/json',
        ],
        'apiDbManageUsersDbuserDelete' => [
            'application/json',
        ],
        'apiDbShowDatabasesDatabaseGet' => [
            'application/json',
        ],
        'apiDbShowDatabasesDatabaseUsersGet' => [
            'application/json',
        ],
        'apiDbShowDatabasesGet' => [
            'application/json',
        ],
        'apiDbShowInfoGet' => [
            'application/json',
        ],
        'apiDbShowUsersDbuserDatabasesGet' => [
            'application/json',
        ],
        'apiDbShowUsersDbuserGet' => [
            'application/json',
        ],
        'apiDbShowUsersGet' => [
            'application/json',
        ],
        'apiPhpmyadminSsoAccountAccessPost' => [
            'application/json',
        ],
        'apiPhpmyadminSsoDatabaseAccessDatabasePost' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ?ClientInterface $client = null,
        ?Configuration $config = null,
        ?HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation apiDbManageCloneDbPost
     *
     * Clone database
     *
     * @param  \COMPITAUT\DirectAdminAPI\Model\WebDbCloneDatabaseRequest $data Data. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiDbManageCloneDbPost'] to see the possible values for this operation
     *
     * @throws \COMPITAUT\DirectAdminAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \COMPITAUT\DirectAdminAPI\Model\WebDbCloneDatabaseResponse|\COMPITAUT\DirectAdminAPI\Model\ApierrorBadRequest|\COMPITAUT\DirectAdminAPI\Model\ApierrorUnauthorized|\COMPITAUT\DirectAdminAPI\Model\ApierrorLicenseOverused|\COMPITAUT\DirectAdminAPI\Model\ApierrorAccessDenied|\COMPITAUT\DirectAdminAPI\Model\ApierrorNotFound|\COMPITAUT\DirectAdminAPI\Model\ApierrorAlreadyExists|\COMPITAUT\DirectAdminAPI\Model\ApierrorResellerExceedsLimits|\COMPITAUT\DirectAdminAPI\Model\ApierrorDatabasesExceedLimit|\COMPITAUT\DirectAdminAPI\Model\ApierrorDatabaseUsersExceedLimit|\COMPITAUT\DirectAdminAPI\Model\ApierrorDatabaseInvalidEntityName|\COMPITAUT\DirectAdminAPI\Model\ApierrorDatabaseClone|\COMPITAUT\DirectAdminAPI\Model\ApierrorInternalError
     */
    public function apiDbManageCloneDbPost($data, string $contentType = self::contentTypes['apiDbManageCloneDbPost'][0])
    {
        list($response) = $this->apiDbManageCloneDbPostWithHttpInfo($data, $contentType);
        return $response;
    }

    /**
     * Operation apiDbManageCloneDbPostWithHttpInfo
     *
     * Clone database
     *
     * @param  \COMPITAUT\DirectAdminAPI\Model\WebDbCloneDatabaseRequest $data Data. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiDbManageCloneDbPost'] to see the possible values for this operation
     *
     * @throws \COMPITAUT\DirectAdminAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \COMPITAUT\DirectAdminAPI\Model\WebDbCloneDatabaseResponse|\COMPITAUT\DirectAdminAPI\Model\ApierrorBadRequest|\COMPITAUT\DirectAdminAPI\Model\ApierrorUnauthorized|\COMPITAUT\DirectAdminAPI\Model\ApierrorLicenseOverused|\COMPITAUT\DirectAdminAPI\Model\ApierrorAccessDenied|\COMPITAUT\DirectAdminAPI\Model\ApierrorNotFound|\COMPITAUT\DirectAdminAPI\Model\ApierrorAlreadyExists|\COMPITAUT\DirectAdminAPI\Model\ApierrorResellerExceedsLimits|\COMPITAUT\DirectAdminAPI\Model\ApierrorDatabasesExceedLimit|\COMPITAUT\DirectAdminAPI\Model\ApierrorDatabaseUsersExceedLimit|\COMPITAUT\DirectAdminAPI\Model\ApierrorDatabaseInvalidEntityName|\COMPITAUT\DirectAdminAPI\Model\ApierrorDatabaseClone|\COMPITAUT\DirectAdminAPI\Model\ApierrorInternalError, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiDbManageCloneDbPostWithHttpInfo($data, string $contentType = self::contentTypes['apiDbManageCloneDbPost'][0])
    {
        $request = $this->apiDbManageCloneDbPostRequest($data, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\COMPITAUT\DirectAdminAPI\Model\WebDbCloneDatabaseResponse',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorBadRequest',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorUnauthorized',
                        $request,
                        $response,
                    );
                case 402:
                    return $this->handleResponseWithDataType(
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorLicenseOverused',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorAccessDenied',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorNotFound',
                        $request,
                        $response,
                    );
                case 490:
                    return $this->handleResponseWithDataType(
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorAlreadyExists',
                        $request,
                        $response,
                    );
                case 491:
                    return $this->handleResponseWithDataType(
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorResellerExceedsLimits',
                        $request,
                        $response,
                    );
                case 492:
                    return $this->handleResponseWithDataType(
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorDatabasesExceedLimit',
                        $request,
                        $response,
                    );
                case 493:
                    return $this->handleResponseWithDataType(
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorDatabaseUsersExceedLimit',
                        $request,
                        $response,
                    );
                case 494:
                    return $this->handleResponseWithDataType(
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorDatabaseInvalidEntityName',
                        $request,
                        $response,
                    );
                case 495:
                    return $this->handleResponseWithDataType(
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorDatabaseClone',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorInternalError',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\COMPITAUT\DirectAdminAPI\Model\WebDbCloneDatabaseResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\WebDbCloneDatabaseResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorBadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorUnauthorized',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 402:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorLicenseOverused',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorAccessDenied',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorNotFound',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 490:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorAlreadyExists',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 491:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorResellerExceedsLimits',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 492:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorDatabasesExceedLimit',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 493:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorDatabaseUsersExceedLimit',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 494:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorDatabaseInvalidEntityName',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 495:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorDatabaseClone',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorInternalError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation apiDbManageCloneDbPostAsync
     *
     * Clone database
     *
     * @param  \COMPITAUT\DirectAdminAPI\Model\WebDbCloneDatabaseRequest $data Data. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiDbManageCloneDbPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiDbManageCloneDbPostAsync($data, string $contentType = self::contentTypes['apiDbManageCloneDbPost'][0])
    {
        return $this->apiDbManageCloneDbPostAsyncWithHttpInfo($data, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiDbManageCloneDbPostAsyncWithHttpInfo
     *
     * Clone database
     *
     * @param  \COMPITAUT\DirectAdminAPI\Model\WebDbCloneDatabaseRequest $data Data. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiDbManageCloneDbPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiDbManageCloneDbPostAsyncWithHttpInfo($data, string $contentType = self::contentTypes['apiDbManageCloneDbPost'][0])
    {
        $returnType = '\COMPITAUT\DirectAdminAPI\Model\WebDbCloneDatabaseResponse';
        $request = $this->apiDbManageCloneDbPostRequest($data, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiDbManageCloneDbPost'
     *
     * @param  \COMPITAUT\DirectAdminAPI\Model\WebDbCloneDatabaseRequest $data Data. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiDbManageCloneDbPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiDbManageCloneDbPostRequest($data, string $contentType = self::contentTypes['apiDbManageCloneDbPost'][0])
    {

        // verify the required parameter 'data' is set
        if ($data === null || (is_array($data) && count($data) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $data when calling apiDbManageCloneDbPost'
            );
        }


        $resourcePath = '/api/db-manage/clone-db';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($data)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($data));
            } else {
                $httpBody = $data;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiDbManageCreateDbPost
     *
     * Create empty database
     *
     * @param  \COMPITAUT\DirectAdminAPI\Model\WebDbCreateDatabaseRequest $data Data. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiDbManageCreateDbPost'] to see the possible values for this operation
     *
     * @throws \COMPITAUT\DirectAdminAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiDbManageCreateDbPost($data, string $contentType = self::contentTypes['apiDbManageCreateDbPost'][0])
    {
        $this->apiDbManageCreateDbPostWithHttpInfo($data, $contentType);
    }

    /**
     * Operation apiDbManageCreateDbPostWithHttpInfo
     *
     * Create empty database
     *
     * @param  \COMPITAUT\DirectAdminAPI\Model\WebDbCreateDatabaseRequest $data Data. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiDbManageCreateDbPost'] to see the possible values for this operation
     *
     * @throws \COMPITAUT\DirectAdminAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiDbManageCreateDbPostWithHttpInfo($data, string $contentType = self::contentTypes['apiDbManageCreateDbPost'][0])
    {
        $request = $this->apiDbManageCreateDbPostRequest($data, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorBadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorUnauthorized',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 402:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorLicenseOverused',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorAccessDenied',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorAlreadyExists',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 490:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorPreHookError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 491:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorDatabasesExceedLimit',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 492:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorDatabaseInvalidEntityName',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 493:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorResellerExceedsLimits',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 494:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorDatabaseInvalidCharset',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 495:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorDatabaseInvalidCollation',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorInternalError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation apiDbManageCreateDbPostAsync
     *
     * Create empty database
     *
     * @param  \COMPITAUT\DirectAdminAPI\Model\WebDbCreateDatabaseRequest $data Data. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiDbManageCreateDbPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiDbManageCreateDbPostAsync($data, string $contentType = self::contentTypes['apiDbManageCreateDbPost'][0])
    {
        return $this->apiDbManageCreateDbPostAsyncWithHttpInfo($data, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiDbManageCreateDbPostAsyncWithHttpInfo
     *
     * Create empty database
     *
     * @param  \COMPITAUT\DirectAdminAPI\Model\WebDbCreateDatabaseRequest $data Data. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiDbManageCreateDbPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiDbManageCreateDbPostAsyncWithHttpInfo($data, string $contentType = self::contentTypes['apiDbManageCreateDbPost'][0])
    {
        $returnType = '';
        $request = $this->apiDbManageCreateDbPostRequest($data, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiDbManageCreateDbPost'
     *
     * @param  \COMPITAUT\DirectAdminAPI\Model\WebDbCreateDatabaseRequest $data Data. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiDbManageCreateDbPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiDbManageCreateDbPostRequest($data, string $contentType = self::contentTypes['apiDbManageCreateDbPost'][0])
    {

        // verify the required parameter 'data' is set
        if ($data === null || (is_array($data) && count($data) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $data when calling apiDbManageCreateDbPost'
            );
        }


        $resourcePath = '/api/db-manage/create-db';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($data)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($data));
            } else {
                $httpBody = $data;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiDbManageCreateDbWithUserPost
     *
     * Create database with user
     *
     * @param  \COMPITAUT\DirectAdminAPI\Model\WebDbCreateDatabaseWithUserRequest $data Data. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiDbManageCreateDbWithUserPost'] to see the possible values for this operation
     *
     * @throws \COMPITAUT\DirectAdminAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \COMPITAUT\DirectAdminAPI\Model\WebDbFullConnectionResponse|\COMPITAUT\DirectAdminAPI\Model\ApierrorBadRequest|\COMPITAUT\DirectAdminAPI\Model\ApierrorUnauthorized|\COMPITAUT\DirectAdminAPI\Model\ApierrorLicenseOverused|\COMPITAUT\DirectAdminAPI\Model\ApierrorAccessDenied|\COMPITAUT\DirectAdminAPI\Model\ApierrorAlreadyExists|\COMPITAUT\DirectAdminAPI\Model\ApierrorPreHookError|\COMPITAUT\DirectAdminAPI\Model\ApierrorDatabaseInvalidCharset|\COMPITAUT\DirectAdminAPI\Model\ApierrorDatabaseInvalidCollation|\COMPITAUT\DirectAdminAPI\Model\ApierrorDatabaseInvalidEntityName|\COMPITAUT\DirectAdminAPI\Model\ApierrorDatabaseUsersExceedLimit|\COMPITAUT\DirectAdminAPI\Model\ApierrorDatabasesExceedLimit|\COMPITAUT\DirectAdminAPI\Model\ApierrorResellerExceedsLimits|\COMPITAUT\DirectAdminAPI\Model\ApierrorInternalError
     */
    public function apiDbManageCreateDbWithUserPost($data, string $contentType = self::contentTypes['apiDbManageCreateDbWithUserPost'][0])
    {
        list($response) = $this->apiDbManageCreateDbWithUserPostWithHttpInfo($data, $contentType);
        return $response;
    }

    /**
     * Operation apiDbManageCreateDbWithUserPostWithHttpInfo
     *
     * Create database with user
     *
     * @param  \COMPITAUT\DirectAdminAPI\Model\WebDbCreateDatabaseWithUserRequest $data Data. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiDbManageCreateDbWithUserPost'] to see the possible values for this operation
     *
     * @throws \COMPITAUT\DirectAdminAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \COMPITAUT\DirectAdminAPI\Model\WebDbFullConnectionResponse|\COMPITAUT\DirectAdminAPI\Model\ApierrorBadRequest|\COMPITAUT\DirectAdminAPI\Model\ApierrorUnauthorized|\COMPITAUT\DirectAdminAPI\Model\ApierrorLicenseOverused|\COMPITAUT\DirectAdminAPI\Model\ApierrorAccessDenied|\COMPITAUT\DirectAdminAPI\Model\ApierrorAlreadyExists|\COMPITAUT\DirectAdminAPI\Model\ApierrorPreHookError|\COMPITAUT\DirectAdminAPI\Model\ApierrorDatabaseInvalidCharset|\COMPITAUT\DirectAdminAPI\Model\ApierrorDatabaseInvalidCollation|\COMPITAUT\DirectAdminAPI\Model\ApierrorDatabaseInvalidEntityName|\COMPITAUT\DirectAdminAPI\Model\ApierrorDatabaseUsersExceedLimit|\COMPITAUT\DirectAdminAPI\Model\ApierrorDatabasesExceedLimit|\COMPITAUT\DirectAdminAPI\Model\ApierrorResellerExceedsLimits|\COMPITAUT\DirectAdminAPI\Model\ApierrorInternalError, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiDbManageCreateDbWithUserPostWithHttpInfo($data, string $contentType = self::contentTypes['apiDbManageCreateDbWithUserPost'][0])
    {
        $request = $this->apiDbManageCreateDbWithUserPostRequest($data, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\COMPITAUT\DirectAdminAPI\Model\WebDbFullConnectionResponse',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorBadRequest',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorUnauthorized',
                        $request,
                        $response,
                    );
                case 402:
                    return $this->handleResponseWithDataType(
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorLicenseOverused',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorAccessDenied',
                        $request,
                        $response,
                    );
                case 490:
                    return $this->handleResponseWithDataType(
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorAlreadyExists',
                        $request,
                        $response,
                    );
                case 491:
                    return $this->handleResponseWithDataType(
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorPreHookError',
                        $request,
                        $response,
                    );
                case 492:
                    return $this->handleResponseWithDataType(
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorDatabaseInvalidCharset',
                        $request,
                        $response,
                    );
                case 493:
                    return $this->handleResponseWithDataType(
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorDatabaseInvalidCollation',
                        $request,
                        $response,
                    );
                case 494:
                    return $this->handleResponseWithDataType(
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorDatabaseInvalidEntityName',
                        $request,
                        $response,
                    );
                case 495:
                    return $this->handleResponseWithDataType(
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorDatabaseUsersExceedLimit',
                        $request,
                        $response,
                    );
                case 496:
                    return $this->handleResponseWithDataType(
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorDatabasesExceedLimit',
                        $request,
                        $response,
                    );
                case 497:
                    return $this->handleResponseWithDataType(
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorResellerExceedsLimits',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorInternalError',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\COMPITAUT\DirectAdminAPI\Model\WebDbFullConnectionResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\WebDbFullConnectionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorBadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorUnauthorized',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 402:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorLicenseOverused',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorAccessDenied',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 490:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorAlreadyExists',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 491:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorPreHookError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 492:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorDatabaseInvalidCharset',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 493:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorDatabaseInvalidCollation',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 494:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorDatabaseInvalidEntityName',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 495:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorDatabaseUsersExceedLimit',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 496:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorDatabasesExceedLimit',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 497:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorResellerExceedsLimits',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorInternalError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation apiDbManageCreateDbWithUserPostAsync
     *
     * Create database with user
     *
     * @param  \COMPITAUT\DirectAdminAPI\Model\WebDbCreateDatabaseWithUserRequest $data Data. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiDbManageCreateDbWithUserPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiDbManageCreateDbWithUserPostAsync($data, string $contentType = self::contentTypes['apiDbManageCreateDbWithUserPost'][0])
    {
        return $this->apiDbManageCreateDbWithUserPostAsyncWithHttpInfo($data, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiDbManageCreateDbWithUserPostAsyncWithHttpInfo
     *
     * Create database with user
     *
     * @param  \COMPITAUT\DirectAdminAPI\Model\WebDbCreateDatabaseWithUserRequest $data Data. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiDbManageCreateDbWithUserPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiDbManageCreateDbWithUserPostAsyncWithHttpInfo($data, string $contentType = self::contentTypes['apiDbManageCreateDbWithUserPost'][0])
    {
        $returnType = '\COMPITAUT\DirectAdminAPI\Model\WebDbFullConnectionResponse';
        $request = $this->apiDbManageCreateDbWithUserPostRequest($data, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiDbManageCreateDbWithUserPost'
     *
     * @param  \COMPITAUT\DirectAdminAPI\Model\WebDbCreateDatabaseWithUserRequest $data Data. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiDbManageCreateDbWithUserPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiDbManageCreateDbWithUserPostRequest($data, string $contentType = self::contentTypes['apiDbManageCreateDbWithUserPost'][0])
    {

        // verify the required parameter 'data' is set
        if ($data === null || (is_array($data) && count($data) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $data when calling apiDbManageCreateDbWithUserPost'
            );
        }


        $resourcePath = '/api/db-manage/create-db-with-user';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($data)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($data));
            } else {
                $httpBody = $data;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiDbManageCreateUserPost
     *
     * Create database user
     *
     * @param  \COMPITAUT\DirectAdminAPI\Model\WebDbCreateUserRequest $data Data. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiDbManageCreateUserPost'] to see the possible values for this operation
     *
     * @throws \COMPITAUT\DirectAdminAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiDbManageCreateUserPost($data, string $contentType = self::contentTypes['apiDbManageCreateUserPost'][0])
    {
        $this->apiDbManageCreateUserPostWithHttpInfo($data, $contentType);
    }

    /**
     * Operation apiDbManageCreateUserPostWithHttpInfo
     *
     * Create database user
     *
     * @param  \COMPITAUT\DirectAdminAPI\Model\WebDbCreateUserRequest $data Data. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiDbManageCreateUserPost'] to see the possible values for this operation
     *
     * @throws \COMPITAUT\DirectAdminAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiDbManageCreateUserPostWithHttpInfo($data, string $contentType = self::contentTypes['apiDbManageCreateUserPost'][0])
    {
        $request = $this->apiDbManageCreateUserPostRequest($data, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorBadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorUnauthorized',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 402:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorLicenseOverused',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorAccessDenied',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorAlreadyExists',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 491:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorDatabaseUsersExceedLimit',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 492:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorDatabaseInvalidEntityName',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorInternalError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation apiDbManageCreateUserPostAsync
     *
     * Create database user
     *
     * @param  \COMPITAUT\DirectAdminAPI\Model\WebDbCreateUserRequest $data Data. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiDbManageCreateUserPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiDbManageCreateUserPostAsync($data, string $contentType = self::contentTypes['apiDbManageCreateUserPost'][0])
    {
        return $this->apiDbManageCreateUserPostAsyncWithHttpInfo($data, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiDbManageCreateUserPostAsyncWithHttpInfo
     *
     * Create database user
     *
     * @param  \COMPITAUT\DirectAdminAPI\Model\WebDbCreateUserRequest $data Data. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiDbManageCreateUserPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiDbManageCreateUserPostAsyncWithHttpInfo($data, string $contentType = self::contentTypes['apiDbManageCreateUserPost'][0])
    {
        $returnType = '';
        $request = $this->apiDbManageCreateUserPostRequest($data, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiDbManageCreateUserPost'
     *
     * @param  \COMPITAUT\DirectAdminAPI\Model\WebDbCreateUserRequest $data Data. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiDbManageCreateUserPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiDbManageCreateUserPostRequest($data, string $contentType = self::contentTypes['apiDbManageCreateUserPost'][0])
    {

        // verify the required parameter 'data' is set
        if ($data === null || (is_array($data) && count($data) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $data when calling apiDbManageCreateUserPost'
            );
        }


        $resourcePath = '/api/db-manage/create-user';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($data)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($data));
            } else {
                $httpBody = $data;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiDbManageDatabasesDatabaseCheckPost
     *
     * Check database
     *
     * @param  string $database Database. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiDbManageDatabasesDatabaseCheckPost'] to see the possible values for this operation
     *
     * @throws \COMPITAUT\DirectAdminAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \COMPITAUT\DirectAdminAPI\Model\WebDbTableActionResult[]|\COMPITAUT\DirectAdminAPI\Model\ApierrorUnauthorized|\COMPITAUT\DirectAdminAPI\Model\ApierrorLicenseOverused|\COMPITAUT\DirectAdminAPI\Model\ApierrorAccessDenied|\COMPITAUT\DirectAdminAPI\Model\ApierrorInternalError
     */
    public function apiDbManageDatabasesDatabaseCheckPost($database, string $contentType = self::contentTypes['apiDbManageDatabasesDatabaseCheckPost'][0])
    {
        list($response) = $this->apiDbManageDatabasesDatabaseCheckPostWithHttpInfo($database, $contentType);
        return $response;
    }

    /**
     * Operation apiDbManageDatabasesDatabaseCheckPostWithHttpInfo
     *
     * Check database
     *
     * @param  string $database Database. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiDbManageDatabasesDatabaseCheckPost'] to see the possible values for this operation
     *
     * @throws \COMPITAUT\DirectAdminAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \COMPITAUT\DirectAdminAPI\Model\WebDbTableActionResult[]|\COMPITAUT\DirectAdminAPI\Model\ApierrorUnauthorized|\COMPITAUT\DirectAdminAPI\Model\ApierrorLicenseOverused|\COMPITAUT\DirectAdminAPI\Model\ApierrorAccessDenied|\COMPITAUT\DirectAdminAPI\Model\ApierrorInternalError, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiDbManageDatabasesDatabaseCheckPostWithHttpInfo($database, string $contentType = self::contentTypes['apiDbManageDatabasesDatabaseCheckPost'][0])
    {
        $request = $this->apiDbManageDatabasesDatabaseCheckPostRequest($database, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\COMPITAUT\DirectAdminAPI\Model\WebDbTableActionResult[]',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorUnauthorized',
                        $request,
                        $response,
                    );
                case 402:
                    return $this->handleResponseWithDataType(
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorLicenseOverused',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorAccessDenied',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorInternalError',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\COMPITAUT\DirectAdminAPI\Model\WebDbTableActionResult[]',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\WebDbTableActionResult[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorUnauthorized',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 402:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorLicenseOverused',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorAccessDenied',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorInternalError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation apiDbManageDatabasesDatabaseCheckPostAsync
     *
     * Check database
     *
     * @param  string $database Database. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiDbManageDatabasesDatabaseCheckPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiDbManageDatabasesDatabaseCheckPostAsync($database, string $contentType = self::contentTypes['apiDbManageDatabasesDatabaseCheckPost'][0])
    {
        return $this->apiDbManageDatabasesDatabaseCheckPostAsyncWithHttpInfo($database, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiDbManageDatabasesDatabaseCheckPostAsyncWithHttpInfo
     *
     * Check database
     *
     * @param  string $database Database. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiDbManageDatabasesDatabaseCheckPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiDbManageDatabasesDatabaseCheckPostAsyncWithHttpInfo($database, string $contentType = self::contentTypes['apiDbManageDatabasesDatabaseCheckPost'][0])
    {
        $returnType = '\COMPITAUT\DirectAdminAPI\Model\WebDbTableActionResult[]';
        $request = $this->apiDbManageDatabasesDatabaseCheckPostRequest($database, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiDbManageDatabasesDatabaseCheckPost'
     *
     * @param  string $database Database. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiDbManageDatabasesDatabaseCheckPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiDbManageDatabasesDatabaseCheckPostRequest($database, string $contentType = self::contentTypes['apiDbManageDatabasesDatabaseCheckPost'][0])
    {

        // verify the required parameter 'database' is set
        if ($database === null || (is_array($database) && count($database) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $database when calling apiDbManageDatabasesDatabaseCheckPost'
            );
        }


        $resourcePath = '/api/db-manage/databases/{database}/check';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($database !== null) {
            $resourcePath = str_replace(
                '{' . 'database' . '}',
                ObjectSerializer::toPathValue($database),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiDbManageDatabasesDatabaseDelete
     *
     * Delete database
     *
     * @param  string $database Database. (required)
     * @param  bool|null $dropOrphanUsers Delete users which had access only to the deleted database. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiDbManageDatabasesDatabaseDelete'] to see the possible values for this operation
     *
     * @throws \COMPITAUT\DirectAdminAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiDbManageDatabasesDatabaseDelete($database, $dropOrphanUsers = null, string $contentType = self::contentTypes['apiDbManageDatabasesDatabaseDelete'][0])
    {
        $this->apiDbManageDatabasesDatabaseDeleteWithHttpInfo($database, $dropOrphanUsers, $contentType);
    }

    /**
     * Operation apiDbManageDatabasesDatabaseDeleteWithHttpInfo
     *
     * Delete database
     *
     * @param  string $database Database. (required)
     * @param  bool|null $dropOrphanUsers Delete users which had access only to the deleted database. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiDbManageDatabasesDatabaseDelete'] to see the possible values for this operation
     *
     * @throws \COMPITAUT\DirectAdminAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiDbManageDatabasesDatabaseDeleteWithHttpInfo($database, $dropOrphanUsers = null, string $contentType = self::contentTypes['apiDbManageDatabasesDatabaseDelete'][0])
    {
        $request = $this->apiDbManageDatabasesDatabaseDeleteRequest($database, $dropOrphanUsers, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorUnauthorized',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 402:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorLicenseOverused',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorAccessDenied',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorPreHookError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorInternalError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation apiDbManageDatabasesDatabaseDeleteAsync
     *
     * Delete database
     *
     * @param  string $database Database. (required)
     * @param  bool|null $dropOrphanUsers Delete users which had access only to the deleted database. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiDbManageDatabasesDatabaseDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiDbManageDatabasesDatabaseDeleteAsync($database, $dropOrphanUsers = null, string $contentType = self::contentTypes['apiDbManageDatabasesDatabaseDelete'][0])
    {
        return $this->apiDbManageDatabasesDatabaseDeleteAsyncWithHttpInfo($database, $dropOrphanUsers, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiDbManageDatabasesDatabaseDeleteAsyncWithHttpInfo
     *
     * Delete database
     *
     * @param  string $database Database. (required)
     * @param  bool|null $dropOrphanUsers Delete users which had access only to the deleted database. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiDbManageDatabasesDatabaseDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiDbManageDatabasesDatabaseDeleteAsyncWithHttpInfo($database, $dropOrphanUsers = null, string $contentType = self::contentTypes['apiDbManageDatabasesDatabaseDelete'][0])
    {
        $returnType = '';
        $request = $this->apiDbManageDatabasesDatabaseDeleteRequest($database, $dropOrphanUsers, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiDbManageDatabasesDatabaseDelete'
     *
     * @param  string $database Database. (required)
     * @param  bool|null $dropOrphanUsers Delete users which had access only to the deleted database. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiDbManageDatabasesDatabaseDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiDbManageDatabasesDatabaseDeleteRequest($database, $dropOrphanUsers = null, string $contentType = self::contentTypes['apiDbManageDatabasesDatabaseDelete'][0])
    {

        // verify the required parameter 'database' is set
        if ($database === null || (is_array($database) && count($database) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $database when calling apiDbManageDatabasesDatabaseDelete'
            );
        }



        $resourcePath = '/api/db-manage/databases/{database}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $dropOrphanUsers,
            'drop-orphan-users', // param base name
            'boolean', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($database !== null) {
            $resourcePath = str_replace(
                '{' . 'database' . '}',
                ObjectSerializer::toPathValue($database),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiDbManageDatabasesDatabaseExportGet
     *
     * Export database
     *
     * @param  string $database Database. (required)
     * @param  bool|null $gzip Gzipped export. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiDbManageDatabasesDatabaseExportGet'] to see the possible values for this operation
     *
     * @throws \COMPITAUT\DirectAdminAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \SplFileObject|\COMPITAUT\DirectAdminAPI\Model\ApierrorUnauthorized|\COMPITAUT\DirectAdminAPI\Model\ApierrorLicenseOverused|\COMPITAUT\DirectAdminAPI\Model\ApierrorAccessDenied|\COMPITAUT\DirectAdminAPI\Model\ApierrorNotFound|\COMPITAUT\DirectAdminAPI\Model\ApierrorInternalError
     */
    public function apiDbManageDatabasesDatabaseExportGet($database, $gzip = false, string $contentType = self::contentTypes['apiDbManageDatabasesDatabaseExportGet'][0])
    {
        list($response) = $this->apiDbManageDatabasesDatabaseExportGetWithHttpInfo($database, $gzip, $contentType);
        return $response;
    }

    /**
     * Operation apiDbManageDatabasesDatabaseExportGetWithHttpInfo
     *
     * Export database
     *
     * @param  string $database Database. (required)
     * @param  bool|null $gzip Gzipped export. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiDbManageDatabasesDatabaseExportGet'] to see the possible values for this operation
     *
     * @throws \COMPITAUT\DirectAdminAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \SplFileObject|\COMPITAUT\DirectAdminAPI\Model\ApierrorUnauthorized|\COMPITAUT\DirectAdminAPI\Model\ApierrorLicenseOverused|\COMPITAUT\DirectAdminAPI\Model\ApierrorAccessDenied|\COMPITAUT\DirectAdminAPI\Model\ApierrorNotFound|\COMPITAUT\DirectAdminAPI\Model\ApierrorInternalError, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiDbManageDatabasesDatabaseExportGetWithHttpInfo($database, $gzip = false, string $contentType = self::contentTypes['apiDbManageDatabasesDatabaseExportGet'][0])
    {
        $request = $this->apiDbManageDatabasesDatabaseExportGetRequest($database, $gzip, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\SplFileObject',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorUnauthorized',
                        $request,
                        $response,
                    );
                case 402:
                    return $this->handleResponseWithDataType(
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorLicenseOverused',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorAccessDenied',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorNotFound',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorInternalError',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\SplFileObject',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SplFileObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorUnauthorized',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 402:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorLicenseOverused',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorAccessDenied',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorNotFound',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorInternalError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation apiDbManageDatabasesDatabaseExportGetAsync
     *
     * Export database
     *
     * @param  string $database Database. (required)
     * @param  bool|null $gzip Gzipped export. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiDbManageDatabasesDatabaseExportGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiDbManageDatabasesDatabaseExportGetAsync($database, $gzip = false, string $contentType = self::contentTypes['apiDbManageDatabasesDatabaseExportGet'][0])
    {
        return $this->apiDbManageDatabasesDatabaseExportGetAsyncWithHttpInfo($database, $gzip, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiDbManageDatabasesDatabaseExportGetAsyncWithHttpInfo
     *
     * Export database
     *
     * @param  string $database Database. (required)
     * @param  bool|null $gzip Gzipped export. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiDbManageDatabasesDatabaseExportGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiDbManageDatabasesDatabaseExportGetAsyncWithHttpInfo($database, $gzip = false, string $contentType = self::contentTypes['apiDbManageDatabasesDatabaseExportGet'][0])
    {
        $returnType = '\SplFileObject';
        $request = $this->apiDbManageDatabasesDatabaseExportGetRequest($database, $gzip, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiDbManageDatabasesDatabaseExportGet'
     *
     * @param  string $database Database. (required)
     * @param  bool|null $gzip Gzipped export. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiDbManageDatabasesDatabaseExportGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiDbManageDatabasesDatabaseExportGetRequest($database, $gzip = false, string $contentType = self::contentTypes['apiDbManageDatabasesDatabaseExportGet'][0])
    {

        // verify the required parameter 'database' is set
        if ($database === null || (is_array($database) && count($database) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $database when calling apiDbManageDatabasesDatabaseExportGet'
            );
        }



        $resourcePath = '/api/db-manage/databases/{database}/export';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $gzip,
            'gzip', // param base name
            'boolean', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($database !== null) {
            $resourcePath = str_replace(
                '{' . 'database' . '}',
                ObjectSerializer::toPathValue($database),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/sql', 'application/x-gzip', 'application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiDbManageDatabasesDatabaseFixDefinersPost
     *
     * Fix broken database definers
     *
     * @param  string $database Database. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiDbManageDatabasesDatabaseFixDefinersPost'] to see the possible values for this operation
     *
     * @throws \COMPITAUT\DirectAdminAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiDbManageDatabasesDatabaseFixDefinersPost($database, string $contentType = self::contentTypes['apiDbManageDatabasesDatabaseFixDefinersPost'][0])
    {
        $this->apiDbManageDatabasesDatabaseFixDefinersPostWithHttpInfo($database, $contentType);
    }

    /**
     * Operation apiDbManageDatabasesDatabaseFixDefinersPostWithHttpInfo
     *
     * Fix broken database definers
     *
     * @param  string $database Database. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiDbManageDatabasesDatabaseFixDefinersPost'] to see the possible values for this operation
     *
     * @throws \COMPITAUT\DirectAdminAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiDbManageDatabasesDatabaseFixDefinersPostWithHttpInfo($database, string $contentType = self::contentTypes['apiDbManageDatabasesDatabaseFixDefinersPost'][0])
    {
        $request = $this->apiDbManageDatabasesDatabaseFixDefinersPostRequest($database, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorUnauthorized',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 402:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorLicenseOverused',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorAccessDenied',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorNotFound',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorDatabaseNoViableDefiner',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorInternalError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation apiDbManageDatabasesDatabaseFixDefinersPostAsync
     *
     * Fix broken database definers
     *
     * @param  string $database Database. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiDbManageDatabasesDatabaseFixDefinersPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiDbManageDatabasesDatabaseFixDefinersPostAsync($database, string $contentType = self::contentTypes['apiDbManageDatabasesDatabaseFixDefinersPost'][0])
    {
        return $this->apiDbManageDatabasesDatabaseFixDefinersPostAsyncWithHttpInfo($database, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiDbManageDatabasesDatabaseFixDefinersPostAsyncWithHttpInfo
     *
     * Fix broken database definers
     *
     * @param  string $database Database. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiDbManageDatabasesDatabaseFixDefinersPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiDbManageDatabasesDatabaseFixDefinersPostAsyncWithHttpInfo($database, string $contentType = self::contentTypes['apiDbManageDatabasesDatabaseFixDefinersPost'][0])
    {
        $returnType = '';
        $request = $this->apiDbManageDatabasesDatabaseFixDefinersPostRequest($database, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiDbManageDatabasesDatabaseFixDefinersPost'
     *
     * @param  string $database Database. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiDbManageDatabasesDatabaseFixDefinersPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiDbManageDatabasesDatabaseFixDefinersPostRequest($database, string $contentType = self::contentTypes['apiDbManageDatabasesDatabaseFixDefinersPost'][0])
    {

        // verify the required parameter 'database' is set
        if ($database === null || (is_array($database) && count($database) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $database when calling apiDbManageDatabasesDatabaseFixDefinersPost'
            );
        }


        $resourcePath = '/api/db-manage/databases/{database}/fix-definers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($database !== null) {
            $resourcePath = str_replace(
                '{' . 'database' . '}',
                ObjectSerializer::toPathValue($database),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiDbManageDatabasesDatabaseImportPost
     *
     * Import database backup
     *
     * @param  string $database Database. (required)
     * @param  \SplFileObject $sqlfile SQL file to import (can be gzipped). (required)
     * @param  bool|null $clean Clean database before importing. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiDbManageDatabasesDatabaseImportPost'] to see the possible values for this operation
     *
     * @throws \COMPITAUT\DirectAdminAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiDbManageDatabasesDatabaseImportPost($database, $sqlfile, $clean = false, string $contentType = self::contentTypes['apiDbManageDatabasesDatabaseImportPost'][0])
    {
        $this->apiDbManageDatabasesDatabaseImportPostWithHttpInfo($database, $sqlfile, $clean, $contentType);
    }

    /**
     * Operation apiDbManageDatabasesDatabaseImportPostWithHttpInfo
     *
     * Import database backup
     *
     * @param  string $database Database. (required)
     * @param  \SplFileObject $sqlfile SQL file to import (can be gzipped). (required)
     * @param  bool|null $clean Clean database before importing. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiDbManageDatabasesDatabaseImportPost'] to see the possible values for this operation
     *
     * @throws \COMPITAUT\DirectAdminAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiDbManageDatabasesDatabaseImportPostWithHttpInfo($database, $sqlfile, $clean = false, string $contentType = self::contentTypes['apiDbManageDatabasesDatabaseImportPost'][0])
    {
        $request = $this->apiDbManageDatabasesDatabaseImportPostRequest($database, $sqlfile, $clean, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorBadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorUnauthorized',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 402:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorLicenseOverused',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorAccessDenied',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorNotFound',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorDatabaseImport',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorInternalError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation apiDbManageDatabasesDatabaseImportPostAsync
     *
     * Import database backup
     *
     * @param  string $database Database. (required)
     * @param  \SplFileObject $sqlfile SQL file to import (can be gzipped). (required)
     * @param  bool|null $clean Clean database before importing. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiDbManageDatabasesDatabaseImportPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiDbManageDatabasesDatabaseImportPostAsync($database, $sqlfile, $clean = false, string $contentType = self::contentTypes['apiDbManageDatabasesDatabaseImportPost'][0])
    {
        return $this->apiDbManageDatabasesDatabaseImportPostAsyncWithHttpInfo($database, $sqlfile, $clean, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiDbManageDatabasesDatabaseImportPostAsyncWithHttpInfo
     *
     * Import database backup
     *
     * @param  string $database Database. (required)
     * @param  \SplFileObject $sqlfile SQL file to import (can be gzipped). (required)
     * @param  bool|null $clean Clean database before importing. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiDbManageDatabasesDatabaseImportPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiDbManageDatabasesDatabaseImportPostAsyncWithHttpInfo($database, $sqlfile, $clean = false, string $contentType = self::contentTypes['apiDbManageDatabasesDatabaseImportPost'][0])
    {
        $returnType = '';
        $request = $this->apiDbManageDatabasesDatabaseImportPostRequest($database, $sqlfile, $clean, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiDbManageDatabasesDatabaseImportPost'
     *
     * @param  string $database Database. (required)
     * @param  \SplFileObject $sqlfile SQL file to import (can be gzipped). (required)
     * @param  bool|null $clean Clean database before importing. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiDbManageDatabasesDatabaseImportPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiDbManageDatabasesDatabaseImportPostRequest($database, $sqlfile, $clean = false, string $contentType = self::contentTypes['apiDbManageDatabasesDatabaseImportPost'][0])
    {

        // verify the required parameter 'database' is set
        if ($database === null || (is_array($database) && count($database) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $database when calling apiDbManageDatabasesDatabaseImportPost'
            );
        }

        // verify the required parameter 'sqlfile' is set
        if ($sqlfile === null || (is_array($sqlfile) && count($sqlfile) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sqlfile when calling apiDbManageDatabasesDatabaseImportPost'
            );
        }



        $resourcePath = '/api/db-manage/databases/{database}/import';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $clean,
            'clean', // param base name
            'boolean', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($database !== null) {
            $resourcePath = str_replace(
                '{' . 'database' . '}',
                ObjectSerializer::toPathValue($database),
                $resourcePath
            );
        }

        // form params
        $formDataProcessor = new FormDataProcessor();

        $formData = $formDataProcessor->prepare([
            'sqlfile' => $sqlfile,
        ]);

        $formParams = $formDataProcessor->flatten($formData);
        $multipart = $formDataProcessor->has_file;

        $multipart = true;
        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiDbManageDatabasesDatabaseOptimizePost
     *
     * Optimize database
     *
     * @param  string $database Database. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiDbManageDatabasesDatabaseOptimizePost'] to see the possible values for this operation
     *
     * @throws \COMPITAUT\DirectAdminAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \COMPITAUT\DirectAdminAPI\Model\WebDbTableActionResult[]|\COMPITAUT\DirectAdminAPI\Model\ApierrorUnauthorized|\COMPITAUT\DirectAdminAPI\Model\ApierrorLicenseOverused|\COMPITAUT\DirectAdminAPI\Model\ApierrorAccessDenied|\COMPITAUT\DirectAdminAPI\Model\ApierrorInternalError
     */
    public function apiDbManageDatabasesDatabaseOptimizePost($database, string $contentType = self::contentTypes['apiDbManageDatabasesDatabaseOptimizePost'][0])
    {
        list($response) = $this->apiDbManageDatabasesDatabaseOptimizePostWithHttpInfo($database, $contentType);
        return $response;
    }

    /**
     * Operation apiDbManageDatabasesDatabaseOptimizePostWithHttpInfo
     *
     * Optimize database
     *
     * @param  string $database Database. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiDbManageDatabasesDatabaseOptimizePost'] to see the possible values for this operation
     *
     * @throws \COMPITAUT\DirectAdminAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \COMPITAUT\DirectAdminAPI\Model\WebDbTableActionResult[]|\COMPITAUT\DirectAdminAPI\Model\ApierrorUnauthorized|\COMPITAUT\DirectAdminAPI\Model\ApierrorLicenseOverused|\COMPITAUT\DirectAdminAPI\Model\ApierrorAccessDenied|\COMPITAUT\DirectAdminAPI\Model\ApierrorInternalError, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiDbManageDatabasesDatabaseOptimizePostWithHttpInfo($database, string $contentType = self::contentTypes['apiDbManageDatabasesDatabaseOptimizePost'][0])
    {
        $request = $this->apiDbManageDatabasesDatabaseOptimizePostRequest($database, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\COMPITAUT\DirectAdminAPI\Model\WebDbTableActionResult[]',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorUnauthorized',
                        $request,
                        $response,
                    );
                case 402:
                    return $this->handleResponseWithDataType(
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorLicenseOverused',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorAccessDenied',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorInternalError',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\COMPITAUT\DirectAdminAPI\Model\WebDbTableActionResult[]',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\WebDbTableActionResult[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorUnauthorized',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 402:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorLicenseOverused',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorAccessDenied',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorInternalError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation apiDbManageDatabasesDatabaseOptimizePostAsync
     *
     * Optimize database
     *
     * @param  string $database Database. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiDbManageDatabasesDatabaseOptimizePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiDbManageDatabasesDatabaseOptimizePostAsync($database, string $contentType = self::contentTypes['apiDbManageDatabasesDatabaseOptimizePost'][0])
    {
        return $this->apiDbManageDatabasesDatabaseOptimizePostAsyncWithHttpInfo($database, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiDbManageDatabasesDatabaseOptimizePostAsyncWithHttpInfo
     *
     * Optimize database
     *
     * @param  string $database Database. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiDbManageDatabasesDatabaseOptimizePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiDbManageDatabasesDatabaseOptimizePostAsyncWithHttpInfo($database, string $contentType = self::contentTypes['apiDbManageDatabasesDatabaseOptimizePost'][0])
    {
        $returnType = '\COMPITAUT\DirectAdminAPI\Model\WebDbTableActionResult[]';
        $request = $this->apiDbManageDatabasesDatabaseOptimizePostRequest($database, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiDbManageDatabasesDatabaseOptimizePost'
     *
     * @param  string $database Database. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiDbManageDatabasesDatabaseOptimizePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiDbManageDatabasesDatabaseOptimizePostRequest($database, string $contentType = self::contentTypes['apiDbManageDatabasesDatabaseOptimizePost'][0])
    {

        // verify the required parameter 'database' is set
        if ($database === null || (is_array($database) && count($database) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $database when calling apiDbManageDatabasesDatabaseOptimizePost'
            );
        }


        $resourcePath = '/api/db-manage/databases/{database}/optimize';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($database !== null) {
            $resourcePath = str_replace(
                '{' . 'database' . '}',
                ObjectSerializer::toPathValue($database),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiDbManageDatabasesDatabaseRepairPost
     *
     * Repair database
     *
     * @param  string $database Database. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiDbManageDatabasesDatabaseRepairPost'] to see the possible values for this operation
     *
     * @throws \COMPITAUT\DirectAdminAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \COMPITAUT\DirectAdminAPI\Model\WebDbTableActionResult[]|\COMPITAUT\DirectAdminAPI\Model\ApierrorUnauthorized|\COMPITAUT\DirectAdminAPI\Model\ApierrorLicenseOverused|\COMPITAUT\DirectAdminAPI\Model\ApierrorAccessDenied|\COMPITAUT\DirectAdminAPI\Model\ApierrorInternalError
     */
    public function apiDbManageDatabasesDatabaseRepairPost($database, string $contentType = self::contentTypes['apiDbManageDatabasesDatabaseRepairPost'][0])
    {
        list($response) = $this->apiDbManageDatabasesDatabaseRepairPostWithHttpInfo($database, $contentType);
        return $response;
    }

    /**
     * Operation apiDbManageDatabasesDatabaseRepairPostWithHttpInfo
     *
     * Repair database
     *
     * @param  string $database Database. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiDbManageDatabasesDatabaseRepairPost'] to see the possible values for this operation
     *
     * @throws \COMPITAUT\DirectAdminAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \COMPITAUT\DirectAdminAPI\Model\WebDbTableActionResult[]|\COMPITAUT\DirectAdminAPI\Model\ApierrorUnauthorized|\COMPITAUT\DirectAdminAPI\Model\ApierrorLicenseOverused|\COMPITAUT\DirectAdminAPI\Model\ApierrorAccessDenied|\COMPITAUT\DirectAdminAPI\Model\ApierrorInternalError, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiDbManageDatabasesDatabaseRepairPostWithHttpInfo($database, string $contentType = self::contentTypes['apiDbManageDatabasesDatabaseRepairPost'][0])
    {
        $request = $this->apiDbManageDatabasesDatabaseRepairPostRequest($database, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\COMPITAUT\DirectAdminAPI\Model\WebDbTableActionResult[]',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorUnauthorized',
                        $request,
                        $response,
                    );
                case 402:
                    return $this->handleResponseWithDataType(
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorLicenseOverused',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorAccessDenied',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorInternalError',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\COMPITAUT\DirectAdminAPI\Model\WebDbTableActionResult[]',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\WebDbTableActionResult[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorUnauthorized',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 402:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorLicenseOverused',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorAccessDenied',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorInternalError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation apiDbManageDatabasesDatabaseRepairPostAsync
     *
     * Repair database
     *
     * @param  string $database Database. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiDbManageDatabasesDatabaseRepairPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiDbManageDatabasesDatabaseRepairPostAsync($database, string $contentType = self::contentTypes['apiDbManageDatabasesDatabaseRepairPost'][0])
    {
        return $this->apiDbManageDatabasesDatabaseRepairPostAsyncWithHttpInfo($database, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiDbManageDatabasesDatabaseRepairPostAsyncWithHttpInfo
     *
     * Repair database
     *
     * @param  string $database Database. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiDbManageDatabasesDatabaseRepairPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiDbManageDatabasesDatabaseRepairPostAsyncWithHttpInfo($database, string $contentType = self::contentTypes['apiDbManageDatabasesDatabaseRepairPost'][0])
    {
        $returnType = '\COMPITAUT\DirectAdminAPI\Model\WebDbTableActionResult[]';
        $request = $this->apiDbManageDatabasesDatabaseRepairPostRequest($database, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiDbManageDatabasesDatabaseRepairPost'
     *
     * @param  string $database Database. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiDbManageDatabasesDatabaseRepairPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiDbManageDatabasesDatabaseRepairPostRequest($database, string $contentType = self::contentTypes['apiDbManageDatabasesDatabaseRepairPost'][0])
    {

        // verify the required parameter 'database' is set
        if ($database === null || (is_array($database) && count($database) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $database when calling apiDbManageDatabasesDatabaseRepairPost'
            );
        }


        $resourcePath = '/api/db-manage/databases/{database}/repair';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($database !== null) {
            $resourcePath = str_replace(
                '{' . 'database' . '}',
                ObjectSerializer::toPathValue($database),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiDbManageUsersDbuserChangeHostsPost
     *
     * Change database user hosts
     *
     * @param  string $dbuser Database user. (required)
     * @param  string[] $data New user&#39;s host patterns. Valid values include wildcard &#39;%&#39;, &#39;localhost&#39;, IPv4 and IPv6 addresses. At least one host pattern must exist but no more than 30. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiDbManageUsersDbuserChangeHostsPost'] to see the possible values for this operation
     *
     * @throws \COMPITAUT\DirectAdminAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiDbManageUsersDbuserChangeHostsPost($dbuser, $data, string $contentType = self::contentTypes['apiDbManageUsersDbuserChangeHostsPost'][0])
    {
        $this->apiDbManageUsersDbuserChangeHostsPostWithHttpInfo($dbuser, $data, $contentType);
    }

    /**
     * Operation apiDbManageUsersDbuserChangeHostsPostWithHttpInfo
     *
     * Change database user hosts
     *
     * @param  string $dbuser Database user. (required)
     * @param  string[] $data New user&#39;s host patterns. Valid values include wildcard &#39;%&#39;, &#39;localhost&#39;, IPv4 and IPv6 addresses. At least one host pattern must exist but no more than 30. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiDbManageUsersDbuserChangeHostsPost'] to see the possible values for this operation
     *
     * @throws \COMPITAUT\DirectAdminAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiDbManageUsersDbuserChangeHostsPostWithHttpInfo($dbuser, $data, string $contentType = self::contentTypes['apiDbManageUsersDbuserChangeHostsPost'][0])
    {
        $request = $this->apiDbManageUsersDbuserChangeHostsPostRequest($dbuser, $data, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorBadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorUnauthorized',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 402:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorLicenseOverused',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorAccessDenied',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorNotFound',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorInternalError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation apiDbManageUsersDbuserChangeHostsPostAsync
     *
     * Change database user hosts
     *
     * @param  string $dbuser Database user. (required)
     * @param  string[] $data New user&#39;s host patterns. Valid values include wildcard &#39;%&#39;, &#39;localhost&#39;, IPv4 and IPv6 addresses. At least one host pattern must exist but no more than 30. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiDbManageUsersDbuserChangeHostsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiDbManageUsersDbuserChangeHostsPostAsync($dbuser, $data, string $contentType = self::contentTypes['apiDbManageUsersDbuserChangeHostsPost'][0])
    {
        return $this->apiDbManageUsersDbuserChangeHostsPostAsyncWithHttpInfo($dbuser, $data, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiDbManageUsersDbuserChangeHostsPostAsyncWithHttpInfo
     *
     * Change database user hosts
     *
     * @param  string $dbuser Database user. (required)
     * @param  string[] $data New user&#39;s host patterns. Valid values include wildcard &#39;%&#39;, &#39;localhost&#39;, IPv4 and IPv6 addresses. At least one host pattern must exist but no more than 30. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiDbManageUsersDbuserChangeHostsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiDbManageUsersDbuserChangeHostsPostAsyncWithHttpInfo($dbuser, $data, string $contentType = self::contentTypes['apiDbManageUsersDbuserChangeHostsPost'][0])
    {
        $returnType = '';
        $request = $this->apiDbManageUsersDbuserChangeHostsPostRequest($dbuser, $data, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiDbManageUsersDbuserChangeHostsPost'
     *
     * @param  string $dbuser Database user. (required)
     * @param  string[] $data New user&#39;s host patterns. Valid values include wildcard &#39;%&#39;, &#39;localhost&#39;, IPv4 and IPv6 addresses. At least one host pattern must exist but no more than 30. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiDbManageUsersDbuserChangeHostsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiDbManageUsersDbuserChangeHostsPostRequest($dbuser, $data, string $contentType = self::contentTypes['apiDbManageUsersDbuserChangeHostsPost'][0])
    {

        // verify the required parameter 'dbuser' is set
        if ($dbuser === null || (is_array($dbuser) && count($dbuser) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $dbuser when calling apiDbManageUsersDbuserChangeHostsPost'
            );
        }

        // verify the required parameter 'data' is set
        if ($data === null || (is_array($data) && count($data) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $data when calling apiDbManageUsersDbuserChangeHostsPost'
            );
        }


        $resourcePath = '/api/db-manage/users/{dbuser}/change-hosts';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($dbuser !== null) {
            $resourcePath = str_replace(
                '{' . 'dbuser' . '}',
                ObjectSerializer::toPathValue($dbuser),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($data)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($data));
            } else {
                $httpBody = $data;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiDbManageUsersDbuserChangePasswordPost
     *
     * Change database user password
     *
     * @param  string $dbuser Database user. (required)
     * @param  \COMPITAUT\DirectAdminAPI\Model\WebDbUserChangePasswordRequest $data Data. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiDbManageUsersDbuserChangePasswordPost'] to see the possible values for this operation
     *
     * @throws \COMPITAUT\DirectAdminAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiDbManageUsersDbuserChangePasswordPost($dbuser, $data, string $contentType = self::contentTypes['apiDbManageUsersDbuserChangePasswordPost'][0])
    {
        $this->apiDbManageUsersDbuserChangePasswordPostWithHttpInfo($dbuser, $data, $contentType);
    }

    /**
     * Operation apiDbManageUsersDbuserChangePasswordPostWithHttpInfo
     *
     * Change database user password
     *
     * @param  string $dbuser Database user. (required)
     * @param  \COMPITAUT\DirectAdminAPI\Model\WebDbUserChangePasswordRequest $data Data. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiDbManageUsersDbuserChangePasswordPost'] to see the possible values for this operation
     *
     * @throws \COMPITAUT\DirectAdminAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiDbManageUsersDbuserChangePasswordPostWithHttpInfo($dbuser, $data, string $contentType = self::contentTypes['apiDbManageUsersDbuserChangePasswordPost'][0])
    {
        $request = $this->apiDbManageUsersDbuserChangePasswordPostRequest($dbuser, $data, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorBadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorUnauthorized',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 402:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorLicenseOverused',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorAccessDenied',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorNotFound',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorPreHookError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorInternalError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation apiDbManageUsersDbuserChangePasswordPostAsync
     *
     * Change database user password
     *
     * @param  string $dbuser Database user. (required)
     * @param  \COMPITAUT\DirectAdminAPI\Model\WebDbUserChangePasswordRequest $data Data. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiDbManageUsersDbuserChangePasswordPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiDbManageUsersDbuserChangePasswordPostAsync($dbuser, $data, string $contentType = self::contentTypes['apiDbManageUsersDbuserChangePasswordPost'][0])
    {
        return $this->apiDbManageUsersDbuserChangePasswordPostAsyncWithHttpInfo($dbuser, $data, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiDbManageUsersDbuserChangePasswordPostAsyncWithHttpInfo
     *
     * Change database user password
     *
     * @param  string $dbuser Database user. (required)
     * @param  \COMPITAUT\DirectAdminAPI\Model\WebDbUserChangePasswordRequest $data Data. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiDbManageUsersDbuserChangePasswordPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiDbManageUsersDbuserChangePasswordPostAsyncWithHttpInfo($dbuser, $data, string $contentType = self::contentTypes['apiDbManageUsersDbuserChangePasswordPost'][0])
    {
        $returnType = '';
        $request = $this->apiDbManageUsersDbuserChangePasswordPostRequest($dbuser, $data, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiDbManageUsersDbuserChangePasswordPost'
     *
     * @param  string $dbuser Database user. (required)
     * @param  \COMPITAUT\DirectAdminAPI\Model\WebDbUserChangePasswordRequest $data Data. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiDbManageUsersDbuserChangePasswordPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiDbManageUsersDbuserChangePasswordPostRequest($dbuser, $data, string $contentType = self::contentTypes['apiDbManageUsersDbuserChangePasswordPost'][0])
    {

        // verify the required parameter 'dbuser' is set
        if ($dbuser === null || (is_array($dbuser) && count($dbuser) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $dbuser when calling apiDbManageUsersDbuserChangePasswordPost'
            );
        }

        // verify the required parameter 'data' is set
        if ($data === null || (is_array($data) && count($data) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $data when calling apiDbManageUsersDbuserChangePasswordPost'
            );
        }


        $resourcePath = '/api/db-manage/users/{dbuser}/change-password';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($dbuser !== null) {
            $resourcePath = str_replace(
                '{' . 'dbuser' . '}',
                ObjectSerializer::toPathValue($dbuser),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($data)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($data));
            } else {
                $httpBody = $data;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiDbManageUsersDbuserDatabasesDatabaseChangePrivsPut
     *
     * Set database privileges for dbuser
     *
     * @param  string $database Database. (required)
     * @param  string $dbuser Database user. (required)
     * @param  \COMPITAUT\DirectAdminAPI\Model\WebDbUserChangePrivsRequest $data Data. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiDbManageUsersDbuserDatabasesDatabaseChangePrivsPut'] to see the possible values for this operation
     *
     * @throws \COMPITAUT\DirectAdminAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiDbManageUsersDbuserDatabasesDatabaseChangePrivsPut($database, $dbuser, $data, string $contentType = self::contentTypes['apiDbManageUsersDbuserDatabasesDatabaseChangePrivsPut'][0])
    {
        $this->apiDbManageUsersDbuserDatabasesDatabaseChangePrivsPutWithHttpInfo($database, $dbuser, $data, $contentType);
    }

    /**
     * Operation apiDbManageUsersDbuserDatabasesDatabaseChangePrivsPutWithHttpInfo
     *
     * Set database privileges for dbuser
     *
     * @param  string $database Database. (required)
     * @param  string $dbuser Database user. (required)
     * @param  \COMPITAUT\DirectAdminAPI\Model\WebDbUserChangePrivsRequest $data Data. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiDbManageUsersDbuserDatabasesDatabaseChangePrivsPut'] to see the possible values for this operation
     *
     * @throws \COMPITAUT\DirectAdminAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiDbManageUsersDbuserDatabasesDatabaseChangePrivsPutWithHttpInfo($database, $dbuser, $data, string $contentType = self::contentTypes['apiDbManageUsersDbuserDatabasesDatabaseChangePrivsPut'][0])
    {
        $request = $this->apiDbManageUsersDbuserDatabasesDatabaseChangePrivsPutRequest($database, $dbuser, $data, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorBadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorUnauthorized',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 402:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorLicenseOverused',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorAccessDenied',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorNotFound',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorInternalError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation apiDbManageUsersDbuserDatabasesDatabaseChangePrivsPutAsync
     *
     * Set database privileges for dbuser
     *
     * @param  string $database Database. (required)
     * @param  string $dbuser Database user. (required)
     * @param  \COMPITAUT\DirectAdminAPI\Model\WebDbUserChangePrivsRequest $data Data. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiDbManageUsersDbuserDatabasesDatabaseChangePrivsPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiDbManageUsersDbuserDatabasesDatabaseChangePrivsPutAsync($database, $dbuser, $data, string $contentType = self::contentTypes['apiDbManageUsersDbuserDatabasesDatabaseChangePrivsPut'][0])
    {
        return $this->apiDbManageUsersDbuserDatabasesDatabaseChangePrivsPutAsyncWithHttpInfo($database, $dbuser, $data, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiDbManageUsersDbuserDatabasesDatabaseChangePrivsPutAsyncWithHttpInfo
     *
     * Set database privileges for dbuser
     *
     * @param  string $database Database. (required)
     * @param  string $dbuser Database user. (required)
     * @param  \COMPITAUT\DirectAdminAPI\Model\WebDbUserChangePrivsRequest $data Data. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiDbManageUsersDbuserDatabasesDatabaseChangePrivsPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiDbManageUsersDbuserDatabasesDatabaseChangePrivsPutAsyncWithHttpInfo($database, $dbuser, $data, string $contentType = self::contentTypes['apiDbManageUsersDbuserDatabasesDatabaseChangePrivsPut'][0])
    {
        $returnType = '';
        $request = $this->apiDbManageUsersDbuserDatabasesDatabaseChangePrivsPutRequest($database, $dbuser, $data, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiDbManageUsersDbuserDatabasesDatabaseChangePrivsPut'
     *
     * @param  string $database Database. (required)
     * @param  string $dbuser Database user. (required)
     * @param  \COMPITAUT\DirectAdminAPI\Model\WebDbUserChangePrivsRequest $data Data. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiDbManageUsersDbuserDatabasesDatabaseChangePrivsPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiDbManageUsersDbuserDatabasesDatabaseChangePrivsPutRequest($database, $dbuser, $data, string $contentType = self::contentTypes['apiDbManageUsersDbuserDatabasesDatabaseChangePrivsPut'][0])
    {

        // verify the required parameter 'database' is set
        if ($database === null || (is_array($database) && count($database) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $database when calling apiDbManageUsersDbuserDatabasesDatabaseChangePrivsPut'
            );
        }

        // verify the required parameter 'dbuser' is set
        if ($dbuser === null || (is_array($dbuser) && count($dbuser) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $dbuser when calling apiDbManageUsersDbuserDatabasesDatabaseChangePrivsPut'
            );
        }

        // verify the required parameter 'data' is set
        if ($data === null || (is_array($data) && count($data) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $data when calling apiDbManageUsersDbuserDatabasesDatabaseChangePrivsPut'
            );
        }


        $resourcePath = '/api/db-manage/users/{dbuser}/databases/{database}/change-privs';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($database !== null) {
            $resourcePath = str_replace(
                '{' . 'database' . '}',
                ObjectSerializer::toPathValue($database),
                $resourcePath
            );
        }
        // path params
        if ($dbuser !== null) {
            $resourcePath = str_replace(
                '{' . 'dbuser' . '}',
                ObjectSerializer::toPathValue($dbuser),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($data)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($data));
            } else {
                $httpBody = $data;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiDbManageUsersDbuserDelete
     *
     * Delete database user
     *
     * @param  string $dbuser Database user. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiDbManageUsersDbuserDelete'] to see the possible values for this operation
     *
     * @throws \COMPITAUT\DirectAdminAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiDbManageUsersDbuserDelete($dbuser, string $contentType = self::contentTypes['apiDbManageUsersDbuserDelete'][0])
    {
        $this->apiDbManageUsersDbuserDeleteWithHttpInfo($dbuser, $contentType);
    }

    /**
     * Operation apiDbManageUsersDbuserDeleteWithHttpInfo
     *
     * Delete database user
     *
     * @param  string $dbuser Database user. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiDbManageUsersDbuserDelete'] to see the possible values for this operation
     *
     * @throws \COMPITAUT\DirectAdminAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiDbManageUsersDbuserDeleteWithHttpInfo($dbuser, string $contentType = self::contentTypes['apiDbManageUsersDbuserDelete'][0])
    {
        $request = $this->apiDbManageUsersDbuserDeleteRequest($dbuser, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorUnauthorized',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 402:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorLicenseOverused',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorAccessDenied',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorInternalError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation apiDbManageUsersDbuserDeleteAsync
     *
     * Delete database user
     *
     * @param  string $dbuser Database user. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiDbManageUsersDbuserDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiDbManageUsersDbuserDeleteAsync($dbuser, string $contentType = self::contentTypes['apiDbManageUsersDbuserDelete'][0])
    {
        return $this->apiDbManageUsersDbuserDeleteAsyncWithHttpInfo($dbuser, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiDbManageUsersDbuserDeleteAsyncWithHttpInfo
     *
     * Delete database user
     *
     * @param  string $dbuser Database user. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiDbManageUsersDbuserDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiDbManageUsersDbuserDeleteAsyncWithHttpInfo($dbuser, string $contentType = self::contentTypes['apiDbManageUsersDbuserDelete'][0])
    {
        $returnType = '';
        $request = $this->apiDbManageUsersDbuserDeleteRequest($dbuser, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiDbManageUsersDbuserDelete'
     *
     * @param  string $dbuser Database user. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiDbManageUsersDbuserDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiDbManageUsersDbuserDeleteRequest($dbuser, string $contentType = self::contentTypes['apiDbManageUsersDbuserDelete'][0])
    {

        // verify the required parameter 'dbuser' is set
        if ($dbuser === null || (is_array($dbuser) && count($dbuser) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $dbuser when calling apiDbManageUsersDbuserDelete'
            );
        }


        $resourcePath = '/api/db-manage/users/{dbuser}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($dbuser !== null) {
            $resourcePath = str_replace(
                '{' . 'dbuser' . '}',
                ObjectSerializer::toPathValue($dbuser),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiDbShowDatabasesDatabaseGet
     *
     * Get Database metadata
     *
     * @param  string $database Database. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiDbShowDatabasesDatabaseGet'] to see the possible values for this operation
     *
     * @throws \COMPITAUT\DirectAdminAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \COMPITAUT\DirectAdminAPI\Model\WebDbDatabaseMetadata|\COMPITAUT\DirectAdminAPI\Model\ApierrorUnauthorized|\COMPITAUT\DirectAdminAPI\Model\ApierrorLicenseOverused|\COMPITAUT\DirectAdminAPI\Model\ApierrorAccessDenied|\COMPITAUT\DirectAdminAPI\Model\ApierrorNotFound|\COMPITAUT\DirectAdminAPI\Model\ApierrorInternalError
     */
    public function apiDbShowDatabasesDatabaseGet($database, string $contentType = self::contentTypes['apiDbShowDatabasesDatabaseGet'][0])
    {
        list($response) = $this->apiDbShowDatabasesDatabaseGetWithHttpInfo($database, $contentType);
        return $response;
    }

    /**
     * Operation apiDbShowDatabasesDatabaseGetWithHttpInfo
     *
     * Get Database metadata
     *
     * @param  string $database Database. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiDbShowDatabasesDatabaseGet'] to see the possible values for this operation
     *
     * @throws \COMPITAUT\DirectAdminAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \COMPITAUT\DirectAdminAPI\Model\WebDbDatabaseMetadata|\COMPITAUT\DirectAdminAPI\Model\ApierrorUnauthorized|\COMPITAUT\DirectAdminAPI\Model\ApierrorLicenseOverused|\COMPITAUT\DirectAdminAPI\Model\ApierrorAccessDenied|\COMPITAUT\DirectAdminAPI\Model\ApierrorNotFound|\COMPITAUT\DirectAdminAPI\Model\ApierrorInternalError, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiDbShowDatabasesDatabaseGetWithHttpInfo($database, string $contentType = self::contentTypes['apiDbShowDatabasesDatabaseGet'][0])
    {
        $request = $this->apiDbShowDatabasesDatabaseGetRequest($database, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\COMPITAUT\DirectAdminAPI\Model\WebDbDatabaseMetadata',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorUnauthorized',
                        $request,
                        $response,
                    );
                case 402:
                    return $this->handleResponseWithDataType(
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorLicenseOverused',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorAccessDenied',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorNotFound',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorInternalError',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\COMPITAUT\DirectAdminAPI\Model\WebDbDatabaseMetadata',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\WebDbDatabaseMetadata',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorUnauthorized',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 402:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorLicenseOverused',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorAccessDenied',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorNotFound',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorInternalError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation apiDbShowDatabasesDatabaseGetAsync
     *
     * Get Database metadata
     *
     * @param  string $database Database. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiDbShowDatabasesDatabaseGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiDbShowDatabasesDatabaseGetAsync($database, string $contentType = self::contentTypes['apiDbShowDatabasesDatabaseGet'][0])
    {
        return $this->apiDbShowDatabasesDatabaseGetAsyncWithHttpInfo($database, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiDbShowDatabasesDatabaseGetAsyncWithHttpInfo
     *
     * Get Database metadata
     *
     * @param  string $database Database. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiDbShowDatabasesDatabaseGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiDbShowDatabasesDatabaseGetAsyncWithHttpInfo($database, string $contentType = self::contentTypes['apiDbShowDatabasesDatabaseGet'][0])
    {
        $returnType = '\COMPITAUT\DirectAdminAPI\Model\WebDbDatabaseMetadata';
        $request = $this->apiDbShowDatabasesDatabaseGetRequest($database, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiDbShowDatabasesDatabaseGet'
     *
     * @param  string $database Database. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiDbShowDatabasesDatabaseGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiDbShowDatabasesDatabaseGetRequest($database, string $contentType = self::contentTypes['apiDbShowDatabasesDatabaseGet'][0])
    {

        // verify the required parameter 'database' is set
        if ($database === null || (is_array($database) && count($database) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $database when calling apiDbShowDatabasesDatabaseGet'
            );
        }


        $resourcePath = '/api/db-show/databases/{database}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($database !== null) {
            $resourcePath = str_replace(
                '{' . 'database' . '}',
                ObjectSerializer::toPathValue($database),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiDbShowDatabasesDatabaseUsersGet
     *
     * Get Database info
     *
     * @param  string $database Database. (required)
     * @param  bool|null $includeTemporary Include temporary users in the result. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiDbShowDatabasesDatabaseUsersGet'] to see the possible values for this operation
     *
     * @throws \COMPITAUT\DirectAdminAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \COMPITAUT\DirectAdminAPI\Model\WebDbDatabaseUser[]|\COMPITAUT\DirectAdminAPI\Model\ApierrorUnauthorized|\COMPITAUT\DirectAdminAPI\Model\ApierrorLicenseOverused|\COMPITAUT\DirectAdminAPI\Model\ApierrorAccessDenied|\COMPITAUT\DirectAdminAPI\Model\ApierrorNotFound|\COMPITAUT\DirectAdminAPI\Model\ApierrorInternalError
     */
    public function apiDbShowDatabasesDatabaseUsersGet($database, $includeTemporary = false, string $contentType = self::contentTypes['apiDbShowDatabasesDatabaseUsersGet'][0])
    {
        list($response) = $this->apiDbShowDatabasesDatabaseUsersGetWithHttpInfo($database, $includeTemporary, $contentType);
        return $response;
    }

    /**
     * Operation apiDbShowDatabasesDatabaseUsersGetWithHttpInfo
     *
     * Get Database info
     *
     * @param  string $database Database. (required)
     * @param  bool|null $includeTemporary Include temporary users in the result. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiDbShowDatabasesDatabaseUsersGet'] to see the possible values for this operation
     *
     * @throws \COMPITAUT\DirectAdminAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \COMPITAUT\DirectAdminAPI\Model\WebDbDatabaseUser[]|\COMPITAUT\DirectAdminAPI\Model\ApierrorUnauthorized|\COMPITAUT\DirectAdminAPI\Model\ApierrorLicenseOverused|\COMPITAUT\DirectAdminAPI\Model\ApierrorAccessDenied|\COMPITAUT\DirectAdminAPI\Model\ApierrorNotFound|\COMPITAUT\DirectAdminAPI\Model\ApierrorInternalError, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiDbShowDatabasesDatabaseUsersGetWithHttpInfo($database, $includeTemporary = false, string $contentType = self::contentTypes['apiDbShowDatabasesDatabaseUsersGet'][0])
    {
        $request = $this->apiDbShowDatabasesDatabaseUsersGetRequest($database, $includeTemporary, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\COMPITAUT\DirectAdminAPI\Model\WebDbDatabaseUser[]',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorUnauthorized',
                        $request,
                        $response,
                    );
                case 402:
                    return $this->handleResponseWithDataType(
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorLicenseOverused',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorAccessDenied',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorNotFound',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorInternalError',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\COMPITAUT\DirectAdminAPI\Model\WebDbDatabaseUser[]',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\WebDbDatabaseUser[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorUnauthorized',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 402:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorLicenseOverused',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorAccessDenied',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorNotFound',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorInternalError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation apiDbShowDatabasesDatabaseUsersGetAsync
     *
     * Get Database info
     *
     * @param  string $database Database. (required)
     * @param  bool|null $includeTemporary Include temporary users in the result. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiDbShowDatabasesDatabaseUsersGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiDbShowDatabasesDatabaseUsersGetAsync($database, $includeTemporary = false, string $contentType = self::contentTypes['apiDbShowDatabasesDatabaseUsersGet'][0])
    {
        return $this->apiDbShowDatabasesDatabaseUsersGetAsyncWithHttpInfo($database, $includeTemporary, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiDbShowDatabasesDatabaseUsersGetAsyncWithHttpInfo
     *
     * Get Database info
     *
     * @param  string $database Database. (required)
     * @param  bool|null $includeTemporary Include temporary users in the result. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiDbShowDatabasesDatabaseUsersGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiDbShowDatabasesDatabaseUsersGetAsyncWithHttpInfo($database, $includeTemporary = false, string $contentType = self::contentTypes['apiDbShowDatabasesDatabaseUsersGet'][0])
    {
        $returnType = '\COMPITAUT\DirectAdminAPI\Model\WebDbDatabaseUser[]';
        $request = $this->apiDbShowDatabasesDatabaseUsersGetRequest($database, $includeTemporary, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiDbShowDatabasesDatabaseUsersGet'
     *
     * @param  string $database Database. (required)
     * @param  bool|null $includeTemporary Include temporary users in the result. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiDbShowDatabasesDatabaseUsersGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiDbShowDatabasesDatabaseUsersGetRequest($database, $includeTemporary = false, string $contentType = self::contentTypes['apiDbShowDatabasesDatabaseUsersGet'][0])
    {

        // verify the required parameter 'database' is set
        if ($database === null || (is_array($database) && count($database) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $database when calling apiDbShowDatabasesDatabaseUsersGet'
            );
        }



        $resourcePath = '/api/db-show/databases/{database}/users';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $includeTemporary,
            'include-temporary', // param base name
            'boolean', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($database !== null) {
            $resourcePath = str_replace(
                '{' . 'database' . '}',
                ObjectSerializer::toPathValue($database),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiDbShowDatabasesGet
     *
     * Get Databases list
     *
     * @param  bool|null $noSize Do not compute size for the databases. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiDbShowDatabasesGet'] to see the possible values for this operation
     *
     * @throws \COMPITAUT\DirectAdminAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \COMPITAUT\DirectAdminAPI\Model\WebDbDatabaseListEntry[]|\COMPITAUT\DirectAdminAPI\Model\ApierrorUnauthorized|\COMPITAUT\DirectAdminAPI\Model\ApierrorLicenseOverused|\COMPITAUT\DirectAdminAPI\Model\ApierrorAccessDenied|\COMPITAUT\DirectAdminAPI\Model\ApierrorInternalError
     */
    public function apiDbShowDatabasesGet($noSize = false, string $contentType = self::contentTypes['apiDbShowDatabasesGet'][0])
    {
        list($response) = $this->apiDbShowDatabasesGetWithHttpInfo($noSize, $contentType);
        return $response;
    }

    /**
     * Operation apiDbShowDatabasesGetWithHttpInfo
     *
     * Get Databases list
     *
     * @param  bool|null $noSize Do not compute size for the databases. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiDbShowDatabasesGet'] to see the possible values for this operation
     *
     * @throws \COMPITAUT\DirectAdminAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \COMPITAUT\DirectAdminAPI\Model\WebDbDatabaseListEntry[]|\COMPITAUT\DirectAdminAPI\Model\ApierrorUnauthorized|\COMPITAUT\DirectAdminAPI\Model\ApierrorLicenseOverused|\COMPITAUT\DirectAdminAPI\Model\ApierrorAccessDenied|\COMPITAUT\DirectAdminAPI\Model\ApierrorInternalError, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiDbShowDatabasesGetWithHttpInfo($noSize = false, string $contentType = self::contentTypes['apiDbShowDatabasesGet'][0])
    {
        $request = $this->apiDbShowDatabasesGetRequest($noSize, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\COMPITAUT\DirectAdminAPI\Model\WebDbDatabaseListEntry[]',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorUnauthorized',
                        $request,
                        $response,
                    );
                case 402:
                    return $this->handleResponseWithDataType(
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorLicenseOverused',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorAccessDenied',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorInternalError',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\COMPITAUT\DirectAdminAPI\Model\WebDbDatabaseListEntry[]',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\WebDbDatabaseListEntry[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorUnauthorized',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 402:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorLicenseOverused',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorAccessDenied',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorInternalError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation apiDbShowDatabasesGetAsync
     *
     * Get Databases list
     *
     * @param  bool|null $noSize Do not compute size for the databases. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiDbShowDatabasesGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiDbShowDatabasesGetAsync($noSize = false, string $contentType = self::contentTypes['apiDbShowDatabasesGet'][0])
    {
        return $this->apiDbShowDatabasesGetAsyncWithHttpInfo($noSize, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiDbShowDatabasesGetAsyncWithHttpInfo
     *
     * Get Databases list
     *
     * @param  bool|null $noSize Do not compute size for the databases. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiDbShowDatabasesGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiDbShowDatabasesGetAsyncWithHttpInfo($noSize = false, string $contentType = self::contentTypes['apiDbShowDatabasesGet'][0])
    {
        $returnType = '\COMPITAUT\DirectAdminAPI\Model\WebDbDatabaseListEntry[]';
        $request = $this->apiDbShowDatabasesGetRequest($noSize, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiDbShowDatabasesGet'
     *
     * @param  bool|null $noSize Do not compute size for the databases. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiDbShowDatabasesGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiDbShowDatabasesGetRequest($noSize = false, string $contentType = self::contentTypes['apiDbShowDatabasesGet'][0])
    {



        $resourcePath = '/api/db-show/databases';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $noSize,
            'no-size', // param base name
            'boolean', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiDbShowInfoGet
     *
     * Database server info
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiDbShowInfoGet'] to see the possible values for this operation
     *
     * @throws \COMPITAUT\DirectAdminAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \COMPITAUT\DirectAdminAPI\Model\WebDbInfoResponse|\COMPITAUT\DirectAdminAPI\Model\ApierrorUnauthorized|\COMPITAUT\DirectAdminAPI\Model\ApierrorLicenseOverused|\COMPITAUT\DirectAdminAPI\Model\ApierrorAccessDenied|\COMPITAUT\DirectAdminAPI\Model\ApierrorInternalError
     */
    public function apiDbShowInfoGet(string $contentType = self::contentTypes['apiDbShowInfoGet'][0])
    {
        list($response) = $this->apiDbShowInfoGetWithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation apiDbShowInfoGetWithHttpInfo
     *
     * Database server info
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiDbShowInfoGet'] to see the possible values for this operation
     *
     * @throws \COMPITAUT\DirectAdminAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \COMPITAUT\DirectAdminAPI\Model\WebDbInfoResponse|\COMPITAUT\DirectAdminAPI\Model\ApierrorUnauthorized|\COMPITAUT\DirectAdminAPI\Model\ApierrorLicenseOverused|\COMPITAUT\DirectAdminAPI\Model\ApierrorAccessDenied|\COMPITAUT\DirectAdminAPI\Model\ApierrorInternalError, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiDbShowInfoGetWithHttpInfo(string $contentType = self::contentTypes['apiDbShowInfoGet'][0])
    {
        $request = $this->apiDbShowInfoGetRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\COMPITAUT\DirectAdminAPI\Model\WebDbInfoResponse',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorUnauthorized',
                        $request,
                        $response,
                    );
                case 402:
                    return $this->handleResponseWithDataType(
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorLicenseOverused',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorAccessDenied',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorInternalError',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\COMPITAUT\DirectAdminAPI\Model\WebDbInfoResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\WebDbInfoResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorUnauthorized',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 402:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorLicenseOverused',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorAccessDenied',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorInternalError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation apiDbShowInfoGetAsync
     *
     * Database server info
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiDbShowInfoGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiDbShowInfoGetAsync(string $contentType = self::contentTypes['apiDbShowInfoGet'][0])
    {
        return $this->apiDbShowInfoGetAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiDbShowInfoGetAsyncWithHttpInfo
     *
     * Database server info
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiDbShowInfoGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiDbShowInfoGetAsyncWithHttpInfo(string $contentType = self::contentTypes['apiDbShowInfoGet'][0])
    {
        $returnType = '\COMPITAUT\DirectAdminAPI\Model\WebDbInfoResponse';
        $request = $this->apiDbShowInfoGetRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiDbShowInfoGet'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiDbShowInfoGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiDbShowInfoGetRequest(string $contentType = self::contentTypes['apiDbShowInfoGet'][0])
    {


        $resourcePath = '/api/db-show/info';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiDbShowUsersDbuserDatabasesGet
     *
     * Get user databases
     *
     * @param  string $dbuser Database user. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiDbShowUsersDbuserDatabasesGet'] to see the possible values for this operation
     *
     * @throws \COMPITAUT\DirectAdminAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \COMPITAUT\DirectAdminAPI\Model\WebDbUserDatabase[]|\COMPITAUT\DirectAdminAPI\Model\ApierrorUnauthorized|\COMPITAUT\DirectAdminAPI\Model\ApierrorLicenseOverused|\COMPITAUT\DirectAdminAPI\Model\ApierrorAccessDenied|\COMPITAUT\DirectAdminAPI\Model\ApierrorNotFound|\COMPITAUT\DirectAdminAPI\Model\ApierrorInternalError
     */
    public function apiDbShowUsersDbuserDatabasesGet($dbuser, string $contentType = self::contentTypes['apiDbShowUsersDbuserDatabasesGet'][0])
    {
        list($response) = $this->apiDbShowUsersDbuserDatabasesGetWithHttpInfo($dbuser, $contentType);
        return $response;
    }

    /**
     * Operation apiDbShowUsersDbuserDatabasesGetWithHttpInfo
     *
     * Get user databases
     *
     * @param  string $dbuser Database user. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiDbShowUsersDbuserDatabasesGet'] to see the possible values for this operation
     *
     * @throws \COMPITAUT\DirectAdminAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \COMPITAUT\DirectAdminAPI\Model\WebDbUserDatabase[]|\COMPITAUT\DirectAdminAPI\Model\ApierrorUnauthorized|\COMPITAUT\DirectAdminAPI\Model\ApierrorLicenseOverused|\COMPITAUT\DirectAdminAPI\Model\ApierrorAccessDenied|\COMPITAUT\DirectAdminAPI\Model\ApierrorNotFound|\COMPITAUT\DirectAdminAPI\Model\ApierrorInternalError, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiDbShowUsersDbuserDatabasesGetWithHttpInfo($dbuser, string $contentType = self::contentTypes['apiDbShowUsersDbuserDatabasesGet'][0])
    {
        $request = $this->apiDbShowUsersDbuserDatabasesGetRequest($dbuser, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\COMPITAUT\DirectAdminAPI\Model\WebDbUserDatabase[]',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorUnauthorized',
                        $request,
                        $response,
                    );
                case 402:
                    return $this->handleResponseWithDataType(
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorLicenseOverused',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorAccessDenied',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorNotFound',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorInternalError',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\COMPITAUT\DirectAdminAPI\Model\WebDbUserDatabase[]',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\WebDbUserDatabase[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorUnauthorized',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 402:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorLicenseOverused',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorAccessDenied',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorNotFound',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorInternalError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation apiDbShowUsersDbuserDatabasesGetAsync
     *
     * Get user databases
     *
     * @param  string $dbuser Database user. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiDbShowUsersDbuserDatabasesGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiDbShowUsersDbuserDatabasesGetAsync($dbuser, string $contentType = self::contentTypes['apiDbShowUsersDbuserDatabasesGet'][0])
    {
        return $this->apiDbShowUsersDbuserDatabasesGetAsyncWithHttpInfo($dbuser, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiDbShowUsersDbuserDatabasesGetAsyncWithHttpInfo
     *
     * Get user databases
     *
     * @param  string $dbuser Database user. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiDbShowUsersDbuserDatabasesGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiDbShowUsersDbuserDatabasesGetAsyncWithHttpInfo($dbuser, string $contentType = self::contentTypes['apiDbShowUsersDbuserDatabasesGet'][0])
    {
        $returnType = '\COMPITAUT\DirectAdminAPI\Model\WebDbUserDatabase[]';
        $request = $this->apiDbShowUsersDbuserDatabasesGetRequest($dbuser, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiDbShowUsersDbuserDatabasesGet'
     *
     * @param  string $dbuser Database user. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiDbShowUsersDbuserDatabasesGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiDbShowUsersDbuserDatabasesGetRequest($dbuser, string $contentType = self::contentTypes['apiDbShowUsersDbuserDatabasesGet'][0])
    {

        // verify the required parameter 'dbuser' is set
        if ($dbuser === null || (is_array($dbuser) && count($dbuser) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $dbuser when calling apiDbShowUsersDbuserDatabasesGet'
            );
        }


        $resourcePath = '/api/db-show/users/{dbuser}/databases';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($dbuser !== null) {
            $resourcePath = str_replace(
                '{' . 'dbuser' . '}',
                ObjectSerializer::toPathValue($dbuser),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiDbShowUsersDbuserGet
     *
     * Get User
     *
     * @param  string $dbuser Database user. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiDbShowUsersDbuserGet'] to see the possible values for this operation
     *
     * @throws \COMPITAUT\DirectAdminAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \COMPITAUT\DirectAdminAPI\Model\WebDbUser|\COMPITAUT\DirectAdminAPI\Model\ApierrorUnauthorized|\COMPITAUT\DirectAdminAPI\Model\ApierrorLicenseOverused|\COMPITAUT\DirectAdminAPI\Model\ApierrorAccessDenied|\COMPITAUT\DirectAdminAPI\Model\ApierrorNotFound|\COMPITAUT\DirectAdminAPI\Model\ApierrorInternalError
     */
    public function apiDbShowUsersDbuserGet($dbuser, string $contentType = self::contentTypes['apiDbShowUsersDbuserGet'][0])
    {
        list($response) = $this->apiDbShowUsersDbuserGetWithHttpInfo($dbuser, $contentType);
        return $response;
    }

    /**
     * Operation apiDbShowUsersDbuserGetWithHttpInfo
     *
     * Get User
     *
     * @param  string $dbuser Database user. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiDbShowUsersDbuserGet'] to see the possible values for this operation
     *
     * @throws \COMPITAUT\DirectAdminAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \COMPITAUT\DirectAdminAPI\Model\WebDbUser|\COMPITAUT\DirectAdminAPI\Model\ApierrorUnauthorized|\COMPITAUT\DirectAdminAPI\Model\ApierrorLicenseOverused|\COMPITAUT\DirectAdminAPI\Model\ApierrorAccessDenied|\COMPITAUT\DirectAdminAPI\Model\ApierrorNotFound|\COMPITAUT\DirectAdminAPI\Model\ApierrorInternalError, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiDbShowUsersDbuserGetWithHttpInfo($dbuser, string $contentType = self::contentTypes['apiDbShowUsersDbuserGet'][0])
    {
        $request = $this->apiDbShowUsersDbuserGetRequest($dbuser, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\COMPITAUT\DirectAdminAPI\Model\WebDbUser',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorUnauthorized',
                        $request,
                        $response,
                    );
                case 402:
                    return $this->handleResponseWithDataType(
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorLicenseOverused',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorAccessDenied',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorNotFound',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorInternalError',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\COMPITAUT\DirectAdminAPI\Model\WebDbUser',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\WebDbUser',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorUnauthorized',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 402:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorLicenseOverused',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorAccessDenied',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorNotFound',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorInternalError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation apiDbShowUsersDbuserGetAsync
     *
     * Get User
     *
     * @param  string $dbuser Database user. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiDbShowUsersDbuserGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiDbShowUsersDbuserGetAsync($dbuser, string $contentType = self::contentTypes['apiDbShowUsersDbuserGet'][0])
    {
        return $this->apiDbShowUsersDbuserGetAsyncWithHttpInfo($dbuser, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiDbShowUsersDbuserGetAsyncWithHttpInfo
     *
     * Get User
     *
     * @param  string $dbuser Database user. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiDbShowUsersDbuserGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiDbShowUsersDbuserGetAsyncWithHttpInfo($dbuser, string $contentType = self::contentTypes['apiDbShowUsersDbuserGet'][0])
    {
        $returnType = '\COMPITAUT\DirectAdminAPI\Model\WebDbUser';
        $request = $this->apiDbShowUsersDbuserGetRequest($dbuser, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiDbShowUsersDbuserGet'
     *
     * @param  string $dbuser Database user. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiDbShowUsersDbuserGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiDbShowUsersDbuserGetRequest($dbuser, string $contentType = self::contentTypes['apiDbShowUsersDbuserGet'][0])
    {

        // verify the required parameter 'dbuser' is set
        if ($dbuser === null || (is_array($dbuser) && count($dbuser) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $dbuser when calling apiDbShowUsersDbuserGet'
            );
        }


        $resourcePath = '/api/db-show/users/{dbuser}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($dbuser !== null) {
            $resourcePath = str_replace(
                '{' . 'dbuser' . '}',
                ObjectSerializer::toPathValue($dbuser),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiDbShowUsersGet
     *
     * Get Users
     *
     * @param  bool|null $includeTemporary Include temporary users in the result. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiDbShowUsersGet'] to see the possible values for this operation
     *
     * @throws \COMPITAUT\DirectAdminAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \COMPITAUT\DirectAdminAPI\Model\WebDbUser[]|\COMPITAUT\DirectAdminAPI\Model\ApierrorUnauthorized|\COMPITAUT\DirectAdminAPI\Model\ApierrorLicenseOverused|\COMPITAUT\DirectAdminAPI\Model\ApierrorAccessDenied|\COMPITAUT\DirectAdminAPI\Model\ApierrorInternalError
     */
    public function apiDbShowUsersGet($includeTemporary = false, string $contentType = self::contentTypes['apiDbShowUsersGet'][0])
    {
        list($response) = $this->apiDbShowUsersGetWithHttpInfo($includeTemporary, $contentType);
        return $response;
    }

    /**
     * Operation apiDbShowUsersGetWithHttpInfo
     *
     * Get Users
     *
     * @param  bool|null $includeTemporary Include temporary users in the result. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiDbShowUsersGet'] to see the possible values for this operation
     *
     * @throws \COMPITAUT\DirectAdminAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \COMPITAUT\DirectAdminAPI\Model\WebDbUser[]|\COMPITAUT\DirectAdminAPI\Model\ApierrorUnauthorized|\COMPITAUT\DirectAdminAPI\Model\ApierrorLicenseOverused|\COMPITAUT\DirectAdminAPI\Model\ApierrorAccessDenied|\COMPITAUT\DirectAdminAPI\Model\ApierrorInternalError, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiDbShowUsersGetWithHttpInfo($includeTemporary = false, string $contentType = self::contentTypes['apiDbShowUsersGet'][0])
    {
        $request = $this->apiDbShowUsersGetRequest($includeTemporary, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\COMPITAUT\DirectAdminAPI\Model\WebDbUser[]',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorUnauthorized',
                        $request,
                        $response,
                    );
                case 402:
                    return $this->handleResponseWithDataType(
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorLicenseOverused',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorAccessDenied',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorInternalError',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\COMPITAUT\DirectAdminAPI\Model\WebDbUser[]',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\WebDbUser[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorUnauthorized',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 402:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorLicenseOverused',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorAccessDenied',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorInternalError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation apiDbShowUsersGetAsync
     *
     * Get Users
     *
     * @param  bool|null $includeTemporary Include temporary users in the result. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiDbShowUsersGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiDbShowUsersGetAsync($includeTemporary = false, string $contentType = self::contentTypes['apiDbShowUsersGet'][0])
    {
        return $this->apiDbShowUsersGetAsyncWithHttpInfo($includeTemporary, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiDbShowUsersGetAsyncWithHttpInfo
     *
     * Get Users
     *
     * @param  bool|null $includeTemporary Include temporary users in the result. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiDbShowUsersGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiDbShowUsersGetAsyncWithHttpInfo($includeTemporary = false, string $contentType = self::contentTypes['apiDbShowUsersGet'][0])
    {
        $returnType = '\COMPITAUT\DirectAdminAPI\Model\WebDbUser[]';
        $request = $this->apiDbShowUsersGetRequest($includeTemporary, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiDbShowUsersGet'
     *
     * @param  bool|null $includeTemporary Include temporary users in the result. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiDbShowUsersGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiDbShowUsersGetRequest($includeTemporary = false, string $contentType = self::contentTypes['apiDbShowUsersGet'][0])
    {



        $resourcePath = '/api/db-show/users';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $includeTemporary,
            'include-temporary', // param base name
            'boolean', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiPhpmyadminSsoAccountAccessPost
     *
     * Create PhpMyAdmin single sign-on URL for user account access.
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiPhpmyadminSsoAccountAccessPost'] to see the possible values for this operation
     *
     * @throws \COMPITAUT\DirectAdminAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \COMPITAUT\DirectAdminAPI\Model\WebPhpmyadminSSOResponse|\COMPITAUT\DirectAdminAPI\Model\ApierrorUnauthorized|\COMPITAUT\DirectAdminAPI\Model\ApierrorLicenseOverused|\COMPITAUT\DirectAdminAPI\Model\ApierrorAccessDenied|\COMPITAUT\DirectAdminAPI\Model\ApierrorInternalError
     */
    public function apiPhpmyadminSsoAccountAccessPost(string $contentType = self::contentTypes['apiPhpmyadminSsoAccountAccessPost'][0])
    {
        list($response) = $this->apiPhpmyadminSsoAccountAccessPostWithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation apiPhpmyadminSsoAccountAccessPostWithHttpInfo
     *
     * Create PhpMyAdmin single sign-on URL for user account access.
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiPhpmyadminSsoAccountAccessPost'] to see the possible values for this operation
     *
     * @throws \COMPITAUT\DirectAdminAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \COMPITAUT\DirectAdminAPI\Model\WebPhpmyadminSSOResponse|\COMPITAUT\DirectAdminAPI\Model\ApierrorUnauthorized|\COMPITAUT\DirectAdminAPI\Model\ApierrorLicenseOverused|\COMPITAUT\DirectAdminAPI\Model\ApierrorAccessDenied|\COMPITAUT\DirectAdminAPI\Model\ApierrorInternalError, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiPhpmyadminSsoAccountAccessPostWithHttpInfo(string $contentType = self::contentTypes['apiPhpmyadminSsoAccountAccessPost'][0])
    {
        $request = $this->apiPhpmyadminSsoAccountAccessPostRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\COMPITAUT\DirectAdminAPI\Model\WebPhpmyadminSSOResponse',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorUnauthorized',
                        $request,
                        $response,
                    );
                case 402:
                    return $this->handleResponseWithDataType(
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorLicenseOverused',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorAccessDenied',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorInternalError',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\COMPITAUT\DirectAdminAPI\Model\WebPhpmyadminSSOResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\WebPhpmyadminSSOResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorUnauthorized',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 402:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorLicenseOverused',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorAccessDenied',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorInternalError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation apiPhpmyadminSsoAccountAccessPostAsync
     *
     * Create PhpMyAdmin single sign-on URL for user account access.
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiPhpmyadminSsoAccountAccessPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiPhpmyadminSsoAccountAccessPostAsync(string $contentType = self::contentTypes['apiPhpmyadminSsoAccountAccessPost'][0])
    {
        return $this->apiPhpmyadminSsoAccountAccessPostAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiPhpmyadminSsoAccountAccessPostAsyncWithHttpInfo
     *
     * Create PhpMyAdmin single sign-on URL for user account access.
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiPhpmyadminSsoAccountAccessPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiPhpmyadminSsoAccountAccessPostAsyncWithHttpInfo(string $contentType = self::contentTypes['apiPhpmyadminSsoAccountAccessPost'][0])
    {
        $returnType = '\COMPITAUT\DirectAdminAPI\Model\WebPhpmyadminSSOResponse';
        $request = $this->apiPhpmyadminSsoAccountAccessPostRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiPhpmyadminSsoAccountAccessPost'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiPhpmyadminSsoAccountAccessPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiPhpmyadminSsoAccountAccessPostRequest(string $contentType = self::contentTypes['apiPhpmyadminSsoAccountAccessPost'][0])
    {


        $resourcePath = '/api/phpmyadmin-sso/account-access';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiPhpmyadminSsoDatabaseAccessDatabasePost
     *
     * Create PhpMyAdmin single sign-on URL for single DB access.
     *
     * @param  string $database Database name (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiPhpmyadminSsoDatabaseAccessDatabasePost'] to see the possible values for this operation
     *
     * @throws \COMPITAUT\DirectAdminAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \COMPITAUT\DirectAdminAPI\Model\WebPhpmyadminSSOResponse|\COMPITAUT\DirectAdminAPI\Model\ApierrorUnauthorized|\COMPITAUT\DirectAdminAPI\Model\ApierrorLicenseOverused|\COMPITAUT\DirectAdminAPI\Model\ApierrorAccessDenied|\COMPITAUT\DirectAdminAPI\Model\ApierrorNotFound|\COMPITAUT\DirectAdminAPI\Model\ApierrorInternalError
     */
    public function apiPhpmyadminSsoDatabaseAccessDatabasePost($database, string $contentType = self::contentTypes['apiPhpmyadminSsoDatabaseAccessDatabasePost'][0])
    {
        list($response) = $this->apiPhpmyadminSsoDatabaseAccessDatabasePostWithHttpInfo($database, $contentType);
        return $response;
    }

    /**
     * Operation apiPhpmyadminSsoDatabaseAccessDatabasePostWithHttpInfo
     *
     * Create PhpMyAdmin single sign-on URL for single DB access.
     *
     * @param  string $database Database name (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiPhpmyadminSsoDatabaseAccessDatabasePost'] to see the possible values for this operation
     *
     * @throws \COMPITAUT\DirectAdminAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \COMPITAUT\DirectAdminAPI\Model\WebPhpmyadminSSOResponse|\COMPITAUT\DirectAdminAPI\Model\ApierrorUnauthorized|\COMPITAUT\DirectAdminAPI\Model\ApierrorLicenseOverused|\COMPITAUT\DirectAdminAPI\Model\ApierrorAccessDenied|\COMPITAUT\DirectAdminAPI\Model\ApierrorNotFound|\COMPITAUT\DirectAdminAPI\Model\ApierrorInternalError, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiPhpmyadminSsoDatabaseAccessDatabasePostWithHttpInfo($database, string $contentType = self::contentTypes['apiPhpmyadminSsoDatabaseAccessDatabasePost'][0])
    {
        $request = $this->apiPhpmyadminSsoDatabaseAccessDatabasePostRequest($database, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\COMPITAUT\DirectAdminAPI\Model\WebPhpmyadminSSOResponse',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorUnauthorized',
                        $request,
                        $response,
                    );
                case 402:
                    return $this->handleResponseWithDataType(
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorLicenseOverused',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorAccessDenied',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorNotFound',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorInternalError',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\COMPITAUT\DirectAdminAPI\Model\WebPhpmyadminSSOResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\WebPhpmyadminSSOResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorUnauthorized',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 402:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorLicenseOverused',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorAccessDenied',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorNotFound',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorInternalError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation apiPhpmyadminSsoDatabaseAccessDatabasePostAsync
     *
     * Create PhpMyAdmin single sign-on URL for single DB access.
     *
     * @param  string $database Database name (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiPhpmyadminSsoDatabaseAccessDatabasePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiPhpmyadminSsoDatabaseAccessDatabasePostAsync($database, string $contentType = self::contentTypes['apiPhpmyadminSsoDatabaseAccessDatabasePost'][0])
    {
        return $this->apiPhpmyadminSsoDatabaseAccessDatabasePostAsyncWithHttpInfo($database, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiPhpmyadminSsoDatabaseAccessDatabasePostAsyncWithHttpInfo
     *
     * Create PhpMyAdmin single sign-on URL for single DB access.
     *
     * @param  string $database Database name (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiPhpmyadminSsoDatabaseAccessDatabasePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiPhpmyadminSsoDatabaseAccessDatabasePostAsyncWithHttpInfo($database, string $contentType = self::contentTypes['apiPhpmyadminSsoDatabaseAccessDatabasePost'][0])
    {
        $returnType = '\COMPITAUT\DirectAdminAPI\Model\WebPhpmyadminSSOResponse';
        $request = $this->apiPhpmyadminSsoDatabaseAccessDatabasePostRequest($database, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiPhpmyadminSsoDatabaseAccessDatabasePost'
     *
     * @param  string $database Database name (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiPhpmyadminSsoDatabaseAccessDatabasePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiPhpmyadminSsoDatabaseAccessDatabasePostRequest($database, string $contentType = self::contentTypes['apiPhpmyadminSsoDatabaseAccessDatabasePost'][0])
    {

        // verify the required parameter 'database' is set
        if ($database === null || (is_array($database) && count($database) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $database when calling apiPhpmyadminSsoDatabaseAccessDatabasePost'
            );
        }


        $resourcePath = '/api/phpmyadmin-sso/database-access/{database}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($database !== null) {
            $resourcePath = str_replace(
                '{' . 'database' . '}',
                ObjectSerializer::toPathValue($database),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }

    private function handleResponseWithDataType(
        string $dataType,
        RequestInterface $request,
        ResponseInterface $response
    ): array {
        if ($dataType === '\SplFileObject') {
            $content = $response->getBody(); //stream goes to serializer
        } else {
            $content = (string) $response->getBody();
            if ($dataType !== 'string') {
                try {
                    $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                } catch (\JsonException $exception) {
                    throw new ApiException(
                        sprintf(
                            'Error JSON decoding server response (%s)',
                            $request->getUri()
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                        $content
                    );
                }
            }
        }

        return [
            ObjectSerializer::deserialize($content, $dataType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    private function responseWithinRangeCode(
        string $rangeCode,
        int $statusCode
    ): bool {
        $left = (int) ($rangeCode[0].'00');
        $right = (int) ($rangeCode[0].'99');

        return $statusCode >= $left && $statusCode <= $right;
    }
}
