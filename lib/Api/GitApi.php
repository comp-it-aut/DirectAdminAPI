<?php
/**
 * GitApi
 * PHP version 8.1
 *
 * @category Class
 * @package  COMPITAUT\DirectAdminAPI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Swagger DirectAdmin API
 *
 * Swagger API for DirectAdmin server
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@directadmin.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace COMPITAUT\DirectAdminAPI\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Psr\Http\Message\RequestInterface;
use Psr\Http\Message\ResponseInterface;
use COMPITAUT\DirectAdminAPI\ApiException;
use COMPITAUT\DirectAdminAPI\Configuration;
use COMPITAUT\DirectAdminAPI\FormDataProcessor;
use COMPITAUT\DirectAdminAPI\HeaderSelector;
use COMPITAUT\DirectAdminAPI\ObjectSerializer;

/**
 * GitApi Class Doc Comment
 *
 * @category Class
 * @package  COMPITAUT\DirectAdminAPI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class GitApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'apiGitDomainDomainGet' => [
            'application/json',
        ],
        'apiGitDomainDomainPost' => [
            'application/json',
        ],
        'apiGitUserUsernameUuidUuidWebhookPost' => [
            'application/json',
        ],
        'apiGitUuidUuidBranchBranchGet' => [
            'application/json',
        ],
        'apiGitUuidUuidCommitCommitGet' => [
            'application/json',
        ],
        'apiGitUuidUuidDelete' => [
            'application/json',
        ],
        'apiGitUuidUuidDeployPost' => [
            'application/json',
        ],
        'apiGitUuidUuidFetchPost' => [
            'application/json',
        ],
        'apiGitUuidUuidGet' => [
            'application/json',
        ],
        'apiGitUuidUuidPut' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ?ClientInterface $client = null,
        ?Configuration $config = null,
        ?HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation apiGitDomainDomainGet
     *
     * Returns information about all the repositories under the user&#39;s domain
     *
     * @param  string $domain Domain (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiGitDomainDomainGet'] to see the possible values for this operation
     *
     * @throws \COMPITAUT\DirectAdminAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \COMPITAUT\DirectAdminAPI\Model\WebGitRepositoryResult[]|\COMPITAUT\DirectAdminAPI\Model\ApierrorUnauthorized|\COMPITAUT\DirectAdminAPI\Model\ApierrorLicenseOverused|\COMPITAUT\DirectAdminAPI\Model\ApierrorAccessDenied|\COMPITAUT\DirectAdminAPI\Model\ApierrorInternalError
     */
    public function apiGitDomainDomainGet($domain, string $contentType = self::contentTypes['apiGitDomainDomainGet'][0])
    {
        list($response) = $this->apiGitDomainDomainGetWithHttpInfo($domain, $contentType);
        return $response;
    }

    /**
     * Operation apiGitDomainDomainGetWithHttpInfo
     *
     * Returns information about all the repositories under the user&#39;s domain
     *
     * @param  string $domain Domain (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiGitDomainDomainGet'] to see the possible values for this operation
     *
     * @throws \COMPITAUT\DirectAdminAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \COMPITAUT\DirectAdminAPI\Model\WebGitRepositoryResult[]|\COMPITAUT\DirectAdminAPI\Model\ApierrorUnauthorized|\COMPITAUT\DirectAdminAPI\Model\ApierrorLicenseOverused|\COMPITAUT\DirectAdminAPI\Model\ApierrorAccessDenied|\COMPITAUT\DirectAdminAPI\Model\ApierrorInternalError, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiGitDomainDomainGetWithHttpInfo($domain, string $contentType = self::contentTypes['apiGitDomainDomainGet'][0])
    {
        $request = $this->apiGitDomainDomainGetRequest($domain, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\COMPITAUT\DirectAdminAPI\Model\WebGitRepositoryResult[]',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorUnauthorized',
                        $request,
                        $response,
                    );
                case 402:
                    return $this->handleResponseWithDataType(
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorLicenseOverused',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorAccessDenied',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorInternalError',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\COMPITAUT\DirectAdminAPI\Model\WebGitRepositoryResult[]',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\WebGitRepositoryResult[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorUnauthorized',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 402:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorLicenseOverused',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorAccessDenied',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorInternalError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation apiGitDomainDomainGetAsync
     *
     * Returns information about all the repositories under the user&#39;s domain
     *
     * @param  string $domain Domain (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiGitDomainDomainGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiGitDomainDomainGetAsync($domain, string $contentType = self::contentTypes['apiGitDomainDomainGet'][0])
    {
        return $this->apiGitDomainDomainGetAsyncWithHttpInfo($domain, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiGitDomainDomainGetAsyncWithHttpInfo
     *
     * Returns information about all the repositories under the user&#39;s domain
     *
     * @param  string $domain Domain (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiGitDomainDomainGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiGitDomainDomainGetAsyncWithHttpInfo($domain, string $contentType = self::contentTypes['apiGitDomainDomainGet'][0])
    {
        $returnType = '\COMPITAUT\DirectAdminAPI\Model\WebGitRepositoryResult[]';
        $request = $this->apiGitDomainDomainGetRequest($domain, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiGitDomainDomainGet'
     *
     * @param  string $domain Domain (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiGitDomainDomainGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiGitDomainDomainGetRequest($domain, string $contentType = self::contentTypes['apiGitDomainDomainGet'][0])
    {

        // verify the required parameter 'domain' is set
        if ($domain === null || (is_array($domain) && count($domain) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $domain when calling apiGitDomainDomainGet'
            );
        }


        $resourcePath = '/api/git/domain/{domain}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($domain !== null) {
            $resourcePath = str_replace(
                '{' . 'domain' . '}',
                ObjectSerializer::toPathValue($domain),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiGitDomainDomainPost
     *
     * Initializes a repository or clones a remote one
     *
     * @param  string $domain Domain (required)
     * @param  \COMPITAUT\DirectAdminAPI\Model\WebGitCreateParameters $payload payload (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiGitDomainDomainPost'] to see the possible values for this operation
     *
     * @throws \COMPITAUT\DirectAdminAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \COMPITAUT\DirectAdminAPI\Model\WebGitRepositoryResult|\COMPITAUT\DirectAdminAPI\Model\ApierrorBadRequest|\COMPITAUT\DirectAdminAPI\Model\ApierrorUnauthorized|\COMPITAUT\DirectAdminAPI\Model\ApierrorLicenseOverused|\COMPITAUT\DirectAdminAPI\Model\ApierrorAccessDenied|\COMPITAUT\DirectAdminAPI\Model\ApierrorGitExecError|\COMPITAUT\DirectAdminAPI\Model\ApierrorInternalError
     */
    public function apiGitDomainDomainPost($domain, $payload, string $contentType = self::contentTypes['apiGitDomainDomainPost'][0])
    {
        list($response) = $this->apiGitDomainDomainPostWithHttpInfo($domain, $payload, $contentType);
        return $response;
    }

    /**
     * Operation apiGitDomainDomainPostWithHttpInfo
     *
     * Initializes a repository or clones a remote one
     *
     * @param  string $domain Domain (required)
     * @param  \COMPITAUT\DirectAdminAPI\Model\WebGitCreateParameters $payload payload (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiGitDomainDomainPost'] to see the possible values for this operation
     *
     * @throws \COMPITAUT\DirectAdminAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \COMPITAUT\DirectAdminAPI\Model\WebGitRepositoryResult|\COMPITAUT\DirectAdminAPI\Model\ApierrorBadRequest|\COMPITAUT\DirectAdminAPI\Model\ApierrorUnauthorized|\COMPITAUT\DirectAdminAPI\Model\ApierrorLicenseOverused|\COMPITAUT\DirectAdminAPI\Model\ApierrorAccessDenied|\COMPITAUT\DirectAdminAPI\Model\ApierrorGitExecError|\COMPITAUT\DirectAdminAPI\Model\ApierrorInternalError, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiGitDomainDomainPostWithHttpInfo($domain, $payload, string $contentType = self::contentTypes['apiGitDomainDomainPost'][0])
    {
        $request = $this->apiGitDomainDomainPostRequest($domain, $payload, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\COMPITAUT\DirectAdminAPI\Model\WebGitRepositoryResult',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorBadRequest',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorUnauthorized',
                        $request,
                        $response,
                    );
                case 402:
                    return $this->handleResponseWithDataType(
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorLicenseOverused',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorAccessDenied',
                        $request,
                        $response,
                    );
                case 409:
                    return $this->handleResponseWithDataType(
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorGitExecError',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorInternalError',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\COMPITAUT\DirectAdminAPI\Model\WebGitRepositoryResult',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\WebGitRepositoryResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorBadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorUnauthorized',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 402:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorLicenseOverused',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorAccessDenied',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorGitExecError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorInternalError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation apiGitDomainDomainPostAsync
     *
     * Initializes a repository or clones a remote one
     *
     * @param  string $domain Domain (required)
     * @param  \COMPITAUT\DirectAdminAPI\Model\WebGitCreateParameters $payload payload (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiGitDomainDomainPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiGitDomainDomainPostAsync($domain, $payload, string $contentType = self::contentTypes['apiGitDomainDomainPost'][0])
    {
        return $this->apiGitDomainDomainPostAsyncWithHttpInfo($domain, $payload, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiGitDomainDomainPostAsyncWithHttpInfo
     *
     * Initializes a repository or clones a remote one
     *
     * @param  string $domain Domain (required)
     * @param  \COMPITAUT\DirectAdminAPI\Model\WebGitCreateParameters $payload payload (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiGitDomainDomainPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiGitDomainDomainPostAsyncWithHttpInfo($domain, $payload, string $contentType = self::contentTypes['apiGitDomainDomainPost'][0])
    {
        $returnType = '\COMPITAUT\DirectAdminAPI\Model\WebGitRepositoryResult';
        $request = $this->apiGitDomainDomainPostRequest($domain, $payload, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiGitDomainDomainPost'
     *
     * @param  string $domain Domain (required)
     * @param  \COMPITAUT\DirectAdminAPI\Model\WebGitCreateParameters $payload payload (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiGitDomainDomainPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiGitDomainDomainPostRequest($domain, $payload, string $contentType = self::contentTypes['apiGitDomainDomainPost'][0])
    {

        // verify the required parameter 'domain' is set
        if ($domain === null || (is_array($domain) && count($domain) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $domain when calling apiGitDomainDomainPost'
            );
        }

        // verify the required parameter 'payload' is set
        if ($payload === null || (is_array($payload) && count($payload) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $payload when calling apiGitDomainDomainPost'
            );
        }


        $resourcePath = '/api/git/domain/{domain}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($domain !== null) {
            $resourcePath = str_replace(
                '{' . 'domain' . '}',
                ObjectSerializer::toPathValue($domain),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($payload)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($payload));
            } else {
                $httpBody = $payload;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiGitUserUsernameUuidUuidWebhookPost
     *
     * fetches and deploys repository
     *
     * @param  string $uuid UUID (required)
     * @param  string $username Username (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiGitUserUsernameUuidUuidWebhookPost'] to see the possible values for this operation
     *
     * @throws \COMPITAUT\DirectAdminAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiGitUserUsernameUuidUuidWebhookPost($uuid, $username, string $contentType = self::contentTypes['apiGitUserUsernameUuidUuidWebhookPost'][0])
    {
        $this->apiGitUserUsernameUuidUuidWebhookPostWithHttpInfo($uuid, $username, $contentType);
    }

    /**
     * Operation apiGitUserUsernameUuidUuidWebhookPostWithHttpInfo
     *
     * fetches and deploys repository
     *
     * @param  string $uuid UUID (required)
     * @param  string $username Username (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiGitUserUsernameUuidUuidWebhookPost'] to see the possible values for this operation
     *
     * @throws \COMPITAUT\DirectAdminAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiGitUserUsernameUuidUuidWebhookPostWithHttpInfo($uuid, $username, string $contentType = self::contentTypes['apiGitUserUsernameUuidUuidWebhookPost'][0])
    {
        $request = $this->apiGitUserUsernameUuidUuidWebhookPostRequest($uuid, $username, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorAccessDenied',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorGitExecError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorInternalError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation apiGitUserUsernameUuidUuidWebhookPostAsync
     *
     * fetches and deploys repository
     *
     * @param  string $uuid UUID (required)
     * @param  string $username Username (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiGitUserUsernameUuidUuidWebhookPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiGitUserUsernameUuidUuidWebhookPostAsync($uuid, $username, string $contentType = self::contentTypes['apiGitUserUsernameUuidUuidWebhookPost'][0])
    {
        return $this->apiGitUserUsernameUuidUuidWebhookPostAsyncWithHttpInfo($uuid, $username, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiGitUserUsernameUuidUuidWebhookPostAsyncWithHttpInfo
     *
     * fetches and deploys repository
     *
     * @param  string $uuid UUID (required)
     * @param  string $username Username (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiGitUserUsernameUuidUuidWebhookPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiGitUserUsernameUuidUuidWebhookPostAsyncWithHttpInfo($uuid, $username, string $contentType = self::contentTypes['apiGitUserUsernameUuidUuidWebhookPost'][0])
    {
        $returnType = '';
        $request = $this->apiGitUserUsernameUuidUuidWebhookPostRequest($uuid, $username, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiGitUserUsernameUuidUuidWebhookPost'
     *
     * @param  string $uuid UUID (required)
     * @param  string $username Username (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiGitUserUsernameUuidUuidWebhookPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiGitUserUsernameUuidUuidWebhookPostRequest($uuid, $username, string $contentType = self::contentTypes['apiGitUserUsernameUuidUuidWebhookPost'][0])
    {

        // verify the required parameter 'uuid' is set
        if ($uuid === null || (is_array($uuid) && count($uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $uuid when calling apiGitUserUsernameUuidUuidWebhookPost'
            );
        }

        // verify the required parameter 'username' is set
        if ($username === null || (is_array($username) && count($username) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $username when calling apiGitUserUsernameUuidUuidWebhookPost'
            );
        }


        $resourcePath = '/api/git/user/{username}/uuid/{uuid}/webhook';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'uuid' . '}',
                ObjectSerializer::toPathValue($uuid),
                $resourcePath
            );
        }
        // path params
        if ($username !== null) {
            $resourcePath = str_replace(
                '{' . 'username' . '}',
                ObjectSerializer::toPathValue($username),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiGitUuidUuidBranchBranchGet
     *
     * Returns repository&#39;s branch log history
     *
     * @param  string $uuid UUID (required)
     * @param  string $branch Branch (required)
     * @param  int|null $skip Skip N commits (optional, default to 0)
     * @param  int|null $limit Limit (optional, default to 10)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiGitUuidUuidBranchBranchGet'] to see the possible values for this operation
     *
     * @throws \COMPITAUT\DirectAdminAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \COMPITAUT\DirectAdminAPI\Model\WebGitLogResult|\COMPITAUT\DirectAdminAPI\Model\ApierrorBadRequest|\COMPITAUT\DirectAdminAPI\Model\ApierrorUnauthorized|\COMPITAUT\DirectAdminAPI\Model\ApierrorLicenseOverused|\COMPITAUT\DirectAdminAPI\Model\ApierrorAccessDenied|\COMPITAUT\DirectAdminAPI\Model\ApierrorGitExecError|\COMPITAUT\DirectAdminAPI\Model\ApierrorInternalError
     */
    public function apiGitUuidUuidBranchBranchGet($uuid, $branch, $skip = 0, $limit = 10, string $contentType = self::contentTypes['apiGitUuidUuidBranchBranchGet'][0])
    {
        list($response) = $this->apiGitUuidUuidBranchBranchGetWithHttpInfo($uuid, $branch, $skip, $limit, $contentType);
        return $response;
    }

    /**
     * Operation apiGitUuidUuidBranchBranchGetWithHttpInfo
     *
     * Returns repository&#39;s branch log history
     *
     * @param  string $uuid UUID (required)
     * @param  string $branch Branch (required)
     * @param  int|null $skip Skip N commits (optional, default to 0)
     * @param  int|null $limit Limit (optional, default to 10)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiGitUuidUuidBranchBranchGet'] to see the possible values for this operation
     *
     * @throws \COMPITAUT\DirectAdminAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \COMPITAUT\DirectAdminAPI\Model\WebGitLogResult|\COMPITAUT\DirectAdminAPI\Model\ApierrorBadRequest|\COMPITAUT\DirectAdminAPI\Model\ApierrorUnauthorized|\COMPITAUT\DirectAdminAPI\Model\ApierrorLicenseOverused|\COMPITAUT\DirectAdminAPI\Model\ApierrorAccessDenied|\COMPITAUT\DirectAdminAPI\Model\ApierrorGitExecError|\COMPITAUT\DirectAdminAPI\Model\ApierrorInternalError, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiGitUuidUuidBranchBranchGetWithHttpInfo($uuid, $branch, $skip = 0, $limit = 10, string $contentType = self::contentTypes['apiGitUuidUuidBranchBranchGet'][0])
    {
        $request = $this->apiGitUuidUuidBranchBranchGetRequest($uuid, $branch, $skip, $limit, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\COMPITAUT\DirectAdminAPI\Model\WebGitLogResult',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorBadRequest',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorUnauthorized',
                        $request,
                        $response,
                    );
                case 402:
                    return $this->handleResponseWithDataType(
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorLicenseOverused',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorAccessDenied',
                        $request,
                        $response,
                    );
                case 409:
                    return $this->handleResponseWithDataType(
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorGitExecError',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorInternalError',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\COMPITAUT\DirectAdminAPI\Model\WebGitLogResult',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\WebGitLogResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorBadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorUnauthorized',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 402:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorLicenseOverused',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorAccessDenied',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorGitExecError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorInternalError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation apiGitUuidUuidBranchBranchGetAsync
     *
     * Returns repository&#39;s branch log history
     *
     * @param  string $uuid UUID (required)
     * @param  string $branch Branch (required)
     * @param  int|null $skip Skip N commits (optional, default to 0)
     * @param  int|null $limit Limit (optional, default to 10)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiGitUuidUuidBranchBranchGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiGitUuidUuidBranchBranchGetAsync($uuid, $branch, $skip = 0, $limit = 10, string $contentType = self::contentTypes['apiGitUuidUuidBranchBranchGet'][0])
    {
        return $this->apiGitUuidUuidBranchBranchGetAsyncWithHttpInfo($uuid, $branch, $skip, $limit, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiGitUuidUuidBranchBranchGetAsyncWithHttpInfo
     *
     * Returns repository&#39;s branch log history
     *
     * @param  string $uuid UUID (required)
     * @param  string $branch Branch (required)
     * @param  int|null $skip Skip N commits (optional, default to 0)
     * @param  int|null $limit Limit (optional, default to 10)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiGitUuidUuidBranchBranchGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiGitUuidUuidBranchBranchGetAsyncWithHttpInfo($uuid, $branch, $skip = 0, $limit = 10, string $contentType = self::contentTypes['apiGitUuidUuidBranchBranchGet'][0])
    {
        $returnType = '\COMPITAUT\DirectAdminAPI\Model\WebGitLogResult';
        $request = $this->apiGitUuidUuidBranchBranchGetRequest($uuid, $branch, $skip, $limit, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiGitUuidUuidBranchBranchGet'
     *
     * @param  string $uuid UUID (required)
     * @param  string $branch Branch (required)
     * @param  int|null $skip Skip N commits (optional, default to 0)
     * @param  int|null $limit Limit (optional, default to 10)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiGitUuidUuidBranchBranchGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiGitUuidUuidBranchBranchGetRequest($uuid, $branch, $skip = 0, $limit = 10, string $contentType = self::contentTypes['apiGitUuidUuidBranchBranchGet'][0])
    {

        // verify the required parameter 'uuid' is set
        if ($uuid === null || (is_array($uuid) && count($uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $uuid when calling apiGitUuidUuidBranchBranchGet'
            );
        }

        // verify the required parameter 'branch' is set
        if ($branch === null || (is_array($branch) && count($branch) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $branch when calling apiGitUuidUuidBranchBranchGet'
            );
        }




        $resourcePath = '/api/git/uuid/{uuid}/branch/{branch}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $skip,
            'skip', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'uuid' . '}',
                ObjectSerializer::toPathValue($uuid),
                $resourcePath
            );
        }
        // path params
        if ($branch !== null) {
            $resourcePath = str_replace(
                '{' . 'branch' . '}',
                ObjectSerializer::toPathValue($branch),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiGitUuidUuidCommitCommitGet
     *
     * Returns commit information
     *
     * @param  string $uuid UUID (required)
     * @param  string $commit commit (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiGitUuidUuidCommitCommitGet'] to see the possible values for this operation
     *
     * @throws \COMPITAUT\DirectAdminAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \COMPITAUT\DirectAdminAPI\Model\WebGitCommitInfoResult|\COMPITAUT\DirectAdminAPI\Model\ApierrorUnauthorized|\COMPITAUT\DirectAdminAPI\Model\ApierrorLicenseOverused|\COMPITAUT\DirectAdminAPI\Model\ApierrorAccessDenied|\COMPITAUT\DirectAdminAPI\Model\ApierrorGitExecError|\COMPITAUT\DirectAdminAPI\Model\ApierrorInternalError
     */
    public function apiGitUuidUuidCommitCommitGet($uuid, $commit, string $contentType = self::contentTypes['apiGitUuidUuidCommitCommitGet'][0])
    {
        list($response) = $this->apiGitUuidUuidCommitCommitGetWithHttpInfo($uuid, $commit, $contentType);
        return $response;
    }

    /**
     * Operation apiGitUuidUuidCommitCommitGetWithHttpInfo
     *
     * Returns commit information
     *
     * @param  string $uuid UUID (required)
     * @param  string $commit commit (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiGitUuidUuidCommitCommitGet'] to see the possible values for this operation
     *
     * @throws \COMPITAUT\DirectAdminAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \COMPITAUT\DirectAdminAPI\Model\WebGitCommitInfoResult|\COMPITAUT\DirectAdminAPI\Model\ApierrorUnauthorized|\COMPITAUT\DirectAdminAPI\Model\ApierrorLicenseOverused|\COMPITAUT\DirectAdminAPI\Model\ApierrorAccessDenied|\COMPITAUT\DirectAdminAPI\Model\ApierrorGitExecError|\COMPITAUT\DirectAdminAPI\Model\ApierrorInternalError, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiGitUuidUuidCommitCommitGetWithHttpInfo($uuid, $commit, string $contentType = self::contentTypes['apiGitUuidUuidCommitCommitGet'][0])
    {
        $request = $this->apiGitUuidUuidCommitCommitGetRequest($uuid, $commit, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\COMPITAUT\DirectAdminAPI\Model\WebGitCommitInfoResult',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorUnauthorized',
                        $request,
                        $response,
                    );
                case 402:
                    return $this->handleResponseWithDataType(
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorLicenseOverused',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorAccessDenied',
                        $request,
                        $response,
                    );
                case 409:
                    return $this->handleResponseWithDataType(
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorGitExecError',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorInternalError',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\COMPITAUT\DirectAdminAPI\Model\WebGitCommitInfoResult',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\WebGitCommitInfoResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorUnauthorized',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 402:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorLicenseOverused',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorAccessDenied',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorGitExecError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorInternalError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation apiGitUuidUuidCommitCommitGetAsync
     *
     * Returns commit information
     *
     * @param  string $uuid UUID (required)
     * @param  string $commit commit (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiGitUuidUuidCommitCommitGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiGitUuidUuidCommitCommitGetAsync($uuid, $commit, string $contentType = self::contentTypes['apiGitUuidUuidCommitCommitGet'][0])
    {
        return $this->apiGitUuidUuidCommitCommitGetAsyncWithHttpInfo($uuid, $commit, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiGitUuidUuidCommitCommitGetAsyncWithHttpInfo
     *
     * Returns commit information
     *
     * @param  string $uuid UUID (required)
     * @param  string $commit commit (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiGitUuidUuidCommitCommitGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiGitUuidUuidCommitCommitGetAsyncWithHttpInfo($uuid, $commit, string $contentType = self::contentTypes['apiGitUuidUuidCommitCommitGet'][0])
    {
        $returnType = '\COMPITAUT\DirectAdminAPI\Model\WebGitCommitInfoResult';
        $request = $this->apiGitUuidUuidCommitCommitGetRequest($uuid, $commit, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiGitUuidUuidCommitCommitGet'
     *
     * @param  string $uuid UUID (required)
     * @param  string $commit commit (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiGitUuidUuidCommitCommitGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiGitUuidUuidCommitCommitGetRequest($uuid, $commit, string $contentType = self::contentTypes['apiGitUuidUuidCommitCommitGet'][0])
    {

        // verify the required parameter 'uuid' is set
        if ($uuid === null || (is_array($uuid) && count($uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $uuid when calling apiGitUuidUuidCommitCommitGet'
            );
        }

        // verify the required parameter 'commit' is set
        if ($commit === null || (is_array($commit) && count($commit) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $commit when calling apiGitUuidUuidCommitCommitGet'
            );
        }


        $resourcePath = '/api/git/uuid/{uuid}/commit/{commit}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'uuid' . '}',
                ObjectSerializer::toPathValue($uuid),
                $resourcePath
            );
        }
        // path params
        if ($commit !== null) {
            $resourcePath = str_replace(
                '{' . 'commit' . '}',
                ObjectSerializer::toPathValue($commit),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiGitUuidUuidDelete
     *
     * Removes repository
     *
     * @param  string $uuid UUID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiGitUuidUuidDelete'] to see the possible values for this operation
     *
     * @throws \COMPITAUT\DirectAdminAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiGitUuidUuidDelete($uuid, string $contentType = self::contentTypes['apiGitUuidUuidDelete'][0])
    {
        $this->apiGitUuidUuidDeleteWithHttpInfo($uuid, $contentType);
    }

    /**
     * Operation apiGitUuidUuidDeleteWithHttpInfo
     *
     * Removes repository
     *
     * @param  string $uuid UUID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiGitUuidUuidDelete'] to see the possible values for this operation
     *
     * @throws \COMPITAUT\DirectAdminAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiGitUuidUuidDeleteWithHttpInfo($uuid, string $contentType = self::contentTypes['apiGitUuidUuidDelete'][0])
    {
        $request = $this->apiGitUuidUuidDeleteRequest($uuid, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorUnauthorized',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 402:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorLicenseOverused',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorAccessDenied',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorInternalError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation apiGitUuidUuidDeleteAsync
     *
     * Removes repository
     *
     * @param  string $uuid UUID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiGitUuidUuidDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiGitUuidUuidDeleteAsync($uuid, string $contentType = self::contentTypes['apiGitUuidUuidDelete'][0])
    {
        return $this->apiGitUuidUuidDeleteAsyncWithHttpInfo($uuid, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiGitUuidUuidDeleteAsyncWithHttpInfo
     *
     * Removes repository
     *
     * @param  string $uuid UUID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiGitUuidUuidDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiGitUuidUuidDeleteAsyncWithHttpInfo($uuid, string $contentType = self::contentTypes['apiGitUuidUuidDelete'][0])
    {
        $returnType = '';
        $request = $this->apiGitUuidUuidDeleteRequest($uuid, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiGitUuidUuidDelete'
     *
     * @param  string $uuid UUID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiGitUuidUuidDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiGitUuidUuidDeleteRequest($uuid, string $contentType = self::contentTypes['apiGitUuidUuidDelete'][0])
    {

        // verify the required parameter 'uuid' is set
        if ($uuid === null || (is_array($uuid) && count($uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $uuid when calling apiGitUuidUuidDelete'
            );
        }


        $resourcePath = '/api/git/uuid/{uuid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'uuid' . '}',
                ObjectSerializer::toPathValue($uuid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiGitUuidUuidDeployPost
     *
     * Deploys bare repository to a working tree
     *
     * @param  string $uuid UUID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiGitUuidUuidDeployPost'] to see the possible values for this operation
     *
     * @throws \COMPITAUT\DirectAdminAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiGitUuidUuidDeployPost($uuid, string $contentType = self::contentTypes['apiGitUuidUuidDeployPost'][0])
    {
        $this->apiGitUuidUuidDeployPostWithHttpInfo($uuid, $contentType);
    }

    /**
     * Operation apiGitUuidUuidDeployPostWithHttpInfo
     *
     * Deploys bare repository to a working tree
     *
     * @param  string $uuid UUID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiGitUuidUuidDeployPost'] to see the possible values for this operation
     *
     * @throws \COMPITAUT\DirectAdminAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiGitUuidUuidDeployPostWithHttpInfo($uuid, string $contentType = self::contentTypes['apiGitUuidUuidDeployPost'][0])
    {
        $request = $this->apiGitUuidUuidDeployPostRequest($uuid, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorUnauthorized',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 402:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorLicenseOverused',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorAccessDenied',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorGitDeployBranchNotSet',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 419:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorGitDeployDirNotSet',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorGitExecError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorInternalError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation apiGitUuidUuidDeployPostAsync
     *
     * Deploys bare repository to a working tree
     *
     * @param  string $uuid UUID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiGitUuidUuidDeployPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiGitUuidUuidDeployPostAsync($uuid, string $contentType = self::contentTypes['apiGitUuidUuidDeployPost'][0])
    {
        return $this->apiGitUuidUuidDeployPostAsyncWithHttpInfo($uuid, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiGitUuidUuidDeployPostAsyncWithHttpInfo
     *
     * Deploys bare repository to a working tree
     *
     * @param  string $uuid UUID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiGitUuidUuidDeployPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiGitUuidUuidDeployPostAsyncWithHttpInfo($uuid, string $contentType = self::contentTypes['apiGitUuidUuidDeployPost'][0])
    {
        $returnType = '';
        $request = $this->apiGitUuidUuidDeployPostRequest($uuid, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiGitUuidUuidDeployPost'
     *
     * @param  string $uuid UUID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiGitUuidUuidDeployPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiGitUuidUuidDeployPostRequest($uuid, string $contentType = self::contentTypes['apiGitUuidUuidDeployPost'][0])
    {

        // verify the required parameter 'uuid' is set
        if ($uuid === null || (is_array($uuid) && count($uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $uuid when calling apiGitUuidUuidDeployPost'
            );
        }


        $resourcePath = '/api/git/uuid/{uuid}/deploy';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'uuid' . '}',
                ObjectSerializer::toPathValue($uuid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiGitUuidUuidFetchPost
     *
     * Fetches latest repository changes from the remote
     *
     * @param  string $uuid UUID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiGitUuidUuidFetchPost'] to see the possible values for this operation
     *
     * @throws \COMPITAUT\DirectAdminAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiGitUuidUuidFetchPost($uuid, string $contentType = self::contentTypes['apiGitUuidUuidFetchPost'][0])
    {
        $this->apiGitUuidUuidFetchPostWithHttpInfo($uuid, $contentType);
    }

    /**
     * Operation apiGitUuidUuidFetchPostWithHttpInfo
     *
     * Fetches latest repository changes from the remote
     *
     * @param  string $uuid UUID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiGitUuidUuidFetchPost'] to see the possible values for this operation
     *
     * @throws \COMPITAUT\DirectAdminAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiGitUuidUuidFetchPostWithHttpInfo($uuid, string $contentType = self::contentTypes['apiGitUuidUuidFetchPost'][0])
    {
        $request = $this->apiGitUuidUuidFetchPostRequest($uuid, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorUnauthorized',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 402:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorLicenseOverused',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorAccessDenied',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorGitExecError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorInternalError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation apiGitUuidUuidFetchPostAsync
     *
     * Fetches latest repository changes from the remote
     *
     * @param  string $uuid UUID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiGitUuidUuidFetchPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiGitUuidUuidFetchPostAsync($uuid, string $contentType = self::contentTypes['apiGitUuidUuidFetchPost'][0])
    {
        return $this->apiGitUuidUuidFetchPostAsyncWithHttpInfo($uuid, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiGitUuidUuidFetchPostAsyncWithHttpInfo
     *
     * Fetches latest repository changes from the remote
     *
     * @param  string $uuid UUID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiGitUuidUuidFetchPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiGitUuidUuidFetchPostAsyncWithHttpInfo($uuid, string $contentType = self::contentTypes['apiGitUuidUuidFetchPost'][0])
    {
        $returnType = '';
        $request = $this->apiGitUuidUuidFetchPostRequest($uuid, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiGitUuidUuidFetchPost'
     *
     * @param  string $uuid UUID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiGitUuidUuidFetchPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiGitUuidUuidFetchPostRequest($uuid, string $contentType = self::contentTypes['apiGitUuidUuidFetchPost'][0])
    {

        // verify the required parameter 'uuid' is set
        if ($uuid === null || (is_array($uuid) && count($uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $uuid when calling apiGitUuidUuidFetchPost'
            );
        }


        $resourcePath = '/api/git/uuid/{uuid}/fetch';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'uuid' . '}',
                ObjectSerializer::toPathValue($uuid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiGitUuidUuidGet
     *
     * Returns information about one repository under user domain
     *
     * @param  string $uuid UUID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiGitUuidUuidGet'] to see the possible values for this operation
     *
     * @throws \COMPITAUT\DirectAdminAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \COMPITAUT\DirectAdminAPI\Model\WebGitRepositoryResult|\COMPITAUT\DirectAdminAPI\Model\ApierrorUnauthorized|\COMPITAUT\DirectAdminAPI\Model\ApierrorLicenseOverused|\COMPITAUT\DirectAdminAPI\Model\ApierrorAccessDenied|\COMPITAUT\DirectAdminAPI\Model\ApierrorInternalError
     */
    public function apiGitUuidUuidGet($uuid, string $contentType = self::contentTypes['apiGitUuidUuidGet'][0])
    {
        list($response) = $this->apiGitUuidUuidGetWithHttpInfo($uuid, $contentType);
        return $response;
    }

    /**
     * Operation apiGitUuidUuidGetWithHttpInfo
     *
     * Returns information about one repository under user domain
     *
     * @param  string $uuid UUID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiGitUuidUuidGet'] to see the possible values for this operation
     *
     * @throws \COMPITAUT\DirectAdminAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \COMPITAUT\DirectAdminAPI\Model\WebGitRepositoryResult|\COMPITAUT\DirectAdminAPI\Model\ApierrorUnauthorized|\COMPITAUT\DirectAdminAPI\Model\ApierrorLicenseOverused|\COMPITAUT\DirectAdminAPI\Model\ApierrorAccessDenied|\COMPITAUT\DirectAdminAPI\Model\ApierrorInternalError, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiGitUuidUuidGetWithHttpInfo($uuid, string $contentType = self::contentTypes['apiGitUuidUuidGet'][0])
    {
        $request = $this->apiGitUuidUuidGetRequest($uuid, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\COMPITAUT\DirectAdminAPI\Model\WebGitRepositoryResult',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorUnauthorized',
                        $request,
                        $response,
                    );
                case 402:
                    return $this->handleResponseWithDataType(
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorLicenseOverused',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorAccessDenied',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorInternalError',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\COMPITAUT\DirectAdminAPI\Model\WebGitRepositoryResult',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\WebGitRepositoryResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorUnauthorized',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 402:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorLicenseOverused',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorAccessDenied',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorInternalError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation apiGitUuidUuidGetAsync
     *
     * Returns information about one repository under user domain
     *
     * @param  string $uuid UUID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiGitUuidUuidGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiGitUuidUuidGetAsync($uuid, string $contentType = self::contentTypes['apiGitUuidUuidGet'][0])
    {
        return $this->apiGitUuidUuidGetAsyncWithHttpInfo($uuid, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiGitUuidUuidGetAsyncWithHttpInfo
     *
     * Returns information about one repository under user domain
     *
     * @param  string $uuid UUID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiGitUuidUuidGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiGitUuidUuidGetAsyncWithHttpInfo($uuid, string $contentType = self::contentTypes['apiGitUuidUuidGet'][0])
    {
        $returnType = '\COMPITAUT\DirectAdminAPI\Model\WebGitRepositoryResult';
        $request = $this->apiGitUuidUuidGetRequest($uuid, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiGitUuidUuidGet'
     *
     * @param  string $uuid UUID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiGitUuidUuidGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiGitUuidUuidGetRequest($uuid, string $contentType = self::contentTypes['apiGitUuidUuidGet'][0])
    {

        // verify the required parameter 'uuid' is set
        if ($uuid === null || (is_array($uuid) && count($uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $uuid when calling apiGitUuidUuidGet'
            );
        }


        $resourcePath = '/api/git/uuid/{uuid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'uuid' . '}',
                ObjectSerializer::toPathValue($uuid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiGitUuidUuidPut
     *
     * Updates repository settings
     *
     * @param  string $uuid UUID (required)
     * @param  \COMPITAUT\DirectAdminAPI\Model\WebGitUpdateParameters $payload payload (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiGitUuidUuidPut'] to see the possible values for this operation
     *
     * @throws \COMPITAUT\DirectAdminAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiGitUuidUuidPut($uuid, $payload, string $contentType = self::contentTypes['apiGitUuidUuidPut'][0])
    {
        $this->apiGitUuidUuidPutWithHttpInfo($uuid, $payload, $contentType);
    }

    /**
     * Operation apiGitUuidUuidPutWithHttpInfo
     *
     * Updates repository settings
     *
     * @param  string $uuid UUID (required)
     * @param  \COMPITAUT\DirectAdminAPI\Model\WebGitUpdateParameters $payload payload (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiGitUuidUuidPut'] to see the possible values for this operation
     *
     * @throws \COMPITAUT\DirectAdminAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiGitUuidUuidPutWithHttpInfo($uuid, $payload, string $contentType = self::contentTypes['apiGitUuidUuidPut'][0])
    {
        $request = $this->apiGitUuidUuidPutRequest($uuid, $payload, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorBadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorUnauthorized',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 402:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorLicenseOverused',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorAccessDenied',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorInternalError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation apiGitUuidUuidPutAsync
     *
     * Updates repository settings
     *
     * @param  string $uuid UUID (required)
     * @param  \COMPITAUT\DirectAdminAPI\Model\WebGitUpdateParameters $payload payload (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiGitUuidUuidPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiGitUuidUuidPutAsync($uuid, $payload, string $contentType = self::contentTypes['apiGitUuidUuidPut'][0])
    {
        return $this->apiGitUuidUuidPutAsyncWithHttpInfo($uuid, $payload, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiGitUuidUuidPutAsyncWithHttpInfo
     *
     * Updates repository settings
     *
     * @param  string $uuid UUID (required)
     * @param  \COMPITAUT\DirectAdminAPI\Model\WebGitUpdateParameters $payload payload (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiGitUuidUuidPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiGitUuidUuidPutAsyncWithHttpInfo($uuid, $payload, string $contentType = self::contentTypes['apiGitUuidUuidPut'][0])
    {
        $returnType = '';
        $request = $this->apiGitUuidUuidPutRequest($uuid, $payload, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiGitUuidUuidPut'
     *
     * @param  string $uuid UUID (required)
     * @param  \COMPITAUT\DirectAdminAPI\Model\WebGitUpdateParameters $payload payload (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiGitUuidUuidPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiGitUuidUuidPutRequest($uuid, $payload, string $contentType = self::contentTypes['apiGitUuidUuidPut'][0])
    {

        // verify the required parameter 'uuid' is set
        if ($uuid === null || (is_array($uuid) && count($uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $uuid when calling apiGitUuidUuidPut'
            );
        }

        // verify the required parameter 'payload' is set
        if ($payload === null || (is_array($payload) && count($payload) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $payload when calling apiGitUuidUuidPut'
            );
        }


        $resourcePath = '/api/git/uuid/{uuid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'uuid' . '}',
                ObjectSerializer::toPathValue($uuid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($payload)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($payload));
            } else {
                $httpBody = $payload;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }

    private function handleResponseWithDataType(
        string $dataType,
        RequestInterface $request,
        ResponseInterface $response
    ): array {
        if ($dataType === '\SplFileObject') {
            $content = $response->getBody(); //stream goes to serializer
        } else {
            $content = (string) $response->getBody();
            if ($dataType !== 'string') {
                try {
                    $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                } catch (\JsonException $exception) {
                    throw new ApiException(
                        sprintf(
                            'Error JSON decoding server response (%s)',
                            $request->getUri()
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                        $content
                    );
                }
            }
        }

        return [
            ObjectSerializer::deserialize($content, $dataType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    private function responseWithinRangeCode(
        string $rangeCode,
        int $statusCode
    ): bool {
        $left = (int) ($rangeCode[0].'00');
        $right = (int) ($rangeCode[0].'99');

        return $statusCode >= $left && $statusCode <= $right;
    }
}
