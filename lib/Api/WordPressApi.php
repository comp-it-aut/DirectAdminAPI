<?php
/**
 * WordPressApi
 * PHP version 8.1
 *
 * @category Class
 * @package  COMPITAUT\DirectAdminAPI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Swagger DirectAdmin API
 *
 * Swagger API for DirectAdmin server
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@directadmin.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace COMPITAUT\DirectAdminAPI\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Psr\Http\Message\RequestInterface;
use Psr\Http\Message\ResponseInterface;
use COMPITAUT\DirectAdminAPI\ApiException;
use COMPITAUT\DirectAdminAPI\Configuration;
use COMPITAUT\DirectAdminAPI\FormDataProcessor;
use COMPITAUT\DirectAdminAPI\HeaderSelector;
use COMPITAUT\DirectAdminAPI\ObjectSerializer;

/**
 * WordPressApi Class Doc Comment
 *
 * @category Class
 * @package  COMPITAUT\DirectAdminAPI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class WordPressApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'apiWordpressInstallPost' => [
            'application/json',
        ],
        'apiWordpressInstallQuickPost' => [
            'application/json',
        ],
        'apiWordpressLocationsGet' => [
            'application/json',
        ],
        'apiWordpressLocationsLocationIdConfigAutoUpdatePut' => [
            'application/json',
        ],
        'apiWordpressLocationsLocationIdConfigGet' => [
            'application/json',
        ],
        'apiWordpressLocationsLocationIdConfigPut' => [
            'application/json',
        ],
        'apiWordpressLocationsLocationIdDelete' => [
            'application/json',
        ],
        'apiWordpressLocationsLocationIdOptionsGet' => [
            'application/json',
        ],
        'apiWordpressLocationsLocationIdOptionsPatch' => [
            'application/json',
        ],
        'apiWordpressLocationsLocationIdUsersGet' => [
            'application/json',
        ],
        'apiWordpressLocationsLocationIdUsersUserIdChangePasswordPost' => [
            'application/json',
        ],
        'apiWordpressLocationsLocationIdUsersUserIdSsoLoginPost' => [
            'application/json',
        ],
        'apiWordpressLocationsLocationIdWordpressGet' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ?ClientInterface $client = null,
        ?Configuration $config = null,
        ?HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation apiWordpressInstallPost
     *
     * Performs new wordpress installation in a given location
     *
     * @param  \COMPITAUT\DirectAdminAPI\Model\WebWordpressInstallRequest $payload New wordpress installation configuration (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiWordpressInstallPost'] to see the possible values for this operation
     *
     * @throws \COMPITAUT\DirectAdminAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \COMPITAUT\DirectAdminAPI\Model\WebWordpressInstallResponse|\COMPITAUT\DirectAdminAPI\Model\ApierrorBadRequest|\COMPITAUT\DirectAdminAPI\Model\ApierrorUnauthorized|\COMPITAUT\DirectAdminAPI\Model\ApierrorLicenseOverused|\COMPITAUT\DirectAdminAPI\Model\ApierrorAccessDenied|\COMPITAUT\DirectAdminAPI\Model\ApierrorWordpressDatabaseError|\COMPITAUT\DirectAdminAPI\Model\ApierrorWordpressAlreadyInstalled|\COMPITAUT\DirectAdminAPI\Model\ApierrorInternalError
     */
    public function apiWordpressInstallPost($payload, string $contentType = self::contentTypes['apiWordpressInstallPost'][0])
    {
        list($response) = $this->apiWordpressInstallPostWithHttpInfo($payload, $contentType);
        return $response;
    }

    /**
     * Operation apiWordpressInstallPostWithHttpInfo
     *
     * Performs new wordpress installation in a given location
     *
     * @param  \COMPITAUT\DirectAdminAPI\Model\WebWordpressInstallRequest $payload New wordpress installation configuration (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiWordpressInstallPost'] to see the possible values for this operation
     *
     * @throws \COMPITAUT\DirectAdminAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \COMPITAUT\DirectAdminAPI\Model\WebWordpressInstallResponse|\COMPITAUT\DirectAdminAPI\Model\ApierrorBadRequest|\COMPITAUT\DirectAdminAPI\Model\ApierrorUnauthorized|\COMPITAUT\DirectAdminAPI\Model\ApierrorLicenseOverused|\COMPITAUT\DirectAdminAPI\Model\ApierrorAccessDenied|\COMPITAUT\DirectAdminAPI\Model\ApierrorWordpressDatabaseError|\COMPITAUT\DirectAdminAPI\Model\ApierrorWordpressAlreadyInstalled|\COMPITAUT\DirectAdminAPI\Model\ApierrorInternalError, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiWordpressInstallPostWithHttpInfo($payload, string $contentType = self::contentTypes['apiWordpressInstallPost'][0])
    {
        $request = $this->apiWordpressInstallPostRequest($payload, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\COMPITAUT\DirectAdminAPI\Model\WebWordpressInstallResponse',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorBadRequest',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorUnauthorized',
                        $request,
                        $response,
                    );
                case 402:
                    return $this->handleResponseWithDataType(
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorLicenseOverused',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorAccessDenied',
                        $request,
                        $response,
                    );
                case 490:
                    return $this->handleResponseWithDataType(
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorWordpressDatabaseError',
                        $request,
                        $response,
                    );
                case 491:
                    return $this->handleResponseWithDataType(
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorWordpressAlreadyInstalled',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorInternalError',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\COMPITAUT\DirectAdminAPI\Model\WebWordpressInstallResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\WebWordpressInstallResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorBadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorUnauthorized',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 402:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorLicenseOverused',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorAccessDenied',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 490:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorWordpressDatabaseError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 491:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorWordpressAlreadyInstalled',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorInternalError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation apiWordpressInstallPostAsync
     *
     * Performs new wordpress installation in a given location
     *
     * @param  \COMPITAUT\DirectAdminAPI\Model\WebWordpressInstallRequest $payload New wordpress installation configuration (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiWordpressInstallPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiWordpressInstallPostAsync($payload, string $contentType = self::contentTypes['apiWordpressInstallPost'][0])
    {
        return $this->apiWordpressInstallPostAsyncWithHttpInfo($payload, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiWordpressInstallPostAsyncWithHttpInfo
     *
     * Performs new wordpress installation in a given location
     *
     * @param  \COMPITAUT\DirectAdminAPI\Model\WebWordpressInstallRequest $payload New wordpress installation configuration (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiWordpressInstallPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiWordpressInstallPostAsyncWithHttpInfo($payload, string $contentType = self::contentTypes['apiWordpressInstallPost'][0])
    {
        $returnType = '\COMPITAUT\DirectAdminAPI\Model\WebWordpressInstallResponse';
        $request = $this->apiWordpressInstallPostRequest($payload, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiWordpressInstallPost'
     *
     * @param  \COMPITAUT\DirectAdminAPI\Model\WebWordpressInstallRequest $payload New wordpress installation configuration (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiWordpressInstallPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiWordpressInstallPostRequest($payload, string $contentType = self::contentTypes['apiWordpressInstallPost'][0])
    {

        // verify the required parameter 'payload' is set
        if ($payload === null || (is_array($payload) && count($payload) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $payload when calling apiWordpressInstallPost'
            );
        }


        $resourcePath = '/api/wordpress/install';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($payload)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($payload));
            } else {
                $httpBody = $payload;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiWordpressInstallQuickPost
     *
     * Performs quick new wordpress installation in a given location
     *
     * @param  \COMPITAUT\DirectAdminAPI\Model\WebWordpressInstallQuickRequest $payload New wordpress installation configuration (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiWordpressInstallQuickPost'] to see the possible values for this operation
     *
     * @throws \COMPITAUT\DirectAdminAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \COMPITAUT\DirectAdminAPI\Model\WebWordpressInstallResponse|\COMPITAUT\DirectAdminAPI\Model\ApierrorBadRequest|\COMPITAUT\DirectAdminAPI\Model\ApierrorUnauthorized|\COMPITAUT\DirectAdminAPI\Model\ApierrorLicenseOverused|\COMPITAUT\DirectAdminAPI\Model\ApierrorAccessDenied|\COMPITAUT\DirectAdminAPI\Model\ApierrorWordpressAlreadyInstalled|\COMPITAUT\DirectAdminAPI\Model\ApierrorDatabaseUsersExceedLimit|\COMPITAUT\DirectAdminAPI\Model\ApierrorResellerExceedsLimits|\COMPITAUT\DirectAdminAPI\Model\ApierrorDatabasesExceedLimit|\COMPITAUT\DirectAdminAPI\Model\ApierrorInternalError
     */
    public function apiWordpressInstallQuickPost($payload, string $contentType = self::contentTypes['apiWordpressInstallQuickPost'][0])
    {
        list($response) = $this->apiWordpressInstallQuickPostWithHttpInfo($payload, $contentType);
        return $response;
    }

    /**
     * Operation apiWordpressInstallQuickPostWithHttpInfo
     *
     * Performs quick new wordpress installation in a given location
     *
     * @param  \COMPITAUT\DirectAdminAPI\Model\WebWordpressInstallQuickRequest $payload New wordpress installation configuration (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiWordpressInstallQuickPost'] to see the possible values for this operation
     *
     * @throws \COMPITAUT\DirectAdminAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \COMPITAUT\DirectAdminAPI\Model\WebWordpressInstallResponse|\COMPITAUT\DirectAdminAPI\Model\ApierrorBadRequest|\COMPITAUT\DirectAdminAPI\Model\ApierrorUnauthorized|\COMPITAUT\DirectAdminAPI\Model\ApierrorLicenseOverused|\COMPITAUT\DirectAdminAPI\Model\ApierrorAccessDenied|\COMPITAUT\DirectAdminAPI\Model\ApierrorWordpressAlreadyInstalled|\COMPITAUT\DirectAdminAPI\Model\ApierrorDatabaseUsersExceedLimit|\COMPITAUT\DirectAdminAPI\Model\ApierrorResellerExceedsLimits|\COMPITAUT\DirectAdminAPI\Model\ApierrorDatabasesExceedLimit|\COMPITAUT\DirectAdminAPI\Model\ApierrorInternalError, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiWordpressInstallQuickPostWithHttpInfo($payload, string $contentType = self::contentTypes['apiWordpressInstallQuickPost'][0])
    {
        $request = $this->apiWordpressInstallQuickPostRequest($payload, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\COMPITAUT\DirectAdminAPI\Model\WebWordpressInstallResponse',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorBadRequest',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorUnauthorized',
                        $request,
                        $response,
                    );
                case 402:
                    return $this->handleResponseWithDataType(
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorLicenseOverused',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorAccessDenied',
                        $request,
                        $response,
                    );
                case 490:
                    return $this->handleResponseWithDataType(
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorWordpressAlreadyInstalled',
                        $request,
                        $response,
                    );
                case 491:
                    return $this->handleResponseWithDataType(
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorDatabaseUsersExceedLimit',
                        $request,
                        $response,
                    );
                case 492:
                    return $this->handleResponseWithDataType(
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorResellerExceedsLimits',
                        $request,
                        $response,
                    );
                case 493:
                    return $this->handleResponseWithDataType(
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorDatabasesExceedLimit',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorInternalError',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\COMPITAUT\DirectAdminAPI\Model\WebWordpressInstallResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\WebWordpressInstallResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorBadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorUnauthorized',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 402:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorLicenseOverused',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorAccessDenied',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 490:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorWordpressAlreadyInstalled',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 491:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorDatabaseUsersExceedLimit',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 492:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorResellerExceedsLimits',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 493:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorDatabasesExceedLimit',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorInternalError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation apiWordpressInstallQuickPostAsync
     *
     * Performs quick new wordpress installation in a given location
     *
     * @param  \COMPITAUT\DirectAdminAPI\Model\WebWordpressInstallQuickRequest $payload New wordpress installation configuration (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiWordpressInstallQuickPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiWordpressInstallQuickPostAsync($payload, string $contentType = self::contentTypes['apiWordpressInstallQuickPost'][0])
    {
        return $this->apiWordpressInstallQuickPostAsyncWithHttpInfo($payload, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiWordpressInstallQuickPostAsyncWithHttpInfo
     *
     * Performs quick new wordpress installation in a given location
     *
     * @param  \COMPITAUT\DirectAdminAPI\Model\WebWordpressInstallQuickRequest $payload New wordpress installation configuration (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiWordpressInstallQuickPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiWordpressInstallQuickPostAsyncWithHttpInfo($payload, string $contentType = self::contentTypes['apiWordpressInstallQuickPost'][0])
    {
        $returnType = '\COMPITAUT\DirectAdminAPI\Model\WebWordpressInstallResponse';
        $request = $this->apiWordpressInstallQuickPostRequest($payload, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiWordpressInstallQuickPost'
     *
     * @param  \COMPITAUT\DirectAdminAPI\Model\WebWordpressInstallQuickRequest $payload New wordpress installation configuration (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiWordpressInstallQuickPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiWordpressInstallQuickPostRequest($payload, string $contentType = self::contentTypes['apiWordpressInstallQuickPost'][0])
    {

        // verify the required parameter 'payload' is set
        if ($payload === null || (is_array($payload) && count($payload) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $payload when calling apiWordpressInstallQuickPost'
            );
        }


        $resourcePath = '/api/wordpress/install-quick';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($payload)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($payload));
            } else {
                $httpBody = $payload;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiWordpressLocationsGet
     *
     * Returns list of known wordpress installations and potential installation locations.
     *
     * @param  string|null $domain Filter locations by domain name, sub-domains are not accepted (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiWordpressLocationsGet'] to see the possible values for this operation
     *
     * @throws \COMPITAUT\DirectAdminAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \COMPITAUT\DirectAdminAPI\Model\WebWordpressInstallation[]|\COMPITAUT\DirectAdminAPI\Model\ApierrorBadRequest|\COMPITAUT\DirectAdminAPI\Model\ApierrorUnauthorized|\COMPITAUT\DirectAdminAPI\Model\ApierrorLicenseOverused|\COMPITAUT\DirectAdminAPI\Model\ApierrorAccessDenied|\COMPITAUT\DirectAdminAPI\Model\ApierrorInternalError
     */
    public function apiWordpressLocationsGet($domain = null, string $contentType = self::contentTypes['apiWordpressLocationsGet'][0])
    {
        list($response) = $this->apiWordpressLocationsGetWithHttpInfo($domain, $contentType);
        return $response;
    }

    /**
     * Operation apiWordpressLocationsGetWithHttpInfo
     *
     * Returns list of known wordpress installations and potential installation locations.
     *
     * @param  string|null $domain Filter locations by domain name, sub-domains are not accepted (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiWordpressLocationsGet'] to see the possible values for this operation
     *
     * @throws \COMPITAUT\DirectAdminAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \COMPITAUT\DirectAdminAPI\Model\WebWordpressInstallation[]|\COMPITAUT\DirectAdminAPI\Model\ApierrorBadRequest|\COMPITAUT\DirectAdminAPI\Model\ApierrorUnauthorized|\COMPITAUT\DirectAdminAPI\Model\ApierrorLicenseOverused|\COMPITAUT\DirectAdminAPI\Model\ApierrorAccessDenied|\COMPITAUT\DirectAdminAPI\Model\ApierrorInternalError, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiWordpressLocationsGetWithHttpInfo($domain = null, string $contentType = self::contentTypes['apiWordpressLocationsGet'][0])
    {
        $request = $this->apiWordpressLocationsGetRequest($domain, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\COMPITAUT\DirectAdminAPI\Model\WebWordpressInstallation[]',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorBadRequest',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorUnauthorized',
                        $request,
                        $response,
                    );
                case 402:
                    return $this->handleResponseWithDataType(
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorLicenseOverused',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorAccessDenied',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorInternalError',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\COMPITAUT\DirectAdminAPI\Model\WebWordpressInstallation[]',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\WebWordpressInstallation[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorBadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorUnauthorized',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 402:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorLicenseOverused',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorAccessDenied',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorInternalError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation apiWordpressLocationsGetAsync
     *
     * Returns list of known wordpress installations and potential installation locations.
     *
     * @param  string|null $domain Filter locations by domain name, sub-domains are not accepted (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiWordpressLocationsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiWordpressLocationsGetAsync($domain = null, string $contentType = self::contentTypes['apiWordpressLocationsGet'][0])
    {
        return $this->apiWordpressLocationsGetAsyncWithHttpInfo($domain, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiWordpressLocationsGetAsyncWithHttpInfo
     *
     * Returns list of known wordpress installations and potential installation locations.
     *
     * @param  string|null $domain Filter locations by domain name, sub-domains are not accepted (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiWordpressLocationsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiWordpressLocationsGetAsyncWithHttpInfo($domain = null, string $contentType = self::contentTypes['apiWordpressLocationsGet'][0])
    {
        $returnType = '\COMPITAUT\DirectAdminAPI\Model\WebWordpressInstallation[]';
        $request = $this->apiWordpressLocationsGetRequest($domain, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiWordpressLocationsGet'
     *
     * @param  string|null $domain Filter locations by domain name, sub-domains are not accepted (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiWordpressLocationsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiWordpressLocationsGetRequest($domain = null, string $contentType = self::contentTypes['apiWordpressLocationsGet'][0])
    {



        $resourcePath = '/api/wordpress/locations';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $domain,
            'domain', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiWordpressLocationsLocationIdConfigAutoUpdatePut
     *
     * Change wordpress core auto update state.
     *
     * @param  string $locationId WordPress location ID (required)
     * @param  \COMPITAUT\DirectAdminAPI\Model\WebWordpressUpdateState $payload New configuration (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiWordpressLocationsLocationIdConfigAutoUpdatePut'] to see the possible values for this operation
     *
     * @throws \COMPITAUT\DirectAdminAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiWordpressLocationsLocationIdConfigAutoUpdatePut($locationId, $payload, string $contentType = self::contentTypes['apiWordpressLocationsLocationIdConfigAutoUpdatePut'][0])
    {
        $this->apiWordpressLocationsLocationIdConfigAutoUpdatePutWithHttpInfo($locationId, $payload, $contentType);
    }

    /**
     * Operation apiWordpressLocationsLocationIdConfigAutoUpdatePutWithHttpInfo
     *
     * Change wordpress core auto update state.
     *
     * @param  string $locationId WordPress location ID (required)
     * @param  \COMPITAUT\DirectAdminAPI\Model\WebWordpressUpdateState $payload New configuration (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiWordpressLocationsLocationIdConfigAutoUpdatePut'] to see the possible values for this operation
     *
     * @throws \COMPITAUT\DirectAdminAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiWordpressLocationsLocationIdConfigAutoUpdatePutWithHttpInfo($locationId, $payload, string $contentType = self::contentTypes['apiWordpressLocationsLocationIdConfigAutoUpdatePut'][0])
    {
        $request = $this->apiWordpressLocationsLocationIdConfigAutoUpdatePutRequest($locationId, $payload, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorBadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorUnauthorized',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 402:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorLicenseOverused',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorAccessDenied',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorInternalError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation apiWordpressLocationsLocationIdConfigAutoUpdatePutAsync
     *
     * Change wordpress core auto update state.
     *
     * @param  string $locationId WordPress location ID (required)
     * @param  \COMPITAUT\DirectAdminAPI\Model\WebWordpressUpdateState $payload New configuration (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiWordpressLocationsLocationIdConfigAutoUpdatePut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiWordpressLocationsLocationIdConfigAutoUpdatePutAsync($locationId, $payload, string $contentType = self::contentTypes['apiWordpressLocationsLocationIdConfigAutoUpdatePut'][0])
    {
        return $this->apiWordpressLocationsLocationIdConfigAutoUpdatePutAsyncWithHttpInfo($locationId, $payload, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiWordpressLocationsLocationIdConfigAutoUpdatePutAsyncWithHttpInfo
     *
     * Change wordpress core auto update state.
     *
     * @param  string $locationId WordPress location ID (required)
     * @param  \COMPITAUT\DirectAdminAPI\Model\WebWordpressUpdateState $payload New configuration (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiWordpressLocationsLocationIdConfigAutoUpdatePut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiWordpressLocationsLocationIdConfigAutoUpdatePutAsyncWithHttpInfo($locationId, $payload, string $contentType = self::contentTypes['apiWordpressLocationsLocationIdConfigAutoUpdatePut'][0])
    {
        $returnType = '';
        $request = $this->apiWordpressLocationsLocationIdConfigAutoUpdatePutRequest($locationId, $payload, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiWordpressLocationsLocationIdConfigAutoUpdatePut'
     *
     * @param  string $locationId WordPress location ID (required)
     * @param  \COMPITAUT\DirectAdminAPI\Model\WebWordpressUpdateState $payload New configuration (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiWordpressLocationsLocationIdConfigAutoUpdatePut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiWordpressLocationsLocationIdConfigAutoUpdatePutRequest($locationId, $payload, string $contentType = self::contentTypes['apiWordpressLocationsLocationIdConfigAutoUpdatePut'][0])
    {

        // verify the required parameter 'locationId' is set
        if ($locationId === null || (is_array($locationId) && count($locationId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $locationId when calling apiWordpressLocationsLocationIdConfigAutoUpdatePut'
            );
        }

        // verify the required parameter 'payload' is set
        if ($payload === null || (is_array($payload) && count($payload) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $payload when calling apiWordpressLocationsLocationIdConfigAutoUpdatePut'
            );
        }


        $resourcePath = '/api/wordpress/locations/{location_id}/config/auto-update';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($locationId !== null) {
            $resourcePath = str_replace(
                '{' . 'location_id' . '}',
                ObjectSerializer::toPathValue($locationId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($payload)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($payload));
            } else {
                $httpBody = $payload;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiWordpressLocationsLocationIdConfigGet
     *
     * Retrieve wordpress database configuration for a single installation.
     *
     * @param  string $locationId WordPress location ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiWordpressLocationsLocationIdConfigGet'] to see the possible values for this operation
     *
     * @throws \COMPITAUT\DirectAdminAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \COMPITAUT\DirectAdminAPI\Model\WebWordpressConfig|\COMPITAUT\DirectAdminAPI\Model\ApierrorBadRequest|\COMPITAUT\DirectAdminAPI\Model\ApierrorUnauthorized|\COMPITAUT\DirectAdminAPI\Model\ApierrorLicenseOverused|\COMPITAUT\DirectAdminAPI\Model\ApierrorAccessDenied|\COMPITAUT\DirectAdminAPI\Model\ApierrorInternalError
     */
    public function apiWordpressLocationsLocationIdConfigGet($locationId, string $contentType = self::contentTypes['apiWordpressLocationsLocationIdConfigGet'][0])
    {
        list($response) = $this->apiWordpressLocationsLocationIdConfigGetWithHttpInfo($locationId, $contentType);
        return $response;
    }

    /**
     * Operation apiWordpressLocationsLocationIdConfigGetWithHttpInfo
     *
     * Retrieve wordpress database configuration for a single installation.
     *
     * @param  string $locationId WordPress location ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiWordpressLocationsLocationIdConfigGet'] to see the possible values for this operation
     *
     * @throws \COMPITAUT\DirectAdminAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \COMPITAUT\DirectAdminAPI\Model\WebWordpressConfig|\COMPITAUT\DirectAdminAPI\Model\ApierrorBadRequest|\COMPITAUT\DirectAdminAPI\Model\ApierrorUnauthorized|\COMPITAUT\DirectAdminAPI\Model\ApierrorLicenseOverused|\COMPITAUT\DirectAdminAPI\Model\ApierrorAccessDenied|\COMPITAUT\DirectAdminAPI\Model\ApierrorInternalError, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiWordpressLocationsLocationIdConfigGetWithHttpInfo($locationId, string $contentType = self::contentTypes['apiWordpressLocationsLocationIdConfigGet'][0])
    {
        $request = $this->apiWordpressLocationsLocationIdConfigGetRequest($locationId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\COMPITAUT\DirectAdminAPI\Model\WebWordpressConfig',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorBadRequest',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorUnauthorized',
                        $request,
                        $response,
                    );
                case 402:
                    return $this->handleResponseWithDataType(
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorLicenseOverused',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorAccessDenied',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorInternalError',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\COMPITAUT\DirectAdminAPI\Model\WebWordpressConfig',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\WebWordpressConfig',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorBadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorUnauthorized',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 402:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorLicenseOverused',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorAccessDenied',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorInternalError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation apiWordpressLocationsLocationIdConfigGetAsync
     *
     * Retrieve wordpress database configuration for a single installation.
     *
     * @param  string $locationId WordPress location ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiWordpressLocationsLocationIdConfigGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiWordpressLocationsLocationIdConfigGetAsync($locationId, string $contentType = self::contentTypes['apiWordpressLocationsLocationIdConfigGet'][0])
    {
        return $this->apiWordpressLocationsLocationIdConfigGetAsyncWithHttpInfo($locationId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiWordpressLocationsLocationIdConfigGetAsyncWithHttpInfo
     *
     * Retrieve wordpress database configuration for a single installation.
     *
     * @param  string $locationId WordPress location ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiWordpressLocationsLocationIdConfigGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiWordpressLocationsLocationIdConfigGetAsyncWithHttpInfo($locationId, string $contentType = self::contentTypes['apiWordpressLocationsLocationIdConfigGet'][0])
    {
        $returnType = '\COMPITAUT\DirectAdminAPI\Model\WebWordpressConfig';
        $request = $this->apiWordpressLocationsLocationIdConfigGetRequest($locationId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiWordpressLocationsLocationIdConfigGet'
     *
     * @param  string $locationId WordPress location ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiWordpressLocationsLocationIdConfigGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiWordpressLocationsLocationIdConfigGetRequest($locationId, string $contentType = self::contentTypes['apiWordpressLocationsLocationIdConfigGet'][0])
    {

        // verify the required parameter 'locationId' is set
        if ($locationId === null || (is_array($locationId) && count($locationId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $locationId when calling apiWordpressLocationsLocationIdConfigGet'
            );
        }


        $resourcePath = '/api/wordpress/locations/{location_id}/config';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($locationId !== null) {
            $resourcePath = str_replace(
                '{' . 'location_id' . '}',
                ObjectSerializer::toPathValue($locationId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiWordpressLocationsLocationIdConfigPut
     *
     * Change wordpress database configuration for a single installation.
     *
     * @param  string $locationId WordPress location ID (required)
     * @param  \COMPITAUT\DirectAdminAPI\Model\WebWordpressConfig $payload New configuration (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiWordpressLocationsLocationIdConfigPut'] to see the possible values for this operation
     *
     * @throws \COMPITAUT\DirectAdminAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \COMPITAUT\DirectAdminAPI\Model\WebWordpressConfig|\COMPITAUT\DirectAdminAPI\Model\ApierrorBadRequest|\COMPITAUT\DirectAdminAPI\Model\ApierrorUnauthorized|\COMPITAUT\DirectAdminAPI\Model\ApierrorLicenseOverused|\COMPITAUT\DirectAdminAPI\Model\ApierrorAccessDenied|\COMPITAUT\DirectAdminAPI\Model\ApierrorInternalError
     */
    public function apiWordpressLocationsLocationIdConfigPut($locationId, $payload, string $contentType = self::contentTypes['apiWordpressLocationsLocationIdConfigPut'][0])
    {
        list($response) = $this->apiWordpressLocationsLocationIdConfigPutWithHttpInfo($locationId, $payload, $contentType);
        return $response;
    }

    /**
     * Operation apiWordpressLocationsLocationIdConfigPutWithHttpInfo
     *
     * Change wordpress database configuration for a single installation.
     *
     * @param  string $locationId WordPress location ID (required)
     * @param  \COMPITAUT\DirectAdminAPI\Model\WebWordpressConfig $payload New configuration (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiWordpressLocationsLocationIdConfigPut'] to see the possible values for this operation
     *
     * @throws \COMPITAUT\DirectAdminAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \COMPITAUT\DirectAdminAPI\Model\WebWordpressConfig|\COMPITAUT\DirectAdminAPI\Model\ApierrorBadRequest|\COMPITAUT\DirectAdminAPI\Model\ApierrorUnauthorized|\COMPITAUT\DirectAdminAPI\Model\ApierrorLicenseOverused|\COMPITAUT\DirectAdminAPI\Model\ApierrorAccessDenied|\COMPITAUT\DirectAdminAPI\Model\ApierrorInternalError, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiWordpressLocationsLocationIdConfigPutWithHttpInfo($locationId, $payload, string $contentType = self::contentTypes['apiWordpressLocationsLocationIdConfigPut'][0])
    {
        $request = $this->apiWordpressLocationsLocationIdConfigPutRequest($locationId, $payload, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\COMPITAUT\DirectAdminAPI\Model\WebWordpressConfig',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorBadRequest',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorUnauthorized',
                        $request,
                        $response,
                    );
                case 402:
                    return $this->handleResponseWithDataType(
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorLicenseOverused',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorAccessDenied',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorInternalError',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\COMPITAUT\DirectAdminAPI\Model\WebWordpressConfig',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\WebWordpressConfig',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorBadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorUnauthorized',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 402:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorLicenseOverused',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorAccessDenied',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorInternalError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation apiWordpressLocationsLocationIdConfigPutAsync
     *
     * Change wordpress database configuration for a single installation.
     *
     * @param  string $locationId WordPress location ID (required)
     * @param  \COMPITAUT\DirectAdminAPI\Model\WebWordpressConfig $payload New configuration (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiWordpressLocationsLocationIdConfigPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiWordpressLocationsLocationIdConfigPutAsync($locationId, $payload, string $contentType = self::contentTypes['apiWordpressLocationsLocationIdConfigPut'][0])
    {
        return $this->apiWordpressLocationsLocationIdConfigPutAsyncWithHttpInfo($locationId, $payload, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiWordpressLocationsLocationIdConfigPutAsyncWithHttpInfo
     *
     * Change wordpress database configuration for a single installation.
     *
     * @param  string $locationId WordPress location ID (required)
     * @param  \COMPITAUT\DirectAdminAPI\Model\WebWordpressConfig $payload New configuration (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiWordpressLocationsLocationIdConfigPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiWordpressLocationsLocationIdConfigPutAsyncWithHttpInfo($locationId, $payload, string $contentType = self::contentTypes['apiWordpressLocationsLocationIdConfigPut'][0])
    {
        $returnType = '\COMPITAUT\DirectAdminAPI\Model\WebWordpressConfig';
        $request = $this->apiWordpressLocationsLocationIdConfigPutRequest($locationId, $payload, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiWordpressLocationsLocationIdConfigPut'
     *
     * @param  string $locationId WordPress location ID (required)
     * @param  \COMPITAUT\DirectAdminAPI\Model\WebWordpressConfig $payload New configuration (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiWordpressLocationsLocationIdConfigPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiWordpressLocationsLocationIdConfigPutRequest($locationId, $payload, string $contentType = self::contentTypes['apiWordpressLocationsLocationIdConfigPut'][0])
    {

        // verify the required parameter 'locationId' is set
        if ($locationId === null || (is_array($locationId) && count($locationId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $locationId when calling apiWordpressLocationsLocationIdConfigPut'
            );
        }

        // verify the required parameter 'payload' is set
        if ($payload === null || (is_array($payload) && count($payload) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $payload when calling apiWordpressLocationsLocationIdConfigPut'
            );
        }


        $resourcePath = '/api/wordpress/locations/{location_id}/config';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($locationId !== null) {
            $resourcePath = str_replace(
                '{' . 'location_id' . '}',
                ObjectSerializer::toPathValue($locationId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($payload)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($payload));
            } else {
                $httpBody = $payload;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiWordpressLocationsLocationIdDelete
     *
     * Remove wordpress installation.
     *
     * @param  string $locationId WordPress location ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiWordpressLocationsLocationIdDelete'] to see the possible values for this operation
     *
     * @throws \COMPITAUT\DirectAdminAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiWordpressLocationsLocationIdDelete($locationId, string $contentType = self::contentTypes['apiWordpressLocationsLocationIdDelete'][0])
    {
        $this->apiWordpressLocationsLocationIdDeleteWithHttpInfo($locationId, $contentType);
    }

    /**
     * Operation apiWordpressLocationsLocationIdDeleteWithHttpInfo
     *
     * Remove wordpress installation.
     *
     * @param  string $locationId WordPress location ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiWordpressLocationsLocationIdDelete'] to see the possible values for this operation
     *
     * @throws \COMPITAUT\DirectAdminAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiWordpressLocationsLocationIdDeleteWithHttpInfo($locationId, string $contentType = self::contentTypes['apiWordpressLocationsLocationIdDelete'][0])
    {
        $request = $this->apiWordpressLocationsLocationIdDeleteRequest($locationId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorBadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorUnauthorized',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 402:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorLicenseOverused',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorAccessDenied',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorPreHookError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorInternalError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation apiWordpressLocationsLocationIdDeleteAsync
     *
     * Remove wordpress installation.
     *
     * @param  string $locationId WordPress location ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiWordpressLocationsLocationIdDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiWordpressLocationsLocationIdDeleteAsync($locationId, string $contentType = self::contentTypes['apiWordpressLocationsLocationIdDelete'][0])
    {
        return $this->apiWordpressLocationsLocationIdDeleteAsyncWithHttpInfo($locationId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiWordpressLocationsLocationIdDeleteAsyncWithHttpInfo
     *
     * Remove wordpress installation.
     *
     * @param  string $locationId WordPress location ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiWordpressLocationsLocationIdDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiWordpressLocationsLocationIdDeleteAsyncWithHttpInfo($locationId, string $contentType = self::contentTypes['apiWordpressLocationsLocationIdDelete'][0])
    {
        $returnType = '';
        $request = $this->apiWordpressLocationsLocationIdDeleteRequest($locationId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiWordpressLocationsLocationIdDelete'
     *
     * @param  string $locationId WordPress location ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiWordpressLocationsLocationIdDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiWordpressLocationsLocationIdDeleteRequest($locationId, string $contentType = self::contentTypes['apiWordpressLocationsLocationIdDelete'][0])
    {

        // verify the required parameter 'locationId' is set
        if ($locationId === null || (is_array($locationId) && count($locationId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $locationId when calling apiWordpressLocationsLocationIdDelete'
            );
        }


        $resourcePath = '/api/wordpress/locations/{location_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($locationId !== null) {
            $resourcePath = str_replace(
                '{' . 'location_id' . '}',
                ObjectSerializer::toPathValue($locationId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiWordpressLocationsLocationIdOptionsGet
     *
     * Retrieve all wordpress options for a single installation.
     *
     * @param  string $locationId WordPress location ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiWordpressLocationsLocationIdOptionsGet'] to see the possible values for this operation
     *
     * @throws \COMPITAUT\DirectAdminAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array<string,string>|\COMPITAUT\DirectAdminAPI\Model\ApierrorBadRequest|\COMPITAUT\DirectAdminAPI\Model\ApierrorUnauthorized|\COMPITAUT\DirectAdminAPI\Model\ApierrorLicenseOverused|\COMPITAUT\DirectAdminAPI\Model\ApierrorAccessDenied|\COMPITAUT\DirectAdminAPI\Model\ApierrorInternalError
     */
    public function apiWordpressLocationsLocationIdOptionsGet($locationId, string $contentType = self::contentTypes['apiWordpressLocationsLocationIdOptionsGet'][0])
    {
        list($response) = $this->apiWordpressLocationsLocationIdOptionsGetWithHttpInfo($locationId, $contentType);
        return $response;
    }

    /**
     * Operation apiWordpressLocationsLocationIdOptionsGetWithHttpInfo
     *
     * Retrieve all wordpress options for a single installation.
     *
     * @param  string $locationId WordPress location ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiWordpressLocationsLocationIdOptionsGet'] to see the possible values for this operation
     *
     * @throws \COMPITAUT\DirectAdminAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of array<string,string>|\COMPITAUT\DirectAdminAPI\Model\ApierrorBadRequest|\COMPITAUT\DirectAdminAPI\Model\ApierrorUnauthorized|\COMPITAUT\DirectAdminAPI\Model\ApierrorLicenseOverused|\COMPITAUT\DirectAdminAPI\Model\ApierrorAccessDenied|\COMPITAUT\DirectAdminAPI\Model\ApierrorInternalError, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiWordpressLocationsLocationIdOptionsGetWithHttpInfo($locationId, string $contentType = self::contentTypes['apiWordpressLocationsLocationIdOptionsGet'][0])
    {
        $request = $this->apiWordpressLocationsLocationIdOptionsGetRequest($locationId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        'array<string,string>',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorBadRequest',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorUnauthorized',
                        $request,
                        $response,
                    );
                case 402:
                    return $this->handleResponseWithDataType(
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorLicenseOverused',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorAccessDenied',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorInternalError',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                'array<string,string>',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,string>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorBadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorUnauthorized',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 402:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorLicenseOverused',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorAccessDenied',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorInternalError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation apiWordpressLocationsLocationIdOptionsGetAsync
     *
     * Retrieve all wordpress options for a single installation.
     *
     * @param  string $locationId WordPress location ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiWordpressLocationsLocationIdOptionsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiWordpressLocationsLocationIdOptionsGetAsync($locationId, string $contentType = self::contentTypes['apiWordpressLocationsLocationIdOptionsGet'][0])
    {
        return $this->apiWordpressLocationsLocationIdOptionsGetAsyncWithHttpInfo($locationId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiWordpressLocationsLocationIdOptionsGetAsyncWithHttpInfo
     *
     * Retrieve all wordpress options for a single installation.
     *
     * @param  string $locationId WordPress location ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiWordpressLocationsLocationIdOptionsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiWordpressLocationsLocationIdOptionsGetAsyncWithHttpInfo($locationId, string $contentType = self::contentTypes['apiWordpressLocationsLocationIdOptionsGet'][0])
    {
        $returnType = 'array<string,string>';
        $request = $this->apiWordpressLocationsLocationIdOptionsGetRequest($locationId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiWordpressLocationsLocationIdOptionsGet'
     *
     * @param  string $locationId WordPress location ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiWordpressLocationsLocationIdOptionsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiWordpressLocationsLocationIdOptionsGetRequest($locationId, string $contentType = self::contentTypes['apiWordpressLocationsLocationIdOptionsGet'][0])
    {

        // verify the required parameter 'locationId' is set
        if ($locationId === null || (is_array($locationId) && count($locationId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $locationId when calling apiWordpressLocationsLocationIdOptionsGet'
            );
        }


        $resourcePath = '/api/wordpress/locations/{location_id}/options';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($locationId !== null) {
            $resourcePath = str_replace(
                '{' . 'location_id' . '}',
                ObjectSerializer::toPathValue($locationId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiWordpressLocationsLocationIdOptionsPatch
     *
     * Change wordpress options for a given installation.
     *
     * @param  string $locationId WordPress location ID (required)
     * @param  array<string,string> $payload Set of options to change, nil value deletes option (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiWordpressLocationsLocationIdOptionsPatch'] to see the possible values for this operation
     *
     * @throws \COMPITAUT\DirectAdminAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array<string,string>|\COMPITAUT\DirectAdminAPI\Model\ApierrorBadRequest|\COMPITAUT\DirectAdminAPI\Model\ApierrorUnauthorized|\COMPITAUT\DirectAdminAPI\Model\ApierrorLicenseOverused|\COMPITAUT\DirectAdminAPI\Model\ApierrorAccessDenied|\COMPITAUT\DirectAdminAPI\Model\ApierrorInternalError
     */
    public function apiWordpressLocationsLocationIdOptionsPatch($locationId, $payload, string $contentType = self::contentTypes['apiWordpressLocationsLocationIdOptionsPatch'][0])
    {
        list($response) = $this->apiWordpressLocationsLocationIdOptionsPatchWithHttpInfo($locationId, $payload, $contentType);
        return $response;
    }

    /**
     * Operation apiWordpressLocationsLocationIdOptionsPatchWithHttpInfo
     *
     * Change wordpress options for a given installation.
     *
     * @param  string $locationId WordPress location ID (required)
     * @param  array<string,string> $payload Set of options to change, nil value deletes option (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiWordpressLocationsLocationIdOptionsPatch'] to see the possible values for this operation
     *
     * @throws \COMPITAUT\DirectAdminAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of array<string,string>|\COMPITAUT\DirectAdminAPI\Model\ApierrorBadRequest|\COMPITAUT\DirectAdminAPI\Model\ApierrorUnauthorized|\COMPITAUT\DirectAdminAPI\Model\ApierrorLicenseOverused|\COMPITAUT\DirectAdminAPI\Model\ApierrorAccessDenied|\COMPITAUT\DirectAdminAPI\Model\ApierrorInternalError, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiWordpressLocationsLocationIdOptionsPatchWithHttpInfo($locationId, $payload, string $contentType = self::contentTypes['apiWordpressLocationsLocationIdOptionsPatch'][0])
    {
        $request = $this->apiWordpressLocationsLocationIdOptionsPatchRequest($locationId, $payload, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        'array<string,string>',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorBadRequest',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorUnauthorized',
                        $request,
                        $response,
                    );
                case 402:
                    return $this->handleResponseWithDataType(
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorLicenseOverused',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorAccessDenied',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorInternalError',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                'array<string,string>',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,string>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorBadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorUnauthorized',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 402:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorLicenseOverused',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorAccessDenied',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorInternalError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation apiWordpressLocationsLocationIdOptionsPatchAsync
     *
     * Change wordpress options for a given installation.
     *
     * @param  string $locationId WordPress location ID (required)
     * @param  array<string,string> $payload Set of options to change, nil value deletes option (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiWordpressLocationsLocationIdOptionsPatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiWordpressLocationsLocationIdOptionsPatchAsync($locationId, $payload, string $contentType = self::contentTypes['apiWordpressLocationsLocationIdOptionsPatch'][0])
    {
        return $this->apiWordpressLocationsLocationIdOptionsPatchAsyncWithHttpInfo($locationId, $payload, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiWordpressLocationsLocationIdOptionsPatchAsyncWithHttpInfo
     *
     * Change wordpress options for a given installation.
     *
     * @param  string $locationId WordPress location ID (required)
     * @param  array<string,string> $payload Set of options to change, nil value deletes option (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiWordpressLocationsLocationIdOptionsPatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiWordpressLocationsLocationIdOptionsPatchAsyncWithHttpInfo($locationId, $payload, string $contentType = self::contentTypes['apiWordpressLocationsLocationIdOptionsPatch'][0])
    {
        $returnType = 'array<string,string>';
        $request = $this->apiWordpressLocationsLocationIdOptionsPatchRequest($locationId, $payload, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiWordpressLocationsLocationIdOptionsPatch'
     *
     * @param  string $locationId WordPress location ID (required)
     * @param  array<string,string> $payload Set of options to change, nil value deletes option (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiWordpressLocationsLocationIdOptionsPatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiWordpressLocationsLocationIdOptionsPatchRequest($locationId, $payload, string $contentType = self::contentTypes['apiWordpressLocationsLocationIdOptionsPatch'][0])
    {

        // verify the required parameter 'locationId' is set
        if ($locationId === null || (is_array($locationId) && count($locationId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $locationId when calling apiWordpressLocationsLocationIdOptionsPatch'
            );
        }

        // verify the required parameter 'payload' is set
        if ($payload === null || (is_array($payload) && count($payload) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $payload when calling apiWordpressLocationsLocationIdOptionsPatch'
            );
        }


        $resourcePath = '/api/wordpress/locations/{location_id}/options';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($locationId !== null) {
            $resourcePath = str_replace(
                '{' . 'location_id' . '}',
                ObjectSerializer::toPathValue($locationId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($payload)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($payload));
            } else {
                $httpBody = $payload;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PATCH',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiWordpressLocationsLocationIdUsersGet
     *
     * Retrieve all wordpress user accounts
     *
     * @param  string $locationId WordPress location ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiWordpressLocationsLocationIdUsersGet'] to see the possible values for this operation
     *
     * @throws \COMPITAUT\DirectAdminAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \COMPITAUT\DirectAdminAPI\Model\WebWordpressUser[]|\COMPITAUT\DirectAdminAPI\Model\ApierrorBadRequest|\COMPITAUT\DirectAdminAPI\Model\ApierrorUnauthorized|\COMPITAUT\DirectAdminAPI\Model\ApierrorLicenseOverused|\COMPITAUT\DirectAdminAPI\Model\ApierrorAccessDenied|\COMPITAUT\DirectAdminAPI\Model\ApierrorInternalError
     */
    public function apiWordpressLocationsLocationIdUsersGet($locationId, string $contentType = self::contentTypes['apiWordpressLocationsLocationIdUsersGet'][0])
    {
        list($response) = $this->apiWordpressLocationsLocationIdUsersGetWithHttpInfo($locationId, $contentType);
        return $response;
    }

    /**
     * Operation apiWordpressLocationsLocationIdUsersGetWithHttpInfo
     *
     * Retrieve all wordpress user accounts
     *
     * @param  string $locationId WordPress location ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiWordpressLocationsLocationIdUsersGet'] to see the possible values for this operation
     *
     * @throws \COMPITAUT\DirectAdminAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \COMPITAUT\DirectAdminAPI\Model\WebWordpressUser[]|\COMPITAUT\DirectAdminAPI\Model\ApierrorBadRequest|\COMPITAUT\DirectAdminAPI\Model\ApierrorUnauthorized|\COMPITAUT\DirectAdminAPI\Model\ApierrorLicenseOverused|\COMPITAUT\DirectAdminAPI\Model\ApierrorAccessDenied|\COMPITAUT\DirectAdminAPI\Model\ApierrorInternalError, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiWordpressLocationsLocationIdUsersGetWithHttpInfo($locationId, string $contentType = self::contentTypes['apiWordpressLocationsLocationIdUsersGet'][0])
    {
        $request = $this->apiWordpressLocationsLocationIdUsersGetRequest($locationId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\COMPITAUT\DirectAdminAPI\Model\WebWordpressUser[]',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorBadRequest',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorUnauthorized',
                        $request,
                        $response,
                    );
                case 402:
                    return $this->handleResponseWithDataType(
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorLicenseOverused',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorAccessDenied',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorInternalError',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\COMPITAUT\DirectAdminAPI\Model\WebWordpressUser[]',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\WebWordpressUser[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorBadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorUnauthorized',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 402:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorLicenseOverused',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorAccessDenied',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorInternalError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation apiWordpressLocationsLocationIdUsersGetAsync
     *
     * Retrieve all wordpress user accounts
     *
     * @param  string $locationId WordPress location ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiWordpressLocationsLocationIdUsersGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiWordpressLocationsLocationIdUsersGetAsync($locationId, string $contentType = self::contentTypes['apiWordpressLocationsLocationIdUsersGet'][0])
    {
        return $this->apiWordpressLocationsLocationIdUsersGetAsyncWithHttpInfo($locationId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiWordpressLocationsLocationIdUsersGetAsyncWithHttpInfo
     *
     * Retrieve all wordpress user accounts
     *
     * @param  string $locationId WordPress location ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiWordpressLocationsLocationIdUsersGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiWordpressLocationsLocationIdUsersGetAsyncWithHttpInfo($locationId, string $contentType = self::contentTypes['apiWordpressLocationsLocationIdUsersGet'][0])
    {
        $returnType = '\COMPITAUT\DirectAdminAPI\Model\WebWordpressUser[]';
        $request = $this->apiWordpressLocationsLocationIdUsersGetRequest($locationId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiWordpressLocationsLocationIdUsersGet'
     *
     * @param  string $locationId WordPress location ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiWordpressLocationsLocationIdUsersGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiWordpressLocationsLocationIdUsersGetRequest($locationId, string $contentType = self::contentTypes['apiWordpressLocationsLocationIdUsersGet'][0])
    {

        // verify the required parameter 'locationId' is set
        if ($locationId === null || (is_array($locationId) && count($locationId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $locationId when calling apiWordpressLocationsLocationIdUsersGet'
            );
        }


        $resourcePath = '/api/wordpress/locations/{location_id}/users';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($locationId !== null) {
            $resourcePath = str_replace(
                '{' . 'location_id' . '}',
                ObjectSerializer::toPathValue($locationId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiWordpressLocationsLocationIdUsersUserIdChangePasswordPost
     *
     * Change wordpress user account password
     *
     * @param  string $locationId WordPress location ID (required)
     * @param  int $userId User ID (required)
     * @param  \COMPITAUT\DirectAdminAPI\Model\WebWordpressUserPassword $payload payload (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiWordpressLocationsLocationIdUsersUserIdChangePasswordPost'] to see the possible values for this operation
     *
     * @throws \COMPITAUT\DirectAdminAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiWordpressLocationsLocationIdUsersUserIdChangePasswordPost($locationId, $userId, $payload, string $contentType = self::contentTypes['apiWordpressLocationsLocationIdUsersUserIdChangePasswordPost'][0])
    {
        $this->apiWordpressLocationsLocationIdUsersUserIdChangePasswordPostWithHttpInfo($locationId, $userId, $payload, $contentType);
    }

    /**
     * Operation apiWordpressLocationsLocationIdUsersUserIdChangePasswordPostWithHttpInfo
     *
     * Change wordpress user account password
     *
     * @param  string $locationId WordPress location ID (required)
     * @param  int $userId User ID (required)
     * @param  \COMPITAUT\DirectAdminAPI\Model\WebWordpressUserPassword $payload payload (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiWordpressLocationsLocationIdUsersUserIdChangePasswordPost'] to see the possible values for this operation
     *
     * @throws \COMPITAUT\DirectAdminAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiWordpressLocationsLocationIdUsersUserIdChangePasswordPostWithHttpInfo($locationId, $userId, $payload, string $contentType = self::contentTypes['apiWordpressLocationsLocationIdUsersUserIdChangePasswordPost'][0])
    {
        $request = $this->apiWordpressLocationsLocationIdUsersUserIdChangePasswordPostRequest($locationId, $userId, $payload, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorBadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorUnauthorized',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 402:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorLicenseOverused',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorAccessDenied',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorInternalError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation apiWordpressLocationsLocationIdUsersUserIdChangePasswordPostAsync
     *
     * Change wordpress user account password
     *
     * @param  string $locationId WordPress location ID (required)
     * @param  int $userId User ID (required)
     * @param  \COMPITAUT\DirectAdminAPI\Model\WebWordpressUserPassword $payload payload (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiWordpressLocationsLocationIdUsersUserIdChangePasswordPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiWordpressLocationsLocationIdUsersUserIdChangePasswordPostAsync($locationId, $userId, $payload, string $contentType = self::contentTypes['apiWordpressLocationsLocationIdUsersUserIdChangePasswordPost'][0])
    {
        return $this->apiWordpressLocationsLocationIdUsersUserIdChangePasswordPostAsyncWithHttpInfo($locationId, $userId, $payload, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiWordpressLocationsLocationIdUsersUserIdChangePasswordPostAsyncWithHttpInfo
     *
     * Change wordpress user account password
     *
     * @param  string $locationId WordPress location ID (required)
     * @param  int $userId User ID (required)
     * @param  \COMPITAUT\DirectAdminAPI\Model\WebWordpressUserPassword $payload payload (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiWordpressLocationsLocationIdUsersUserIdChangePasswordPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiWordpressLocationsLocationIdUsersUserIdChangePasswordPostAsyncWithHttpInfo($locationId, $userId, $payload, string $contentType = self::contentTypes['apiWordpressLocationsLocationIdUsersUserIdChangePasswordPost'][0])
    {
        $returnType = '';
        $request = $this->apiWordpressLocationsLocationIdUsersUserIdChangePasswordPostRequest($locationId, $userId, $payload, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiWordpressLocationsLocationIdUsersUserIdChangePasswordPost'
     *
     * @param  string $locationId WordPress location ID (required)
     * @param  int $userId User ID (required)
     * @param  \COMPITAUT\DirectAdminAPI\Model\WebWordpressUserPassword $payload payload (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiWordpressLocationsLocationIdUsersUserIdChangePasswordPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiWordpressLocationsLocationIdUsersUserIdChangePasswordPostRequest($locationId, $userId, $payload, string $contentType = self::contentTypes['apiWordpressLocationsLocationIdUsersUserIdChangePasswordPost'][0])
    {

        // verify the required parameter 'locationId' is set
        if ($locationId === null || (is_array($locationId) && count($locationId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $locationId when calling apiWordpressLocationsLocationIdUsersUserIdChangePasswordPost'
            );
        }

        // verify the required parameter 'userId' is set
        if ($userId === null || (is_array($userId) && count($userId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $userId when calling apiWordpressLocationsLocationIdUsersUserIdChangePasswordPost'
            );
        }

        // verify the required parameter 'payload' is set
        if ($payload === null || (is_array($payload) && count($payload) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $payload when calling apiWordpressLocationsLocationIdUsersUserIdChangePasswordPost'
            );
        }


        $resourcePath = '/api/wordpress/locations/{location_id}/users/{user_id}/change-password';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($locationId !== null) {
            $resourcePath = str_replace(
                '{' . 'location_id' . '}',
                ObjectSerializer::toPathValue($locationId),
                $resourcePath
            );
        }
        // path params
        if ($userId !== null) {
            $resourcePath = str_replace(
                '{' . 'user_id' . '}',
                ObjectSerializer::toPathValue($userId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($payload)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($payload));
            } else {
                $httpBody = $payload;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiWordpressLocationsLocationIdUsersUserIdSsoLoginPost
     *
     * Create magic login URL.
     *
     * @param  string $locationId WordPress location ID (required)
     * @param  int $userId User ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiWordpressLocationsLocationIdUsersUserIdSsoLoginPost'] to see the possible values for this operation
     *
     * @throws \COMPITAUT\DirectAdminAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \COMPITAUT\DirectAdminAPI\Model\WebWordpressSSO|\COMPITAUT\DirectAdminAPI\Model\ApierrorBadRequest|\COMPITAUT\DirectAdminAPI\Model\ApierrorUnauthorized|\COMPITAUT\DirectAdminAPI\Model\ApierrorLicenseOverused|\COMPITAUT\DirectAdminAPI\Model\ApierrorAccessDenied|\COMPITAUT\DirectAdminAPI\Model\ApierrorInternalError
     */
    public function apiWordpressLocationsLocationIdUsersUserIdSsoLoginPost($locationId, $userId, string $contentType = self::contentTypes['apiWordpressLocationsLocationIdUsersUserIdSsoLoginPost'][0])
    {
        list($response) = $this->apiWordpressLocationsLocationIdUsersUserIdSsoLoginPostWithHttpInfo($locationId, $userId, $contentType);
        return $response;
    }

    /**
     * Operation apiWordpressLocationsLocationIdUsersUserIdSsoLoginPostWithHttpInfo
     *
     * Create magic login URL.
     *
     * @param  string $locationId WordPress location ID (required)
     * @param  int $userId User ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiWordpressLocationsLocationIdUsersUserIdSsoLoginPost'] to see the possible values for this operation
     *
     * @throws \COMPITAUT\DirectAdminAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \COMPITAUT\DirectAdminAPI\Model\WebWordpressSSO|\COMPITAUT\DirectAdminAPI\Model\ApierrorBadRequest|\COMPITAUT\DirectAdminAPI\Model\ApierrorUnauthorized|\COMPITAUT\DirectAdminAPI\Model\ApierrorLicenseOverused|\COMPITAUT\DirectAdminAPI\Model\ApierrorAccessDenied|\COMPITAUT\DirectAdminAPI\Model\ApierrorInternalError, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiWordpressLocationsLocationIdUsersUserIdSsoLoginPostWithHttpInfo($locationId, $userId, string $contentType = self::contentTypes['apiWordpressLocationsLocationIdUsersUserIdSsoLoginPost'][0])
    {
        $request = $this->apiWordpressLocationsLocationIdUsersUserIdSsoLoginPostRequest($locationId, $userId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\COMPITAUT\DirectAdminAPI\Model\WebWordpressSSO',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorBadRequest',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorUnauthorized',
                        $request,
                        $response,
                    );
                case 402:
                    return $this->handleResponseWithDataType(
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorLicenseOverused',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorAccessDenied',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorInternalError',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\COMPITAUT\DirectAdminAPI\Model\WebWordpressSSO',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\WebWordpressSSO',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorBadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorUnauthorized',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 402:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorLicenseOverused',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorAccessDenied',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorInternalError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation apiWordpressLocationsLocationIdUsersUserIdSsoLoginPostAsync
     *
     * Create magic login URL.
     *
     * @param  string $locationId WordPress location ID (required)
     * @param  int $userId User ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiWordpressLocationsLocationIdUsersUserIdSsoLoginPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiWordpressLocationsLocationIdUsersUserIdSsoLoginPostAsync($locationId, $userId, string $contentType = self::contentTypes['apiWordpressLocationsLocationIdUsersUserIdSsoLoginPost'][0])
    {
        return $this->apiWordpressLocationsLocationIdUsersUserIdSsoLoginPostAsyncWithHttpInfo($locationId, $userId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiWordpressLocationsLocationIdUsersUserIdSsoLoginPostAsyncWithHttpInfo
     *
     * Create magic login URL.
     *
     * @param  string $locationId WordPress location ID (required)
     * @param  int $userId User ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiWordpressLocationsLocationIdUsersUserIdSsoLoginPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiWordpressLocationsLocationIdUsersUserIdSsoLoginPostAsyncWithHttpInfo($locationId, $userId, string $contentType = self::contentTypes['apiWordpressLocationsLocationIdUsersUserIdSsoLoginPost'][0])
    {
        $returnType = '\COMPITAUT\DirectAdminAPI\Model\WebWordpressSSO';
        $request = $this->apiWordpressLocationsLocationIdUsersUserIdSsoLoginPostRequest($locationId, $userId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiWordpressLocationsLocationIdUsersUserIdSsoLoginPost'
     *
     * @param  string $locationId WordPress location ID (required)
     * @param  int $userId User ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiWordpressLocationsLocationIdUsersUserIdSsoLoginPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiWordpressLocationsLocationIdUsersUserIdSsoLoginPostRequest($locationId, $userId, string $contentType = self::contentTypes['apiWordpressLocationsLocationIdUsersUserIdSsoLoginPost'][0])
    {

        // verify the required parameter 'locationId' is set
        if ($locationId === null || (is_array($locationId) && count($locationId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $locationId when calling apiWordpressLocationsLocationIdUsersUserIdSsoLoginPost'
            );
        }

        // verify the required parameter 'userId' is set
        if ($userId === null || (is_array($userId) && count($userId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $userId when calling apiWordpressLocationsLocationIdUsersUserIdSsoLoginPost'
            );
        }


        $resourcePath = '/api/wordpress/locations/{location_id}/users/{user_id}/sso-login';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($locationId !== null) {
            $resourcePath = str_replace(
                '{' . 'location_id' . '}',
                ObjectSerializer::toPathValue($locationId),
                $resourcePath
            );
        }
        // path params
        if ($userId !== null) {
            $resourcePath = str_replace(
                '{' . 'user_id' . '}',
                ObjectSerializer::toPathValue($userId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiWordpressLocationsLocationIdWordpressGet
     *
     * Retrieve information about a single WordPress installation
     *
     * @param  string $locationId WordPress location ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiWordpressLocationsLocationIdWordpressGet'] to see the possible values for this operation
     *
     * @throws \COMPITAUT\DirectAdminAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \COMPITAUT\DirectAdminAPI\Model\WebWordpressInstance|\COMPITAUT\DirectAdminAPI\Model\ApierrorBadRequest|\COMPITAUT\DirectAdminAPI\Model\ApierrorUnauthorized|\COMPITAUT\DirectAdminAPI\Model\ApierrorLicenseOverused|\COMPITAUT\DirectAdminAPI\Model\ApierrorAccessDenied|\COMPITAUT\DirectAdminAPI\Model\ApierrorNotFound|\COMPITAUT\DirectAdminAPI\Model\ApierrorInternalError
     */
    public function apiWordpressLocationsLocationIdWordpressGet($locationId, string $contentType = self::contentTypes['apiWordpressLocationsLocationIdWordpressGet'][0])
    {
        list($response) = $this->apiWordpressLocationsLocationIdWordpressGetWithHttpInfo($locationId, $contentType);
        return $response;
    }

    /**
     * Operation apiWordpressLocationsLocationIdWordpressGetWithHttpInfo
     *
     * Retrieve information about a single WordPress installation
     *
     * @param  string $locationId WordPress location ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiWordpressLocationsLocationIdWordpressGet'] to see the possible values for this operation
     *
     * @throws \COMPITAUT\DirectAdminAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \COMPITAUT\DirectAdminAPI\Model\WebWordpressInstance|\COMPITAUT\DirectAdminAPI\Model\ApierrorBadRequest|\COMPITAUT\DirectAdminAPI\Model\ApierrorUnauthorized|\COMPITAUT\DirectAdminAPI\Model\ApierrorLicenseOverused|\COMPITAUT\DirectAdminAPI\Model\ApierrorAccessDenied|\COMPITAUT\DirectAdminAPI\Model\ApierrorNotFound|\COMPITAUT\DirectAdminAPI\Model\ApierrorInternalError, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiWordpressLocationsLocationIdWordpressGetWithHttpInfo($locationId, string $contentType = self::contentTypes['apiWordpressLocationsLocationIdWordpressGet'][0])
    {
        $request = $this->apiWordpressLocationsLocationIdWordpressGetRequest($locationId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\COMPITAUT\DirectAdminAPI\Model\WebWordpressInstance',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorBadRequest',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorUnauthorized',
                        $request,
                        $response,
                    );
                case 402:
                    return $this->handleResponseWithDataType(
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorLicenseOverused',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorAccessDenied',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorNotFound',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorInternalError',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\COMPITAUT\DirectAdminAPI\Model\WebWordpressInstance',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\WebWordpressInstance',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorBadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorUnauthorized',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 402:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorLicenseOverused',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorAccessDenied',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorNotFound',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\COMPITAUT\DirectAdminAPI\Model\ApierrorInternalError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation apiWordpressLocationsLocationIdWordpressGetAsync
     *
     * Retrieve information about a single WordPress installation
     *
     * @param  string $locationId WordPress location ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiWordpressLocationsLocationIdWordpressGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiWordpressLocationsLocationIdWordpressGetAsync($locationId, string $contentType = self::contentTypes['apiWordpressLocationsLocationIdWordpressGet'][0])
    {
        return $this->apiWordpressLocationsLocationIdWordpressGetAsyncWithHttpInfo($locationId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiWordpressLocationsLocationIdWordpressGetAsyncWithHttpInfo
     *
     * Retrieve information about a single WordPress installation
     *
     * @param  string $locationId WordPress location ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiWordpressLocationsLocationIdWordpressGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiWordpressLocationsLocationIdWordpressGetAsyncWithHttpInfo($locationId, string $contentType = self::contentTypes['apiWordpressLocationsLocationIdWordpressGet'][0])
    {
        $returnType = '\COMPITAUT\DirectAdminAPI\Model\WebWordpressInstance';
        $request = $this->apiWordpressLocationsLocationIdWordpressGetRequest($locationId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiWordpressLocationsLocationIdWordpressGet'
     *
     * @param  string $locationId WordPress location ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiWordpressLocationsLocationIdWordpressGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiWordpressLocationsLocationIdWordpressGetRequest($locationId, string $contentType = self::contentTypes['apiWordpressLocationsLocationIdWordpressGet'][0])
    {

        // verify the required parameter 'locationId' is set
        if ($locationId === null || (is_array($locationId) && count($locationId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $locationId when calling apiWordpressLocationsLocationIdWordpressGet'
            );
        }


        $resourcePath = '/api/wordpress/locations/{location_id}/wordpress';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($locationId !== null) {
            $resourcePath = str_replace(
                '{' . 'location_id' . '}',
                ObjectSerializer::toPathValue($locationId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }

    private function handleResponseWithDataType(
        string $dataType,
        RequestInterface $request,
        ResponseInterface $response
    ): array {
        if ($dataType === '\SplFileObject') {
            $content = $response->getBody(); //stream goes to serializer
        } else {
            $content = (string) $response->getBody();
            if ($dataType !== 'string') {
                try {
                    $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                } catch (\JsonException $exception) {
                    throw new ApiException(
                        sprintf(
                            'Error JSON decoding server response (%s)',
                            $request->getUri()
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                        $content
                    );
                }
            }
        }

        return [
            ObjectSerializer::deserialize($content, $dataType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    private function responseWithinRangeCode(
        string $rangeCode,
        int $statusCode
    ): bool {
        $left = (int) ($rangeCode[0].'00');
        $right = (int) ($rangeCode[0].'99');

        return $statusCode >= $left && $statusCode <= $right;
    }
}
