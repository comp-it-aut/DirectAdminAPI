<?php
/**
 * WebCpanelImportTask
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  COMPITAUT\DirectAdminAPI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Swagger DirectAdmin API
 *
 * Swagger API for DirectAdmin server
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@directadmin.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace COMPITAUT\DirectAdminAPI\Model;

use \ArrayAccess;
use \COMPITAUT\DirectAdminAPI\ObjectSerializer;

/**
 * WebCpanelImportTask Class Doc Comment
 *
 * @category Class
 * @package  COMPITAUT\DirectAdminAPI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class WebCpanelImportTask implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'web.cpanelImportTask';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'account' => 'string',
        'dependsOn' => 'int',
        'error' => 'string',
        'homeOverride' => 'string',
        'id' => 'int',
        'ignoreConvertErrors' => 'bool',
        'pid' => 'int',
        'preserveOwner' => 'bool',
        'remoteHost' => 'string',
        'remotePort' => 'int',
        'remoteUser' => 'string',
        'replaceExistingUser' => 'bool',
        'stage' => 'string',
        'startTime' => '\DateTime',
        'stopTime' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'account' => null,
        'dependsOn' => null,
        'error' => null,
        'homeOverride' => null,
        'id' => null,
        'ignoreConvertErrors' => null,
        'pid' => null,
        'preserveOwner' => null,
        'remoteHost' => null,
        'remotePort' => null,
        'remoteUser' => null,
        'replaceExistingUser' => null,
        'stage' => null,
        'startTime' => 'date-time',
        'stopTime' => 'date-time'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'account' => false,
        'dependsOn' => false,
        'error' => false,
        'homeOverride' => false,
        'id' => false,
        'ignoreConvertErrors' => false,
        'pid' => false,
        'preserveOwner' => false,
        'remoteHost' => false,
        'remotePort' => false,
        'remoteUser' => false,
        'replaceExistingUser' => false,
        'stage' => false,
        'startTime' => false,
        'stopTime' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'account' => 'account',
        'dependsOn' => 'dependsOn',
        'error' => 'error',
        'homeOverride' => 'homeOverride',
        'id' => 'id',
        'ignoreConvertErrors' => 'ignoreConvertErrors',
        'pid' => 'pid',
        'preserveOwner' => 'preserveOwner',
        'remoteHost' => 'remoteHost',
        'remotePort' => 'remotePort',
        'remoteUser' => 'remoteUser',
        'replaceExistingUser' => 'replaceExistingUser',
        'stage' => 'stage',
        'startTime' => 'startTime',
        'stopTime' => 'stopTime'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'account' => 'setAccount',
        'dependsOn' => 'setDependsOn',
        'error' => 'setError',
        'homeOverride' => 'setHomeOverride',
        'id' => 'setId',
        'ignoreConvertErrors' => 'setIgnoreConvertErrors',
        'pid' => 'setPid',
        'preserveOwner' => 'setPreserveOwner',
        'remoteHost' => 'setRemoteHost',
        'remotePort' => 'setRemotePort',
        'remoteUser' => 'setRemoteUser',
        'replaceExistingUser' => 'setReplaceExistingUser',
        'stage' => 'setStage',
        'startTime' => 'setStartTime',
        'stopTime' => 'setStopTime'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'account' => 'getAccount',
        'dependsOn' => 'getDependsOn',
        'error' => 'getError',
        'homeOverride' => 'getHomeOverride',
        'id' => 'getId',
        'ignoreConvertErrors' => 'getIgnoreConvertErrors',
        'pid' => 'getPid',
        'preserveOwner' => 'getPreserveOwner',
        'remoteHost' => 'getRemoteHost',
        'remotePort' => 'getRemotePort',
        'remoteUser' => 'getRemoteUser',
        'replaceExistingUser' => 'getReplaceExistingUser',
        'stage' => 'getStage',
        'startTime' => 'getStartTime',
        'stopTime' => 'getStopTime'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const STAGE_PENDING = 'pending';
    public const STAGE_BACKUP = 'backup';
    public const STAGE_DOWNLOAD = 'download';
    public const STAGE_CONVERT = 'convert';
    public const STAGE_RESTORE = 'restore';
    public const STAGE_DONE = 'done';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStageAllowableValues()
    {
        return [
            self::STAGE_PENDING,
            self::STAGE_BACKUP,
            self::STAGE_DOWNLOAD,
            self::STAGE_CONVERT,
            self::STAGE_RESTORE,
            self::STAGE_DONE,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('account', $data ?? [], null);
        $this->setIfExists('dependsOn', $data ?? [], null);
        $this->setIfExists('error', $data ?? [], null);
        $this->setIfExists('homeOverride', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('ignoreConvertErrors', $data ?? [], null);
        $this->setIfExists('pid', $data ?? [], null);
        $this->setIfExists('preserveOwner', $data ?? [], null);
        $this->setIfExists('remoteHost', $data ?? [], null);
        $this->setIfExists('remotePort', $data ?? [], null);
        $this->setIfExists('remoteUser', $data ?? [], null);
        $this->setIfExists('replaceExistingUser', $data ?? [], null);
        $this->setIfExists('stage', $data ?? [], null);
        $this->setIfExists('startTime', $data ?? [], null);
        $this->setIfExists('stopTime', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['account'] === null) {
            $invalidProperties[] = "'account' can't be null";
        }
        if ($this->container['error'] === null) {
            $invalidProperties[] = "'error' can't be null";
        }
        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['ignoreConvertErrors'] === null) {
            $invalidProperties[] = "'ignoreConvertErrors' can't be null";
        }
        if ($this->container['pid'] === null) {
            $invalidProperties[] = "'pid' can't be null";
        }
        if ($this->container['preserveOwner'] === null) {
            $invalidProperties[] = "'preserveOwner' can't be null";
        }
        if ($this->container['remoteHost'] === null) {
            $invalidProperties[] = "'remoteHost' can't be null";
        }
        if ($this->container['remotePort'] === null) {
            $invalidProperties[] = "'remotePort' can't be null";
        }
        if ($this->container['remoteUser'] === null) {
            $invalidProperties[] = "'remoteUser' can't be null";
        }
        if ($this->container['replaceExistingUser'] === null) {
            $invalidProperties[] = "'replaceExistingUser' can't be null";
        }
        if ($this->container['stage'] === null) {
            $invalidProperties[] = "'stage' can't be null";
        }
        $allowedValues = $this->getStageAllowableValues();
        if (!is_null($this->container['stage']) && !in_array($this->container['stage'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'stage', must be one of '%s'",
                $this->container['stage'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['startTime'] === null) {
            $invalidProperties[] = "'startTime' can't be null";
        }
        if ($this->container['stopTime'] === null) {
            $invalidProperties[] = "'stopTime' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets account
     *
     * @return string
     */
    public function getAccount()
    {
        return $this->container['account'];
    }

    /**
     * Sets account
     *
     * @param string $account cpanel user account to import
     *
     * @return self
     */
    public function setAccount($account)
    {
        if (is_null($account)) {
            throw new \InvalidArgumentException('non-nullable account cannot be null');
        }
        $this->container['account'] = $account;

        return $this;
    }

    /**
     * Gets dependsOn
     *
     * @return int|null
     */
    public function getDependsOn()
    {
        return $this->container['dependsOn'];
    }

    /**
     * Sets dependsOn
     *
     * @param int|null $dependsOn dependsOn
     *
     * @return self
     */
    public function setDependsOn($dependsOn)
    {
        if (is_null($dependsOn)) {
            throw new \InvalidArgumentException('non-nullable dependsOn cannot be null');
        }
        $this->container['dependsOn'] = $dependsOn;

        return $this;
    }

    /**
     * Gets error
     *
     * @return string
     */
    public function getError()
    {
        return $this->container['error'];
    }

    /**
     * Sets error
     *
     * @param string $error error which caused import to terminate
     *
     * @return self
     */
    public function setError($error)
    {
        if (is_null($error)) {
            throw new \InvalidArgumentException('non-nullable error cannot be null');
        }
        $this->container['error'] = $error;

        return $this;
    }

    /**
     * Gets homeOverride
     *
     * @return string|null
     */
    public function getHomeOverride()
    {
        return $this->container['homeOverride'];
    }

    /**
     * Sets homeOverride
     *
     * @param string|null $homeOverride homeOverride
     *
     * @return self
     */
    public function setHomeOverride($homeOverride)
    {
        if (is_null($homeOverride)) {
            throw new \InvalidArgumentException('non-nullable homeOverride cannot be null');
        }
        $this->container['homeOverride'] = $homeOverride;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id unique import task ID
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets ignoreConvertErrors
     *
     * @return bool
     */
    public function getIgnoreConvertErrors()
    {
        return $this->container['ignoreConvertErrors'];
    }

    /**
     * Sets ignoreConvertErrors
     *
     * @param bool $ignoreConvertErrors if true continue to restore account even if conversion step had some issues
     *
     * @return self
     */
    public function setIgnoreConvertErrors($ignoreConvertErrors)
    {
        if (is_null($ignoreConvertErrors)) {
            throw new \InvalidArgumentException('non-nullable ignoreConvertErrors cannot be null');
        }
        $this->container['ignoreConvertErrors'] = $ignoreConvertErrors;

        return $this;
    }

    /**
     * Gets pid
     *
     * @return int
     */
    public function getPid()
    {
        return $this->container['pid'];
    }

    /**
     * Sets pid
     *
     * @param int $pid process ID of import task executor
     *
     * @return self
     */
    public function setPid($pid)
    {
        if (is_null($pid)) {
            throw new \InvalidArgumentException('non-nullable pid cannot be null');
        }
        $this->container['pid'] = $pid;

        return $this;
    }

    /**
     * Gets preserveOwner
     *
     * @return bool
     */
    public function getPreserveOwner()
    {
        return $this->container['preserveOwner'];
    }

    /**
     * Sets preserveOwner
     *
     * @param bool $preserveOwner admin only: if true user will be restored preserving original owner (owner has to already exist or be selected for import)
     *
     * @return self
     */
    public function setPreserveOwner($preserveOwner)
    {
        if (is_null($preserveOwner)) {
            throw new \InvalidArgumentException('non-nullable preserveOwner cannot be null');
        }
        $this->container['preserveOwner'] = $preserveOwner;

        return $this;
    }

    /**
     * Gets remoteHost
     *
     * @return string
     */
    public function getRemoteHost()
    {
        return $this->container['remoteHost'];
    }

    /**
     * Sets remoteHost
     *
     * @param string $remoteHost cpanel server hostname
     *
     * @return self
     */
    public function setRemoteHost($remoteHost)
    {
        if (is_null($remoteHost)) {
            throw new \InvalidArgumentException('non-nullable remoteHost cannot be null');
        }
        $this->container['remoteHost'] = $remoteHost;

        return $this;
    }

    /**
     * Gets remotePort
     *
     * @return int
     */
    public function getRemotePort()
    {
        return $this->container['remotePort'];
    }

    /**
     * Sets remotePort
     *
     * @param int $remotePort cpanel server SSH port
     *
     * @return self
     */
    public function setRemotePort($remotePort)
    {
        if (is_null($remotePort)) {
            throw new \InvalidArgumentException('non-nullable remotePort cannot be null');
        }
        $this->container['remotePort'] = $remotePort;

        return $this;
    }

    /**
     * Gets remoteUser
     *
     * @return string
     */
    public function getRemoteUser()
    {
        return $this->container['remoteUser'];
    }

    /**
     * Sets remoteUser
     *
     * @param string $remoteUser cpanel server SSH user name
     *
     * @return self
     */
    public function setRemoteUser($remoteUser)
    {
        if (is_null($remoteUser)) {
            throw new \InvalidArgumentException('non-nullable remoteUser cannot be null');
        }
        $this->container['remoteUser'] = $remoteUser;

        return $this;
    }

    /**
     * Gets replaceExistingUser
     *
     * @return bool
     */
    public function getReplaceExistingUser()
    {
        return $this->container['replaceExistingUser'];
    }

    /**
     * Sets replaceExistingUser
     *
     * @param bool $replaceExistingUser if true user will be restored even if such account already exists on DA server
     *
     * @return self
     */
    public function setReplaceExistingUser($replaceExistingUser)
    {
        if (is_null($replaceExistingUser)) {
            throw new \InvalidArgumentException('non-nullable replaceExistingUser cannot be null');
        }
        $this->container['replaceExistingUser'] = $replaceExistingUser;

        return $this;
    }

    /**
     * Gets stage
     *
     * @return string
     */
    public function getStage()
    {
        return $this->container['stage'];
    }

    /**
     * Sets stage
     *
     * @param string $stage current import task stage
     *
     * @return self
     */
    public function setStage($stage)
    {
        if (is_null($stage)) {
            throw new \InvalidArgumentException('non-nullable stage cannot be null');
        }
        $allowedValues = $this->getStageAllowableValues();
        if (!in_array($stage, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'stage', must be one of '%s'",
                    $stage,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['stage'] = $stage;

        return $this;
    }

    /**
     * Gets startTime
     *
     * @return \DateTime
     */
    public function getStartTime()
    {
        return $this->container['startTime'];
    }

    /**
     * Sets startTime
     *
     * @param \DateTime $startTime time when import task started
     *
     * @return self
     */
    public function setStartTime($startTime)
    {
        if (is_null($startTime)) {
            throw new \InvalidArgumentException('non-nullable startTime cannot be null');
        }
        $this->container['startTime'] = $startTime;

        return $this;
    }

    /**
     * Gets stopTime
     *
     * @return \DateTime
     */
    public function getStopTime()
    {
        return $this->container['stopTime'];
    }

    /**
     * Sets stopTime
     *
     * @param \DateTime $stopTime time when import task ended
     *
     * @return self
     */
    public function setStopTime($stopTime)
    {
        if (is_null($stopTime)) {
            throw new \InvalidArgumentException('non-nullable stopTime cannot be null');
        }
        $this->container['stopTime'] = $stopTime;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


