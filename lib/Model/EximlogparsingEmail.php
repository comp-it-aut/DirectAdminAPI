<?php
/**
 * EximlogparsingEmail
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  COMPITAUT\DirectAdminAPI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Swagger DirectAdmin API
 *
 * Swagger API for DirectAdmin server
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@directadmin.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace COMPITAUT\DirectAdminAPI\Model;

use \ArrayAccess;
use \COMPITAUT\DirectAdminAPI\ObjectSerializer;

/**
 * EximlogparsingEmail Class Doc Comment
 *
 * @category Class
 * @package  COMPITAUT\DirectAdminAPI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class EximlogparsingEmail implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'eximlogparsing.Email';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'authenticatorClient' => 'string',
        'authenticatorName' => 'string',
        'authenticatorType' => 'string',
        'certificateVerified' => 'bool',
        'chunking' => 'bool',
        'ciphers' => 'string',
        'datetime' => '\DateTime',
        'direction' => 'string',
        'dkimVerified' => 'string',
        'envelopeFrom' => 'string',
        'from' => 'string',
        'host' => 'string',
        'id' => 'string',
        'localBounce' => 'string',
        'localUser' => 'string',
        'messageId' => 'string',
        'otherValues' => 'array<string,string>',
        'protocol' => 'string',
        'router' => 'string',
        'size' => 'int',
        'smtpConfirmation' => 'string',
        'state' => 'string',
        'subject' => 'string',
        'to' => '\COMPITAUT\DirectAdminAPI\Model\EximlogparsingRecipient[]',
        'transport' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'authenticatorClient' => null,
        'authenticatorName' => null,
        'authenticatorType' => null,
        'certificateVerified' => null,
        'chunking' => null,
        'ciphers' => null,
        'datetime' => 'date-time',
        'direction' => null,
        'dkimVerified' => null,
        'envelopeFrom' => null,
        'from' => null,
        'host' => null,
        'id' => null,
        'localBounce' => null,
        'localUser' => null,
        'messageId' => null,
        'otherValues' => null,
        'protocol' => null,
        'router' => null,
        'size' => null,
        'smtpConfirmation' => null,
        'state' => null,
        'subject' => null,
        'to' => null,
        'transport' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'authenticatorClient' => false,
        'authenticatorName' => false,
        'authenticatorType' => false,
        'certificateVerified' => false,
        'chunking' => false,
        'ciphers' => false,
        'datetime' => false,
        'direction' => false,
        'dkimVerified' => false,
        'envelopeFrom' => false,
        'from' => false,
        'host' => false,
        'id' => false,
        'localBounce' => false,
        'localUser' => false,
        'messageId' => false,
        'otherValues' => false,
        'protocol' => false,
        'router' => false,
        'size' => false,
        'smtpConfirmation' => false,
        'state' => false,
        'subject' => false,
        'to' => false,
        'transport' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'authenticatorClient' => 'authenticator_client',
        'authenticatorName' => 'authenticator_name',
        'authenticatorType' => 'authenticator_type',
        'certificateVerified' => 'certificate_verified',
        'chunking' => 'chunking',
        'ciphers' => 'ciphers',
        'datetime' => 'datetime',
        'direction' => 'direction',
        'dkimVerified' => 'dkim_verified',
        'envelopeFrom' => 'envelope_from',
        'from' => 'from',
        'host' => 'host',
        'id' => 'id',
        'localBounce' => 'local_bounce',
        'localUser' => 'local_user',
        'messageId' => 'message_id',
        'otherValues' => 'other_values',
        'protocol' => 'protocol',
        'router' => 'router',
        'size' => 'size',
        'smtpConfirmation' => 'smtp_confirmation',
        'state' => 'state',
        'subject' => 'subject',
        'to' => 'to',
        'transport' => 'transport'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'authenticatorClient' => 'setAuthenticatorClient',
        'authenticatorName' => 'setAuthenticatorName',
        'authenticatorType' => 'setAuthenticatorType',
        'certificateVerified' => 'setCertificateVerified',
        'chunking' => 'setChunking',
        'ciphers' => 'setCiphers',
        'datetime' => 'setDatetime',
        'direction' => 'setDirection',
        'dkimVerified' => 'setDkimVerified',
        'envelopeFrom' => 'setEnvelopeFrom',
        'from' => 'setFrom',
        'host' => 'setHost',
        'id' => 'setId',
        'localBounce' => 'setLocalBounce',
        'localUser' => 'setLocalUser',
        'messageId' => 'setMessageId',
        'otherValues' => 'setOtherValues',
        'protocol' => 'setProtocol',
        'router' => 'setRouter',
        'size' => 'setSize',
        'smtpConfirmation' => 'setSmtpConfirmation',
        'state' => 'setState',
        'subject' => 'setSubject',
        'to' => 'setTo',
        'transport' => 'setTransport'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'authenticatorClient' => 'getAuthenticatorClient',
        'authenticatorName' => 'getAuthenticatorName',
        'authenticatorType' => 'getAuthenticatorType',
        'certificateVerified' => 'getCertificateVerified',
        'chunking' => 'getChunking',
        'ciphers' => 'getCiphers',
        'datetime' => 'getDatetime',
        'direction' => 'getDirection',
        'dkimVerified' => 'getDkimVerified',
        'envelopeFrom' => 'getEnvelopeFrom',
        'from' => 'getFrom',
        'host' => 'getHost',
        'id' => 'getId',
        'localBounce' => 'getLocalBounce',
        'localUser' => 'getLocalUser',
        'messageId' => 'getMessageId',
        'otherValues' => 'getOtherValues',
        'protocol' => 'getProtocol',
        'router' => 'getRouter',
        'size' => 'getSize',
        'smtpConfirmation' => 'getSmtpConfirmation',
        'state' => 'getState',
        'subject' => 'getSubject',
        'to' => 'getTo',
        'transport' => 'getTransport'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const DIRECTION_OUT = 'out';
    public const DIRECTION_IN = 'in';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDirectionAllowableValues()
    {
        return [
            self::DIRECTION_OUT,
            self::DIRECTION_IN,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('authenticatorClient', $data ?? [], null);
        $this->setIfExists('authenticatorName', $data ?? [], null);
        $this->setIfExists('authenticatorType', $data ?? [], null);
        $this->setIfExists('certificateVerified', $data ?? [], null);
        $this->setIfExists('chunking', $data ?? [], null);
        $this->setIfExists('ciphers', $data ?? [], null);
        $this->setIfExists('datetime', $data ?? [], null);
        $this->setIfExists('direction', $data ?? [], null);
        $this->setIfExists('dkimVerified', $data ?? [], null);
        $this->setIfExists('envelopeFrom', $data ?? [], null);
        $this->setIfExists('from', $data ?? [], null);
        $this->setIfExists('host', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('localBounce', $data ?? [], null);
        $this->setIfExists('localUser', $data ?? [], null);
        $this->setIfExists('messageId', $data ?? [], null);
        $this->setIfExists('otherValues', $data ?? [], null);
        $this->setIfExists('protocol', $data ?? [], null);
        $this->setIfExists('router', $data ?? [], null);
        $this->setIfExists('size', $data ?? [], null);
        $this->setIfExists('smtpConfirmation', $data ?? [], null);
        $this->setIfExists('state', $data ?? [], null);
        $this->setIfExists('subject', $data ?? [], null);
        $this->setIfExists('to', $data ?? [], null);
        $this->setIfExists('transport', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['datetime'] === null) {
            $invalidProperties[] = "'datetime' can't be null";
        }
        $allowedValues = $this->getDirectionAllowableValues();
        if (!is_null($this->container['direction']) && !in_array($this->container['direction'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'direction', must be one of '%s'",
                $this->container['direction'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['from'] === null) {
            $invalidProperties[] = "'from' can't be null";
        }
        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if (!is_null($this->container['size']) && ($this->container['size'] < 0)) {
            $invalidProperties[] = "invalid value for 'size', must be bigger than or equal to 0.";
        }

        if ($this->container['state'] === null) {
            $invalidProperties[] = "'state' can't be null";
        }
        if ($this->container['to'] === null) {
            $invalidProperties[] = "'to' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets authenticatorClient
     *
     * @return string|null
     */
    public function getAuthenticatorClient()
    {
        return $this->container['authenticatorClient'];
    }

    /**
     * Sets authenticatorClient
     *
     * @param string|null $authenticatorClient computed from AuthenticatorName
     *
     * @return self
     */
    public function setAuthenticatorClient($authenticatorClient)
    {
        if (is_null($authenticatorClient)) {
            throw new \InvalidArgumentException('non-nullable authenticatorClient cannot be null');
        }
        $this->container['authenticatorClient'] = $authenticatorClient;

        return $this;
    }

    /**
     * Gets authenticatorName
     *
     * @return string|null
     */
    public function getAuthenticatorName()
    {
        return $this->container['authenticatorName'];
    }

    /**
     * Sets authenticatorName
     *
     * @param string|null $authenticatorName Shared attributes
     *
     * @return self
     */
    public function setAuthenticatorName($authenticatorName)
    {
        if (is_null($authenticatorName)) {
            throw new \InvalidArgumentException('non-nullable authenticatorName cannot be null');
        }
        $this->container['authenticatorName'] = $authenticatorName;

        return $this;
    }

    /**
     * Gets authenticatorType
     *
     * @return string|null
     */
    public function getAuthenticatorType()
    {
        return $this->container['authenticatorType'];
    }

    /**
     * Sets authenticatorType
     *
     * @param string|null $authenticatorType computed from AuthenticatorName
     *
     * @return self
     */
    public function setAuthenticatorType($authenticatorType)
    {
        if (is_null($authenticatorType)) {
            throw new \InvalidArgumentException('non-nullable authenticatorType cannot be null');
        }
        $this->container['authenticatorType'] = $authenticatorType;

        return $this;
    }

    /**
     * Gets certificateVerified
     *
     * @return bool|null
     */
    public function getCertificateVerified()
    {
        return $this->container['certificateVerified'];
    }

    /**
     * Sets certificateVerified
     *
     * @param bool|null $certificateVerified certificateVerified
     *
     * @return self
     */
    public function setCertificateVerified($certificateVerified)
    {
        if (is_null($certificateVerified)) {
            throw new \InvalidArgumentException('non-nullable certificateVerified cannot be null');
        }
        $this->container['certificateVerified'] = $certificateVerified;

        return $this;
    }

    /**
     * Gets chunking
     *
     * @return bool|null
     */
    public function getChunking()
    {
        return $this->container['chunking'];
    }

    /**
     * Sets chunking
     *
     * @param bool|null $chunking chunking
     *
     * @return self
     */
    public function setChunking($chunking)
    {
        if (is_null($chunking)) {
            throw new \InvalidArgumentException('non-nullable chunking cannot be null');
        }
        $this->container['chunking'] = $chunking;

        return $this;
    }

    /**
     * Gets ciphers
     *
     * @return string|null
     */
    public function getCiphers()
    {
        return $this->container['ciphers'];
    }

    /**
     * Sets ciphers
     *
     * @param string|null $ciphers ciphers
     *
     * @return self
     */
    public function setCiphers($ciphers)
    {
        if (is_null($ciphers)) {
            throw new \InvalidArgumentException('non-nullable ciphers cannot be null');
        }
        $this->container['ciphers'] = $ciphers;

        return $this;
    }

    /**
     * Gets datetime
     *
     * @return \DateTime
     */
    public function getDatetime()
    {
        return $this->container['datetime'];
    }

    /**
     * Sets datetime
     *
     * @param \DateTime $datetime datetime
     *
     * @return self
     */
    public function setDatetime($datetime)
    {
        if (is_null($datetime)) {
            throw new \InvalidArgumentException('non-nullable datetime cannot be null');
        }
        $this->container['datetime'] = $datetime;

        return $this;
    }

    /**
     * Gets direction
     *
     * @return string|null
     */
    public function getDirection()
    {
        return $this->container['direction'];
    }

    /**
     * Sets direction
     *
     * @param string|null $direction Incoming specific attributes
     *
     * @return self
     */
    public function setDirection($direction)
    {
        if (is_null($direction)) {
            throw new \InvalidArgumentException('non-nullable direction cannot be null');
        }
        $allowedValues = $this->getDirectionAllowableValues();
        if (!in_array($direction, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'direction', must be one of '%s'",
                    $direction,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['direction'] = $direction;

        return $this;
    }

    /**
     * Gets dkimVerified
     *
     * @return string|null
     */
    public function getDkimVerified()
    {
        return $this->container['dkimVerified'];
    }

    /**
     * Sets dkimVerified
     *
     * @param string|null $dkimVerified dkimVerified
     *
     * @return self
     */
    public function setDkimVerified($dkimVerified)
    {
        if (is_null($dkimVerified)) {
            throw new \InvalidArgumentException('non-nullable dkimVerified cannot be null');
        }
        $this->container['dkimVerified'] = $dkimVerified;

        return $this;
    }

    /**
     * Gets envelopeFrom
     *
     * @return string|null
     */
    public function getEnvelopeFrom()
    {
        return $this->container['envelopeFrom'];
    }

    /**
     * Sets envelopeFrom
     *
     * @param string|null $envelopeFrom envelopeFrom
     *
     * @return self
     */
    public function setEnvelopeFrom($envelopeFrom)
    {
        if (is_null($envelopeFrom)) {
            throw new \InvalidArgumentException('non-nullable envelopeFrom cannot be null');
        }
        $this->container['envelopeFrom'] = $envelopeFrom;

        return $this;
    }

    /**
     * Gets from
     *
     * @return string
     */
    public function getFrom()
    {
        return $this->container['from'];
    }

    /**
     * Sets from
     *
     * @param string $from from
     *
     * @return self
     */
    public function setFrom($from)
    {
        if (is_null($from)) {
            throw new \InvalidArgumentException('non-nullable from cannot be null');
        }
        $this->container['from'] = $from;

        return $this;
    }

    /**
     * Gets host
     *
     * @return string|null
     */
    public function getHost()
    {
        return $this->container['host'];
    }

    /**
     * Sets host
     *
     * @param string|null $host host
     *
     * @return self
     */
    public function setHost($host)
    {
        if (is_null($host)) {
            throw new \InvalidArgumentException('non-nullable host cannot be null');
        }
        $this->container['host'] = $host;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id General
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets localBounce
     *
     * @return string|null
     */
    public function getLocalBounce()
    {
        return $this->container['localBounce'];
    }

    /**
     * Sets localBounce
     *
     * @param string|null $localBounce localBounce
     *
     * @return self
     */
    public function setLocalBounce($localBounce)
    {
        if (is_null($localBounce)) {
            throw new \InvalidArgumentException('non-nullable localBounce cannot be null');
        }
        $this->container['localBounce'] = $localBounce;

        return $this;
    }

    /**
     * Gets localUser
     *
     * @return string|null
     */
    public function getLocalUser()
    {
        return $this->container['localUser'];
    }

    /**
     * Sets localUser
     *
     * @param string|null $localUser localUser
     *
     * @return self
     */
    public function setLocalUser($localUser)
    {
        if (is_null($localUser)) {
            throw new \InvalidArgumentException('non-nullable localUser cannot be null');
        }
        $this->container['localUser'] = $localUser;

        return $this;
    }

    /**
     * Gets messageId
     *
     * @return string|null
     */
    public function getMessageId()
    {
        return $this->container['messageId'];
    }

    /**
     * Sets messageId
     *
     * @param string|null $messageId messageId
     *
     * @return self
     */
    public function setMessageId($messageId)
    {
        if (is_null($messageId)) {
            throw new \InvalidArgumentException('non-nullable messageId cannot be null');
        }
        $this->container['messageId'] = $messageId;

        return $this;
    }

    /**
     * Gets otherValues
     *
     * @return array<string,string>|null
     */
    public function getOtherValues()
    {
        return $this->container['otherValues'];
    }

    /**
     * Sets otherValues
     *
     * @param array<string,string>|null $otherValues otherValues
     *
     * @return self
     */
    public function setOtherValues($otherValues)
    {
        if (is_null($otherValues)) {
            throw new \InvalidArgumentException('non-nullable otherValues cannot be null');
        }
        $this->container['otherValues'] = $otherValues;

        return $this;
    }

    /**
     * Gets protocol
     *
     * @return string|null
     */
    public function getProtocol()
    {
        return $this->container['protocol'];
    }

    /**
     * Sets protocol
     *
     * @param string|null $protocol protocol
     *
     * @return self
     */
    public function setProtocol($protocol)
    {
        if (is_null($protocol)) {
            throw new \InvalidArgumentException('non-nullable protocol cannot be null');
        }
        $this->container['protocol'] = $protocol;

        return $this;
    }

    /**
     * Gets router
     *
     * @return string|null
     */
    public function getRouter()
    {
        return $this->container['router'];
    }

    /**
     * Sets router
     *
     * @param string|null $router router
     *
     * @return self
     */
    public function setRouter($router)
    {
        if (is_null($router)) {
            throw new \InvalidArgumentException('non-nullable router cannot be null');
        }
        $this->container['router'] = $router;

        return $this;
    }

    /**
     * Gets size
     *
     * @return int|null
     */
    public function getSize()
    {
        return $this->container['size'];
    }

    /**
     * Sets size
     *
     * @param int|null $size size
     *
     * @return self
     */
    public function setSize($size)
    {
        if (is_null($size)) {
            throw new \InvalidArgumentException('non-nullable size cannot be null');
        }

        if (($size < 0)) {
            throw new \InvalidArgumentException('invalid value for $size when calling EximlogparsingEmail., must be bigger than or equal to 0.');
        }

        $this->container['size'] = $size;

        return $this;
    }

    /**
     * Gets smtpConfirmation
     *
     * @return string|null
     */
    public function getSmtpConfirmation()
    {
        return $this->container['smtpConfirmation'];
    }

    /**
     * Sets smtpConfirmation
     *
     * @param string|null $smtpConfirmation Delivery specific attributes
     *
     * @return self
     */
    public function setSmtpConfirmation($smtpConfirmation)
    {
        if (is_null($smtpConfirmation)) {
            throw new \InvalidArgumentException('non-nullable smtpConfirmation cannot be null');
        }
        $this->container['smtpConfirmation'] = $smtpConfirmation;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string $state state
     *
     * @return self
     */
    public function setState($state)
    {
        if (is_null($state)) {
            throw new \InvalidArgumentException('non-nullable state cannot be null');
        }
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets subject
     *
     * @return string|null
     */
    public function getSubject()
    {
        return $this->container['subject'];
    }

    /**
     * Sets subject
     *
     * @param string|null $subject subject
     *
     * @return self
     */
    public function setSubject($subject)
    {
        if (is_null($subject)) {
            throw new \InvalidArgumentException('non-nullable subject cannot be null');
        }
        $this->container['subject'] = $subject;

        return $this;
    }

    /**
     * Gets to
     *
     * @return \COMPITAUT\DirectAdminAPI\Model\EximlogparsingRecipient[]
     */
    public function getTo()
    {
        return $this->container['to'];
    }

    /**
     * Sets to
     *
     * @param \COMPITAUT\DirectAdminAPI\Model\EximlogparsingRecipient[] $to to
     *
     * @return self
     */
    public function setTo($to)
    {
        if (is_null($to)) {
            throw new \InvalidArgumentException('non-nullable to cannot be null');
        }
        $this->container['to'] = $to;

        return $this;
    }

    /**
     * Gets transport
     *
     * @return string|null
     */
    public function getTransport()
    {
        return $this->container['transport'];
    }

    /**
     * Sets transport
     *
     * @param string|null $transport transport
     *
     * @return self
     */
    public function setTransport($transport)
    {
        if (is_null($transport)) {
            throw new \InvalidArgumentException('non-nullable transport cannot be null');
        }
        $this->container['transport'] = $transport;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


