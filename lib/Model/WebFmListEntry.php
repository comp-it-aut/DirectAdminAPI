<?php
/**
 * WebFmListEntry
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  COMPITAUT\DirectAdminAPI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Swagger DirectAdmin API
 *
 * Swagger API for DirectAdmin server
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@directadmin.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace COMPITAUT\DirectAdminAPI\Model;

use \ArrayAccess;
use \COMPITAUT\DirectAdminAPI\ObjectSerializer;

/**
 * WebFmListEntry Class Doc Comment
 *
 * @category Class
 * @package  COMPITAUT\DirectAdminAPI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class WebFmListEntry implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'web.fmListEntry';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'createTime' => '\DateTime',
        'gid' => 'int',
        'group' => 'string',
        'mode' => 'string',
        'modifyTime' => '\DateTime',
        'name' => 'string',
        'sizeBytes' => 'int',
        'symlink' => 'bool',
        'type' => 'string',
        'uid' => 'int',
        'unixMode' => 'int',
        'user' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'createTime' => 'date-time',
        'gid' => null,
        'group' => null,
        'mode' => null,
        'modifyTime' => 'date-time',
        'name' => null,
        'sizeBytes' => null,
        'symlink' => null,
        'type' => null,
        'uid' => null,
        'unixMode' => null,
        'user' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'createTime' => false,
        'gid' => false,
        'group' => false,
        'mode' => false,
        'modifyTime' => false,
        'name' => false,
        'sizeBytes' => false,
        'symlink' => false,
        'type' => false,
        'uid' => false,
        'unixMode' => false,
        'user' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'createTime' => 'createTime',
        'gid' => 'gid',
        'group' => 'group',
        'mode' => 'mode',
        'modifyTime' => 'modifyTime',
        'name' => 'name',
        'sizeBytes' => 'sizeBytes',
        'symlink' => 'symlink',
        'type' => 'type',
        'uid' => 'uid',
        'unixMode' => 'unixMode',
        'user' => 'user'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'createTime' => 'setCreateTime',
        'gid' => 'setGid',
        'group' => 'setGroup',
        'mode' => 'setMode',
        'modifyTime' => 'setModifyTime',
        'name' => 'setName',
        'sizeBytes' => 'setSizeBytes',
        'symlink' => 'setSymlink',
        'type' => 'setType',
        'uid' => 'setUid',
        'unixMode' => 'setUnixMode',
        'user' => 'setUser'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'createTime' => 'getCreateTime',
        'gid' => 'getGid',
        'group' => 'getGroup',
        'mode' => 'getMode',
        'modifyTime' => 'getModifyTime',
        'name' => 'getName',
        'sizeBytes' => 'getSizeBytes',
        'symlink' => 'getSymlink',
        'type' => 'getType',
        'uid' => 'getUid',
        'unixMode' => 'getUnixMode',
        'user' => 'getUser'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const TYPE_DIR = 'dir';
    public const TYPE_FILE = 'file';
    public const TYPE_SPECIAL = 'special';
    public const TYPE_BROKEN_SYMLINK = 'broken_symlink';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_DIR,
            self::TYPE_FILE,
            self::TYPE_SPECIAL,
            self::TYPE_BROKEN_SYMLINK,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('createTime', $data ?? [], null);
        $this->setIfExists('gid', $data ?? [], null);
        $this->setIfExists('group', $data ?? [], null);
        $this->setIfExists('mode', $data ?? [], null);
        $this->setIfExists('modifyTime', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('sizeBytes', $data ?? [], null);
        $this->setIfExists('symlink', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('uid', $data ?? [], null);
        $this->setIfExists('unixMode', $data ?? [], null);
        $this->setIfExists('user', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['createTime'] === null) {
            $invalidProperties[] = "'createTime' can't be null";
        }
        if ($this->container['gid'] === null) {
            $invalidProperties[] = "'gid' can't be null";
        }
        if ($this->container['group'] === null) {
            $invalidProperties[] = "'group' can't be null";
        }
        if ($this->container['mode'] === null) {
            $invalidProperties[] = "'mode' can't be null";
        }
        if ($this->container['modifyTime'] === null) {
            $invalidProperties[] = "'modifyTime' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['sizeBytes'] === null) {
            $invalidProperties[] = "'sizeBytes' can't be null";
        }
        if ($this->container['symlink'] === null) {
            $invalidProperties[] = "'symlink' can't be null";
        }
        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'type', must be one of '%s'",
                $this->container['type'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['uid'] === null) {
            $invalidProperties[] = "'uid' can't be null";
        }
        if ($this->container['unixMode'] === null) {
            $invalidProperties[] = "'unixMode' can't be null";
        }
        if ($this->container['user'] === null) {
            $invalidProperties[] = "'user' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets createTime
     *
     * @return \DateTime
     */
    public function getCreateTime()
    {
        return $this->container['createTime'];
    }

    /**
     * Sets createTime
     *
     * @param \DateTime $createTime createTime
     *
     * @return self
     */
    public function setCreateTime($createTime)
    {
        if (is_null($createTime)) {
            throw new \InvalidArgumentException('non-nullable createTime cannot be null');
        }
        $this->container['createTime'] = $createTime;

        return $this;
    }

    /**
     * Gets gid
     *
     * @return int
     */
    public function getGid()
    {
        return $this->container['gid'];
    }

    /**
     * Sets gid
     *
     * @param int $gid gid
     *
     * @return self
     */
    public function setGid($gid)
    {
        if (is_null($gid)) {
            throw new \InvalidArgumentException('non-nullable gid cannot be null');
        }
        $this->container['gid'] = $gid;

        return $this;
    }

    /**
     * Gets group
     *
     * @return string
     */
    public function getGroup()
    {
        return $this->container['group'];
    }

    /**
     * Sets group
     *
     * @param string $group group
     *
     * @return self
     */
    public function setGroup($group)
    {
        if (is_null($group)) {
            throw new \InvalidArgumentException('non-nullable group cannot be null');
        }
        $this->container['group'] = $group;

        return $this;
    }

    /**
     * Gets mode
     *
     * @return string
     */
    public function getMode()
    {
        return $this->container['mode'];
    }

    /**
     * Sets mode
     *
     * @param string $mode mode
     *
     * @return self
     */
    public function setMode($mode)
    {
        if (is_null($mode)) {
            throw new \InvalidArgumentException('non-nullable mode cannot be null');
        }
        $this->container['mode'] = $mode;

        return $this;
    }

    /**
     * Gets modifyTime
     *
     * @return \DateTime
     */
    public function getModifyTime()
    {
        return $this->container['modifyTime'];
    }

    /**
     * Sets modifyTime
     *
     * @param \DateTime $modifyTime Most recent of Change and Modify times.
     *
     * @return self
     */
    public function setModifyTime($modifyTime)
    {
        if (is_null($modifyTime)) {
            throw new \InvalidArgumentException('non-nullable modifyTime cannot be null');
        }
        $this->container['modifyTime'] = $modifyTime;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets sizeBytes
     *
     * @return int
     */
    public function getSizeBytes()
    {
        return $this->container['sizeBytes'];
    }

    /**
     * Sets sizeBytes
     *
     * @param int $sizeBytes sizeBytes
     *
     * @return self
     */
    public function setSizeBytes($sizeBytes)
    {
        if (is_null($sizeBytes)) {
            throw new \InvalidArgumentException('non-nullable sizeBytes cannot be null');
        }
        $this->container['sizeBytes'] = $sizeBytes;

        return $this;
    }

    /**
     * Gets symlink
     *
     * @return bool
     */
    public function getSymlink()
    {
        return $this->container['symlink'];
    }

    /**
     * Sets symlink
     *
     * @param bool $symlink symlink
     *
     * @return self
     */
    public function setSymlink($symlink)
    {
        if (is_null($symlink)) {
            throw new \InvalidArgumentException('non-nullable symlink cannot be null');
        }
        $this->container['symlink'] = $symlink;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type type
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'type', must be one of '%s'",
                    $type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets uid
     *
     * @return int
     */
    public function getUid()
    {
        return $this->container['uid'];
    }

    /**
     * Sets uid
     *
     * @param int $uid uid
     *
     * @return self
     */
    public function setUid($uid)
    {
        if (is_null($uid)) {
            throw new \InvalidArgumentException('non-nullable uid cannot be null');
        }
        $this->container['uid'] = $uid;

        return $this;
    }

    /**
     * Gets unixMode
     *
     * @return int
     */
    public function getUnixMode()
    {
        return $this->container['unixMode'];
    }

    /**
     * Sets unixMode
     *
     * @param int $unixMode unixMode
     *
     * @return self
     */
    public function setUnixMode($unixMode)
    {
        if (is_null($unixMode)) {
            throw new \InvalidArgumentException('non-nullable unixMode cannot be null');
        }
        $this->container['unixMode'] = $unixMode;

        return $this;
    }

    /**
     * Gets user
     *
     * @return string
     */
    public function getUser()
    {
        return $this->container['user'];
    }

    /**
     * Sets user
     *
     * @param string $user user
     *
     * @return self
     */
    public function setUser($user)
    {
        if (is_null($user)) {
            throw new \InvalidArgumentException('non-nullable user cannot be null');
        }
        $this->container['user'] = $user;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


