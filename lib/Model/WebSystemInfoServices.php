<?php
/**
 * WebSystemInfoServices
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  COMPITAUT\DirectAdminAPI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Swagger DirectAdmin API
 *
 * Swagger API for DirectAdmin server
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@directadmin.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace COMPITAUT\DirectAdminAPI\Model;

use \ArrayAccess;
use \COMPITAUT\DirectAdminAPI\ObjectSerializer;

/**
 * WebSystemInfoServices Class Doc Comment
 *
 * @category Class
 * @package  COMPITAUT\DirectAdminAPI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class WebSystemInfoServices implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'web.systemInfoServices';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'directadmin' => '\COMPITAUT\DirectAdminAPI\Model\WebSystemInfoService',
        'dovecot' => '\COMPITAUT\DirectAdminAPI\Model\WebSystemInfoService',
        'exim' => '\COMPITAUT\DirectAdminAPI\Model\WebSystemInfoService',
        'httpd' => '\COMPITAUT\DirectAdminAPI\Model\WebSystemInfoService',
        'litespeed' => '\COMPITAUT\DirectAdminAPI\Model\WebSystemInfoService',
        'mysqld' => '\COMPITAUT\DirectAdminAPI\Model\WebSystemInfoService',
        'named' => '\COMPITAUT\DirectAdminAPI\Model\WebSystemInfoService',
        'nginx' => '\COMPITAUT\DirectAdminAPI\Model\WebSystemInfoService',
        'openlitespeed' => '\COMPITAUT\DirectAdminAPI\Model\WebSystemInfoService',
        'proftpd' => '\COMPITAUT\DirectAdminAPI\Model\WebSystemInfoService',
        'pureFtpd' => '\COMPITAUT\DirectAdminAPI\Model\WebSystemInfoService',
        'sshd' => '\COMPITAUT\DirectAdminAPI\Model\WebSystemInfoService'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'directadmin' => null,
        'dovecot' => null,
        'exim' => null,
        'httpd' => null,
        'litespeed' => null,
        'mysqld' => null,
        'named' => null,
        'nginx' => null,
        'openlitespeed' => null,
        'proftpd' => null,
        'pureFtpd' => null,
        'sshd' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'directadmin' => false,
        'dovecot' => false,
        'exim' => false,
        'httpd' => false,
        'litespeed' => false,
        'mysqld' => false,
        'named' => false,
        'nginx' => false,
        'openlitespeed' => false,
        'proftpd' => false,
        'pureFtpd' => false,
        'sshd' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'directadmin' => 'directadmin',
        'dovecot' => 'dovecot',
        'exim' => 'exim',
        'httpd' => 'httpd',
        'litespeed' => 'litespeed',
        'mysqld' => 'mysqld',
        'named' => 'named',
        'nginx' => 'nginx',
        'openlitespeed' => 'openlitespeed',
        'proftpd' => 'proftpd',
        'pureFtpd' => 'pure-ftpd',
        'sshd' => 'sshd'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'directadmin' => 'setDirectadmin',
        'dovecot' => 'setDovecot',
        'exim' => 'setExim',
        'httpd' => 'setHttpd',
        'litespeed' => 'setLitespeed',
        'mysqld' => 'setMysqld',
        'named' => 'setNamed',
        'nginx' => 'setNginx',
        'openlitespeed' => 'setOpenlitespeed',
        'proftpd' => 'setProftpd',
        'pureFtpd' => 'setPureFtpd',
        'sshd' => 'setSshd'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'directadmin' => 'getDirectadmin',
        'dovecot' => 'getDovecot',
        'exim' => 'getExim',
        'httpd' => 'getHttpd',
        'litespeed' => 'getLitespeed',
        'mysqld' => 'getMysqld',
        'named' => 'getNamed',
        'nginx' => 'getNginx',
        'openlitespeed' => 'getOpenlitespeed',
        'proftpd' => 'getProftpd',
        'pureFtpd' => 'getPureFtpd',
        'sshd' => 'getSshd'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('directadmin', $data ?? [], null);
        $this->setIfExists('dovecot', $data ?? [], null);
        $this->setIfExists('exim', $data ?? [], null);
        $this->setIfExists('httpd', $data ?? [], null);
        $this->setIfExists('litespeed', $data ?? [], null);
        $this->setIfExists('mysqld', $data ?? [], null);
        $this->setIfExists('named', $data ?? [], null);
        $this->setIfExists('nginx', $data ?? [], null);
        $this->setIfExists('openlitespeed', $data ?? [], null);
        $this->setIfExists('proftpd', $data ?? [], null);
        $this->setIfExists('pureFtpd', $data ?? [], null);
        $this->setIfExists('sshd', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['directadmin'] === null) {
            $invalidProperties[] = "'directadmin' can't be null";
        }
        if ($this->container['dovecot'] === null) {
            $invalidProperties[] = "'dovecot' can't be null";
        }
        if ($this->container['exim'] === null) {
            $invalidProperties[] = "'exim' can't be null";
        }
        if ($this->container['httpd'] === null) {
            $invalidProperties[] = "'httpd' can't be null";
        }
        if ($this->container['litespeed'] === null) {
            $invalidProperties[] = "'litespeed' can't be null";
        }
        if ($this->container['mysqld'] === null) {
            $invalidProperties[] = "'mysqld' can't be null";
        }
        if ($this->container['named'] === null) {
            $invalidProperties[] = "'named' can't be null";
        }
        if ($this->container['nginx'] === null) {
            $invalidProperties[] = "'nginx' can't be null";
        }
        if ($this->container['openlitespeed'] === null) {
            $invalidProperties[] = "'openlitespeed' can't be null";
        }
        if ($this->container['proftpd'] === null) {
            $invalidProperties[] = "'proftpd' can't be null";
        }
        if ($this->container['pureFtpd'] === null) {
            $invalidProperties[] = "'pureFtpd' can't be null";
        }
        if ($this->container['sshd'] === null) {
            $invalidProperties[] = "'sshd' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets directadmin
     *
     * @return \COMPITAUT\DirectAdminAPI\Model\WebSystemInfoService
     */
    public function getDirectadmin()
    {
        return $this->container['directadmin'];
    }

    /**
     * Sets directadmin
     *
     * @param \COMPITAUT\DirectAdminAPI\Model\WebSystemInfoService $directadmin directadmin
     *
     * @return self
     */
    public function setDirectadmin($directadmin)
    {
        if (is_null($directadmin)) {
            throw new \InvalidArgumentException('non-nullable directadmin cannot be null');
        }
        $this->container['directadmin'] = $directadmin;

        return $this;
    }

    /**
     * Gets dovecot
     *
     * @return \COMPITAUT\DirectAdminAPI\Model\WebSystemInfoService
     */
    public function getDovecot()
    {
        return $this->container['dovecot'];
    }

    /**
     * Sets dovecot
     *
     * @param \COMPITAUT\DirectAdminAPI\Model\WebSystemInfoService $dovecot dovecot
     *
     * @return self
     */
    public function setDovecot($dovecot)
    {
        if (is_null($dovecot)) {
            throw new \InvalidArgumentException('non-nullable dovecot cannot be null');
        }
        $this->container['dovecot'] = $dovecot;

        return $this;
    }

    /**
     * Gets exim
     *
     * @return \COMPITAUT\DirectAdminAPI\Model\WebSystemInfoService
     */
    public function getExim()
    {
        return $this->container['exim'];
    }

    /**
     * Sets exim
     *
     * @param \COMPITAUT\DirectAdminAPI\Model\WebSystemInfoService $exim exim
     *
     * @return self
     */
    public function setExim($exim)
    {
        if (is_null($exim)) {
            throw new \InvalidArgumentException('non-nullable exim cannot be null');
        }
        $this->container['exim'] = $exim;

        return $this;
    }

    /**
     * Gets httpd
     *
     * @return \COMPITAUT\DirectAdminAPI\Model\WebSystemInfoService
     */
    public function getHttpd()
    {
        return $this->container['httpd'];
    }

    /**
     * Sets httpd
     *
     * @param \COMPITAUT\DirectAdminAPI\Model\WebSystemInfoService $httpd httpd
     *
     * @return self
     */
    public function setHttpd($httpd)
    {
        if (is_null($httpd)) {
            throw new \InvalidArgumentException('non-nullable httpd cannot be null');
        }
        $this->container['httpd'] = $httpd;

        return $this;
    }

    /**
     * Gets litespeed
     *
     * @return \COMPITAUT\DirectAdminAPI\Model\WebSystemInfoService
     */
    public function getLitespeed()
    {
        return $this->container['litespeed'];
    }

    /**
     * Sets litespeed
     *
     * @param \COMPITAUT\DirectAdminAPI\Model\WebSystemInfoService $litespeed litespeed
     *
     * @return self
     */
    public function setLitespeed($litespeed)
    {
        if (is_null($litespeed)) {
            throw new \InvalidArgumentException('non-nullable litespeed cannot be null');
        }
        $this->container['litespeed'] = $litespeed;

        return $this;
    }

    /**
     * Gets mysqld
     *
     * @return \COMPITAUT\DirectAdminAPI\Model\WebSystemInfoService
     */
    public function getMysqld()
    {
        return $this->container['mysqld'];
    }

    /**
     * Sets mysqld
     *
     * @param \COMPITAUT\DirectAdminAPI\Model\WebSystemInfoService $mysqld mysqld
     *
     * @return self
     */
    public function setMysqld($mysqld)
    {
        if (is_null($mysqld)) {
            throw new \InvalidArgumentException('non-nullable mysqld cannot be null');
        }
        $this->container['mysqld'] = $mysqld;

        return $this;
    }

    /**
     * Gets named
     *
     * @return \COMPITAUT\DirectAdminAPI\Model\WebSystemInfoService
     */
    public function getNamed()
    {
        return $this->container['named'];
    }

    /**
     * Sets named
     *
     * @param \COMPITAUT\DirectAdminAPI\Model\WebSystemInfoService $named named
     *
     * @return self
     */
    public function setNamed($named)
    {
        if (is_null($named)) {
            throw new \InvalidArgumentException('non-nullable named cannot be null');
        }
        $this->container['named'] = $named;

        return $this;
    }

    /**
     * Gets nginx
     *
     * @return \COMPITAUT\DirectAdminAPI\Model\WebSystemInfoService
     */
    public function getNginx()
    {
        return $this->container['nginx'];
    }

    /**
     * Sets nginx
     *
     * @param \COMPITAUT\DirectAdminAPI\Model\WebSystemInfoService $nginx nginx
     *
     * @return self
     */
    public function setNginx($nginx)
    {
        if (is_null($nginx)) {
            throw new \InvalidArgumentException('non-nullable nginx cannot be null');
        }
        $this->container['nginx'] = $nginx;

        return $this;
    }

    /**
     * Gets openlitespeed
     *
     * @return \COMPITAUT\DirectAdminAPI\Model\WebSystemInfoService
     */
    public function getOpenlitespeed()
    {
        return $this->container['openlitespeed'];
    }

    /**
     * Sets openlitespeed
     *
     * @param \COMPITAUT\DirectAdminAPI\Model\WebSystemInfoService $openlitespeed openlitespeed
     *
     * @return self
     */
    public function setOpenlitespeed($openlitespeed)
    {
        if (is_null($openlitespeed)) {
            throw new \InvalidArgumentException('non-nullable openlitespeed cannot be null');
        }
        $this->container['openlitespeed'] = $openlitespeed;

        return $this;
    }

    /**
     * Gets proftpd
     *
     * @return \COMPITAUT\DirectAdminAPI\Model\WebSystemInfoService
     */
    public function getProftpd()
    {
        return $this->container['proftpd'];
    }

    /**
     * Sets proftpd
     *
     * @param \COMPITAUT\DirectAdminAPI\Model\WebSystemInfoService $proftpd proftpd
     *
     * @return self
     */
    public function setProftpd($proftpd)
    {
        if (is_null($proftpd)) {
            throw new \InvalidArgumentException('non-nullable proftpd cannot be null');
        }
        $this->container['proftpd'] = $proftpd;

        return $this;
    }

    /**
     * Gets pureFtpd
     *
     * @return \COMPITAUT\DirectAdminAPI\Model\WebSystemInfoService
     */
    public function getPureFtpd()
    {
        return $this->container['pureFtpd'];
    }

    /**
     * Sets pureFtpd
     *
     * @param \COMPITAUT\DirectAdminAPI\Model\WebSystemInfoService $pureFtpd pureFtpd
     *
     * @return self
     */
    public function setPureFtpd($pureFtpd)
    {
        if (is_null($pureFtpd)) {
            throw new \InvalidArgumentException('non-nullable pureFtpd cannot be null');
        }
        $this->container['pureFtpd'] = $pureFtpd;

        return $this;
    }

    /**
     * Gets sshd
     *
     * @return \COMPITAUT\DirectAdminAPI\Model\WebSystemInfoService
     */
    public function getSshd()
    {
        return $this->container['sshd'];
    }

    /**
     * Sets sshd
     *
     * @param \COMPITAUT\DirectAdminAPI\Model\WebSystemInfoService $sshd sshd
     *
     * @return self
     */
    public function setSshd($sshd)
    {
        if (is_null($sshd)) {
            throw new \InvalidArgumentException('non-nullable sshd cannot be null');
        }
        $this->container['sshd'] = $sshd;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


