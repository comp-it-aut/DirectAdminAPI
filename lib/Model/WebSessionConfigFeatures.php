<?php
/**
 * WebSessionConfigFeatures
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  COMPITAUT\DirectAdminAPI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Swagger DirectAdmin API
 *
 * Swagger API for DirectAdmin server
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@directadmin.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace COMPITAUT\DirectAdminAPI\Model;

use \ArrayAccess;
use \COMPITAUT\DirectAdminAPI\ObjectSerializer;

/**
 * WebSessionConfigFeatures Class Doc Comment
 *
 * @category Class
 * @package  COMPITAUT\DirectAdminAPI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class WebSessionConfigFeatures implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'web.sessionConfigFeatures';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'auth2FA' => 'bool',
        'bruteforceLogScanner' => 'bool',
        'cgroup' => 'bool',
        'clamav' => 'bool',
        'composer' => 'bool',
        'dnssec' => 'int',
        'git' => 'bool',
        'imapsync' => 'bool',
        'inode' => 'bool',
        'ipv6' => 'bool',
        'jail' => 'int',
        'mxWithoutDNSControl' => 'bool',
        'netdataSock' => 'bool',
        'nginx' => 'bool',
        'nginxProxy' => 'bool',
        'nginxTemplates' => 'bool',
        'oneClickPMALogin' => 'bool',
        'phpmyadmin' => 'bool',
        'redis' => 'bool',
        'resellerCustomizeSkinConfigJson' => 'bool',
        'roundcube' => 'bool',
        'rspamdSock' => 'bool',
        'squirrelMail' => 'bool',
        'unit' => 'bool',
        'webmail' => 'bool',
        'wordpress' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'auth2FA' => null,
        'bruteforceLogScanner' => null,
        'cgroup' => null,
        'clamav' => null,
        'composer' => null,
        'dnssec' => null,
        'git' => null,
        'imapsync' => null,
        'inode' => null,
        'ipv6' => null,
        'jail' => null,
        'mxWithoutDNSControl' => null,
        'netdataSock' => null,
        'nginx' => null,
        'nginxProxy' => null,
        'nginxTemplates' => null,
        'oneClickPMALogin' => null,
        'phpmyadmin' => null,
        'redis' => null,
        'resellerCustomizeSkinConfigJson' => null,
        'roundcube' => null,
        'rspamdSock' => null,
        'squirrelMail' => null,
        'unit' => null,
        'webmail' => null,
        'wordpress' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'auth2FA' => false,
        'bruteforceLogScanner' => false,
        'cgroup' => false,
        'clamav' => false,
        'composer' => false,
        'dnssec' => false,
        'git' => false,
        'imapsync' => false,
        'inode' => false,
        'ipv6' => false,
        'jail' => false,
        'mxWithoutDNSControl' => false,
        'netdataSock' => false,
        'nginx' => false,
        'nginxProxy' => false,
        'nginxTemplates' => false,
        'oneClickPMALogin' => false,
        'phpmyadmin' => false,
        'redis' => false,
        'resellerCustomizeSkinConfigJson' => false,
        'roundcube' => false,
        'rspamdSock' => false,
        'squirrelMail' => false,
        'unit' => false,
        'webmail' => false,
        'wordpress' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'auth2FA' => 'auth2FA',
        'bruteforceLogScanner' => 'bruteforceLogScanner',
        'cgroup' => 'cgroup',
        'clamav' => 'clamav',
        'composer' => 'composer',
        'dnssec' => 'dnssec',
        'git' => 'git',
        'imapsync' => 'imapsync',
        'inode' => 'inode',
        'ipv6' => 'ipv6',
        'jail' => 'jail',
        'mxWithoutDNSControl' => 'mxWithoutDNSControl',
        'netdataSock' => 'netdataSock',
        'nginx' => 'nginx',
        'nginxProxy' => 'nginxProxy',
        'nginxTemplates' => 'nginxTemplates',
        'oneClickPMALogin' => 'oneClickPMALogin',
        'phpmyadmin' => 'phpmyadmin',
        'redis' => 'redis',
        'resellerCustomizeSkinConfigJson' => 'resellerCustomizeSkinConfigJson',
        'roundcube' => 'roundcube',
        'rspamdSock' => 'rspamdSock',
        'squirrelMail' => 'squirrelMail',
        'unit' => 'unit',
        'webmail' => 'webmail',
        'wordpress' => 'wordpress'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'auth2FA' => 'setAuth2FA',
        'bruteforceLogScanner' => 'setBruteforceLogScanner',
        'cgroup' => 'setCgroup',
        'clamav' => 'setClamav',
        'composer' => 'setComposer',
        'dnssec' => 'setDnssec',
        'git' => 'setGit',
        'imapsync' => 'setImapsync',
        'inode' => 'setInode',
        'ipv6' => 'setIpv6',
        'jail' => 'setJail',
        'mxWithoutDNSControl' => 'setMxWithoutDNSControl',
        'netdataSock' => 'setNetdataSock',
        'nginx' => 'setNginx',
        'nginxProxy' => 'setNginxProxy',
        'nginxTemplates' => 'setNginxTemplates',
        'oneClickPMALogin' => 'setOneClickPMALogin',
        'phpmyadmin' => 'setPhpmyadmin',
        'redis' => 'setRedis',
        'resellerCustomizeSkinConfigJson' => 'setResellerCustomizeSkinConfigJson',
        'roundcube' => 'setRoundcube',
        'rspamdSock' => 'setRspamdSock',
        'squirrelMail' => 'setSquirrelMail',
        'unit' => 'setUnit',
        'webmail' => 'setWebmail',
        'wordpress' => 'setWordpress'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'auth2FA' => 'getAuth2FA',
        'bruteforceLogScanner' => 'getBruteforceLogScanner',
        'cgroup' => 'getCgroup',
        'clamav' => 'getClamav',
        'composer' => 'getComposer',
        'dnssec' => 'getDnssec',
        'git' => 'getGit',
        'imapsync' => 'getImapsync',
        'inode' => 'getInode',
        'ipv6' => 'getIpv6',
        'jail' => 'getJail',
        'mxWithoutDNSControl' => 'getMxWithoutDNSControl',
        'netdataSock' => 'getNetdataSock',
        'nginx' => 'getNginx',
        'nginxProxy' => 'getNginxProxy',
        'nginxTemplates' => 'getNginxTemplates',
        'oneClickPMALogin' => 'getOneClickPMALogin',
        'phpmyadmin' => 'getPhpmyadmin',
        'redis' => 'getRedis',
        'resellerCustomizeSkinConfigJson' => 'getResellerCustomizeSkinConfigJson',
        'roundcube' => 'getRoundcube',
        'rspamdSock' => 'getRspamdSock',
        'squirrelMail' => 'getSquirrelMail',
        'unit' => 'getUnit',
        'webmail' => 'getWebmail',
        'wordpress' => 'getWordpress'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('auth2FA', $data ?? [], null);
        $this->setIfExists('bruteforceLogScanner', $data ?? [], null);
        $this->setIfExists('cgroup', $data ?? [], null);
        $this->setIfExists('clamav', $data ?? [], null);
        $this->setIfExists('composer', $data ?? [], null);
        $this->setIfExists('dnssec', $data ?? [], null);
        $this->setIfExists('git', $data ?? [], null);
        $this->setIfExists('imapsync', $data ?? [], null);
        $this->setIfExists('inode', $data ?? [], null);
        $this->setIfExists('ipv6', $data ?? [], null);
        $this->setIfExists('jail', $data ?? [], null);
        $this->setIfExists('mxWithoutDNSControl', $data ?? [], null);
        $this->setIfExists('netdataSock', $data ?? [], null);
        $this->setIfExists('nginx', $data ?? [], null);
        $this->setIfExists('nginxProxy', $data ?? [], null);
        $this->setIfExists('nginxTemplates', $data ?? [], null);
        $this->setIfExists('oneClickPMALogin', $data ?? [], null);
        $this->setIfExists('phpmyadmin', $data ?? [], null);
        $this->setIfExists('redis', $data ?? [], null);
        $this->setIfExists('resellerCustomizeSkinConfigJson', $data ?? [], null);
        $this->setIfExists('roundcube', $data ?? [], null);
        $this->setIfExists('rspamdSock', $data ?? [], null);
        $this->setIfExists('squirrelMail', $data ?? [], null);
        $this->setIfExists('unit', $data ?? [], null);
        $this->setIfExists('webmail', $data ?? [], null);
        $this->setIfExists('wordpress', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['auth2FA'] === null) {
            $invalidProperties[] = "'auth2FA' can't be null";
        }
        if ($this->container['bruteforceLogScanner'] === null) {
            $invalidProperties[] = "'bruteforceLogScanner' can't be null";
        }
        if ($this->container['cgroup'] === null) {
            $invalidProperties[] = "'cgroup' can't be null";
        }
        if ($this->container['clamav'] === null) {
            $invalidProperties[] = "'clamav' can't be null";
        }
        if ($this->container['composer'] === null) {
            $invalidProperties[] = "'composer' can't be null";
        }
        if ($this->container['dnssec'] === null) {
            $invalidProperties[] = "'dnssec' can't be null";
        }
        if ($this->container['git'] === null) {
            $invalidProperties[] = "'git' can't be null";
        }
        if ($this->container['imapsync'] === null) {
            $invalidProperties[] = "'imapsync' can't be null";
        }
        if ($this->container['inode'] === null) {
            $invalidProperties[] = "'inode' can't be null";
        }
        if ($this->container['ipv6'] === null) {
            $invalidProperties[] = "'ipv6' can't be null";
        }
        if ($this->container['jail'] === null) {
            $invalidProperties[] = "'jail' can't be null";
        }
        if ($this->container['mxWithoutDNSControl'] === null) {
            $invalidProperties[] = "'mxWithoutDNSControl' can't be null";
        }
        if ($this->container['netdataSock'] === null) {
            $invalidProperties[] = "'netdataSock' can't be null";
        }
        if ($this->container['nginx'] === null) {
            $invalidProperties[] = "'nginx' can't be null";
        }
        if ($this->container['nginxProxy'] === null) {
            $invalidProperties[] = "'nginxProxy' can't be null";
        }
        if ($this->container['nginxTemplates'] === null) {
            $invalidProperties[] = "'nginxTemplates' can't be null";
        }
        if ($this->container['oneClickPMALogin'] === null) {
            $invalidProperties[] = "'oneClickPMALogin' can't be null";
        }
        if ($this->container['phpmyadmin'] === null) {
            $invalidProperties[] = "'phpmyadmin' can't be null";
        }
        if ($this->container['redis'] === null) {
            $invalidProperties[] = "'redis' can't be null";
        }
        if ($this->container['resellerCustomizeSkinConfigJson'] === null) {
            $invalidProperties[] = "'resellerCustomizeSkinConfigJson' can't be null";
        }
        if ($this->container['roundcube'] === null) {
            $invalidProperties[] = "'roundcube' can't be null";
        }
        if ($this->container['rspamdSock'] === null) {
            $invalidProperties[] = "'rspamdSock' can't be null";
        }
        if ($this->container['squirrelMail'] === null) {
            $invalidProperties[] = "'squirrelMail' can't be null";
        }
        if ($this->container['unit'] === null) {
            $invalidProperties[] = "'unit' can't be null";
        }
        if ($this->container['webmail'] === null) {
            $invalidProperties[] = "'webmail' can't be null";
        }
        if ($this->container['wordpress'] === null) {
            $invalidProperties[] = "'wordpress' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets auth2FA
     *
     * @return bool
     */
    public function getAuth2FA()
    {
        return $this->container['auth2FA'];
    }

    /**
     * Sets auth2FA
     *
     * @param bool $auth2FA auth2FA
     *
     * @return self
     */
    public function setAuth2FA($auth2FA)
    {
        if (is_null($auth2FA)) {
            throw new \InvalidArgumentException('non-nullable auth2FA cannot be null');
        }
        $this->container['auth2FA'] = $auth2FA;

        return $this;
    }

    /**
     * Gets bruteforceLogScanner
     *
     * @return bool
     */
    public function getBruteforceLogScanner()
    {
        return $this->container['bruteforceLogScanner'];
    }

    /**
     * Sets bruteforceLogScanner
     *
     * @param bool $bruteforceLogScanner bruteforceLogScanner
     *
     * @return self
     */
    public function setBruteforceLogScanner($bruteforceLogScanner)
    {
        if (is_null($bruteforceLogScanner)) {
            throw new \InvalidArgumentException('non-nullable bruteforceLogScanner cannot be null');
        }
        $this->container['bruteforceLogScanner'] = $bruteforceLogScanner;

        return $this;
    }

    /**
     * Gets cgroup
     *
     * @return bool
     */
    public function getCgroup()
    {
        return $this->container['cgroup'];
    }

    /**
     * Sets cgroup
     *
     * @param bool $cgroup cgroup
     *
     * @return self
     */
    public function setCgroup($cgroup)
    {
        if (is_null($cgroup)) {
            throw new \InvalidArgumentException('non-nullable cgroup cannot be null');
        }
        $this->container['cgroup'] = $cgroup;

        return $this;
    }

    /**
     * Gets clamav
     *
     * @return bool
     */
    public function getClamav()
    {
        return $this->container['clamav'];
    }

    /**
     * Sets clamav
     *
     * @param bool $clamav clamav
     *
     * @return self
     */
    public function setClamav($clamav)
    {
        if (is_null($clamav)) {
            throw new \InvalidArgumentException('non-nullable clamav cannot be null');
        }
        $this->container['clamav'] = $clamav;

        return $this;
    }

    /**
     * Gets composer
     *
     * @return bool
     */
    public function getComposer()
    {
        return $this->container['composer'];
    }

    /**
     * Sets composer
     *
     * @param bool $composer composer
     *
     * @return self
     */
    public function setComposer($composer)
    {
        if (is_null($composer)) {
            throw new \InvalidArgumentException('non-nullable composer cannot be null');
        }
        $this->container['composer'] = $composer;

        return $this;
    }

    /**
     * Gets dnssec
     *
     * @return int
     */
    public function getDnssec()
    {
        return $this->container['dnssec'];
    }

    /**
     * Sets dnssec
     *
     * @param int $dnssec dnssec
     *
     * @return self
     */
    public function setDnssec($dnssec)
    {
        if (is_null($dnssec)) {
            throw new \InvalidArgumentException('non-nullable dnssec cannot be null');
        }
        $this->container['dnssec'] = $dnssec;

        return $this;
    }

    /**
     * Gets git
     *
     * @return bool
     */
    public function getGit()
    {
        return $this->container['git'];
    }

    /**
     * Sets git
     *
     * @param bool $git git
     *
     * @return self
     */
    public function setGit($git)
    {
        if (is_null($git)) {
            throw new \InvalidArgumentException('non-nullable git cannot be null');
        }
        $this->container['git'] = $git;

        return $this;
    }

    /**
     * Gets imapsync
     *
     * @return bool
     */
    public function getImapsync()
    {
        return $this->container['imapsync'];
    }

    /**
     * Sets imapsync
     *
     * @param bool $imapsync imapsync
     *
     * @return self
     */
    public function setImapsync($imapsync)
    {
        if (is_null($imapsync)) {
            throw new \InvalidArgumentException('non-nullable imapsync cannot be null');
        }
        $this->container['imapsync'] = $imapsync;

        return $this;
    }

    /**
     * Gets inode
     *
     * @return bool
     */
    public function getInode()
    {
        return $this->container['inode'];
    }

    /**
     * Sets inode
     *
     * @param bool $inode inode
     *
     * @return self
     */
    public function setInode($inode)
    {
        if (is_null($inode)) {
            throw new \InvalidArgumentException('non-nullable inode cannot be null');
        }
        $this->container['inode'] = $inode;

        return $this;
    }

    /**
     * Gets ipv6
     *
     * @return bool
     */
    public function getIpv6()
    {
        return $this->container['ipv6'];
    }

    /**
     * Sets ipv6
     *
     * @param bool $ipv6 ipv6
     *
     * @return self
     */
    public function setIpv6($ipv6)
    {
        if (is_null($ipv6)) {
            throw new \InvalidArgumentException('non-nullable ipv6 cannot be null');
        }
        $this->container['ipv6'] = $ipv6;

        return $this;
    }

    /**
     * Gets jail
     *
     * @return int
     */
    public function getJail()
    {
        return $this->container['jail'];
    }

    /**
     * Sets jail
     *
     * @param int $jail jail
     *
     * @return self
     */
    public function setJail($jail)
    {
        if (is_null($jail)) {
            throw new \InvalidArgumentException('non-nullable jail cannot be null');
        }
        $this->container['jail'] = $jail;

        return $this;
    }

    /**
     * Gets mxWithoutDNSControl
     *
     * @return bool
     */
    public function getMxWithoutDNSControl()
    {
        return $this->container['mxWithoutDNSControl'];
    }

    /**
     * Sets mxWithoutDNSControl
     *
     * @param bool $mxWithoutDNSControl mxWithoutDNSControl
     *
     * @return self
     */
    public function setMxWithoutDNSControl($mxWithoutDNSControl)
    {
        if (is_null($mxWithoutDNSControl)) {
            throw new \InvalidArgumentException('non-nullable mxWithoutDNSControl cannot be null');
        }
        $this->container['mxWithoutDNSControl'] = $mxWithoutDNSControl;

        return $this;
    }

    /**
     * Gets netdataSock
     *
     * @return bool
     */
    public function getNetdataSock()
    {
        return $this->container['netdataSock'];
    }

    /**
     * Sets netdataSock
     *
     * @param bool $netdataSock netdataSock
     *
     * @return self
     */
    public function setNetdataSock($netdataSock)
    {
        if (is_null($netdataSock)) {
            throw new \InvalidArgumentException('non-nullable netdataSock cannot be null');
        }
        $this->container['netdataSock'] = $netdataSock;

        return $this;
    }

    /**
     * Gets nginx
     *
     * @return bool
     */
    public function getNginx()
    {
        return $this->container['nginx'];
    }

    /**
     * Sets nginx
     *
     * @param bool $nginx nginx
     *
     * @return self
     */
    public function setNginx($nginx)
    {
        if (is_null($nginx)) {
            throw new \InvalidArgumentException('non-nullable nginx cannot be null');
        }
        $this->container['nginx'] = $nginx;

        return $this;
    }

    /**
     * Gets nginxProxy
     *
     * @return bool
     */
    public function getNginxProxy()
    {
        return $this->container['nginxProxy'];
    }

    /**
     * Sets nginxProxy
     *
     * @param bool $nginxProxy nginxProxy
     *
     * @return self
     */
    public function setNginxProxy($nginxProxy)
    {
        if (is_null($nginxProxy)) {
            throw new \InvalidArgumentException('non-nullable nginxProxy cannot be null');
        }
        $this->container['nginxProxy'] = $nginxProxy;

        return $this;
    }

    /**
     * Gets nginxTemplates
     *
     * @return bool
     */
    public function getNginxTemplates()
    {
        return $this->container['nginxTemplates'];
    }

    /**
     * Sets nginxTemplates
     *
     * @param bool $nginxTemplates nginxTemplates
     *
     * @return self
     */
    public function setNginxTemplates($nginxTemplates)
    {
        if (is_null($nginxTemplates)) {
            throw new \InvalidArgumentException('non-nullable nginxTemplates cannot be null');
        }
        $this->container['nginxTemplates'] = $nginxTemplates;

        return $this;
    }

    /**
     * Gets oneClickPMALogin
     *
     * @return bool
     */
    public function getOneClickPMALogin()
    {
        return $this->container['oneClickPMALogin'];
    }

    /**
     * Sets oneClickPMALogin
     *
     * @param bool $oneClickPMALogin oneClickPMALogin
     *
     * @return self
     */
    public function setOneClickPMALogin($oneClickPMALogin)
    {
        if (is_null($oneClickPMALogin)) {
            throw new \InvalidArgumentException('non-nullable oneClickPMALogin cannot be null');
        }
        $this->container['oneClickPMALogin'] = $oneClickPMALogin;

        return $this;
    }

    /**
     * Gets phpmyadmin
     *
     * @return bool
     */
    public function getPhpmyadmin()
    {
        return $this->container['phpmyadmin'];
    }

    /**
     * Sets phpmyadmin
     *
     * @param bool $phpmyadmin phpmyadmin
     *
     * @return self
     */
    public function setPhpmyadmin($phpmyadmin)
    {
        if (is_null($phpmyadmin)) {
            throw new \InvalidArgumentException('non-nullable phpmyadmin cannot be null');
        }
        $this->container['phpmyadmin'] = $phpmyadmin;

        return $this;
    }

    /**
     * Gets redis
     *
     * @return bool
     */
    public function getRedis()
    {
        return $this->container['redis'];
    }

    /**
     * Sets redis
     *
     * @param bool $redis redis
     *
     * @return self
     */
    public function setRedis($redis)
    {
        if (is_null($redis)) {
            throw new \InvalidArgumentException('non-nullable redis cannot be null');
        }
        $this->container['redis'] = $redis;

        return $this;
    }

    /**
     * Gets resellerCustomizeSkinConfigJson
     *
     * @return bool
     */
    public function getResellerCustomizeSkinConfigJson()
    {
        return $this->container['resellerCustomizeSkinConfigJson'];
    }

    /**
     * Sets resellerCustomizeSkinConfigJson
     *
     * @param bool $resellerCustomizeSkinConfigJson resellerCustomizeSkinConfigJson
     *
     * @return self
     */
    public function setResellerCustomizeSkinConfigJson($resellerCustomizeSkinConfigJson)
    {
        if (is_null($resellerCustomizeSkinConfigJson)) {
            throw new \InvalidArgumentException('non-nullable resellerCustomizeSkinConfigJson cannot be null');
        }
        $this->container['resellerCustomizeSkinConfigJson'] = $resellerCustomizeSkinConfigJson;

        return $this;
    }

    /**
     * Gets roundcube
     *
     * @return bool
     */
    public function getRoundcube()
    {
        return $this->container['roundcube'];
    }

    /**
     * Sets roundcube
     *
     * @param bool $roundcube roundcube
     *
     * @return self
     */
    public function setRoundcube($roundcube)
    {
        if (is_null($roundcube)) {
            throw new \InvalidArgumentException('non-nullable roundcube cannot be null');
        }
        $this->container['roundcube'] = $roundcube;

        return $this;
    }

    /**
     * Gets rspamdSock
     *
     * @return bool
     */
    public function getRspamdSock()
    {
        return $this->container['rspamdSock'];
    }

    /**
     * Sets rspamdSock
     *
     * @param bool $rspamdSock rspamdSock
     *
     * @return self
     */
    public function setRspamdSock($rspamdSock)
    {
        if (is_null($rspamdSock)) {
            throw new \InvalidArgumentException('non-nullable rspamdSock cannot be null');
        }
        $this->container['rspamdSock'] = $rspamdSock;

        return $this;
    }

    /**
     * Gets squirrelMail
     *
     * @return bool
     */
    public function getSquirrelMail()
    {
        return $this->container['squirrelMail'];
    }

    /**
     * Sets squirrelMail
     *
     * @param bool $squirrelMail squirrelMail
     *
     * @return self
     */
    public function setSquirrelMail($squirrelMail)
    {
        if (is_null($squirrelMail)) {
            throw new \InvalidArgumentException('non-nullable squirrelMail cannot be null');
        }
        $this->container['squirrelMail'] = $squirrelMail;

        return $this;
    }

    /**
     * Gets unit
     *
     * @return bool
     */
    public function getUnit()
    {
        return $this->container['unit'];
    }

    /**
     * Sets unit
     *
     * @param bool $unit unit
     *
     * @return self
     */
    public function setUnit($unit)
    {
        if (is_null($unit)) {
            throw new \InvalidArgumentException('non-nullable unit cannot be null');
        }
        $this->container['unit'] = $unit;

        return $this;
    }

    /**
     * Gets webmail
     *
     * @return bool
     */
    public function getWebmail()
    {
        return $this->container['webmail'];
    }

    /**
     * Sets webmail
     *
     * @param bool $webmail webmail
     *
     * @return self
     */
    public function setWebmail($webmail)
    {
        if (is_null($webmail)) {
            throw new \InvalidArgumentException('non-nullable webmail cannot be null');
        }
        $this->container['webmail'] = $webmail;

        return $this;
    }

    /**
     * Gets wordpress
     *
     * @return bool
     */
    public function getWordpress()
    {
        return $this->container['wordpress'];
    }

    /**
     * Sets wordpress
     *
     * @param bool $wordpress wordpress
     *
     * @return self
     */
    public function setWordpress($wordpress)
    {
        if (is_null($wordpress)) {
            throw new \InvalidArgumentException('non-nullable wordpress cannot be null');
        }
        $this->container['wordpress'] = $wordpress;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


