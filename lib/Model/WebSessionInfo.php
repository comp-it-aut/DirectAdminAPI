<?php
/**
 * WebSessionInfo
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  COMPITAUT\DirectAdminAPI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Swagger DirectAdmin API
 *
 * Swagger API for DirectAdmin server
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@directadmin.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace COMPITAUT\DirectAdminAPI\Model;

use \ArrayAccess;
use \COMPITAUT\DirectAdminAPI\ObjectSerializer;

/**
 * WebSessionInfo Class Doc Comment
 *
 * @category Class
 * @package  COMPITAUT\DirectAdminAPI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class WebSessionInfo implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'web.sessionInfo';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'allowedCommands' => 'string[]',
        'configFeatures' => '\COMPITAUT\DirectAdminAPI\Model\WebSessionConfigFeatures',
        'customDomainItems' => '\COMPITAUT\DirectAdminAPI\Model\WebSessionCustomDomainItem[]',
        'custombuildOptions' => '\COMPITAUT\DirectAdminAPI\Model\WebSessionCBOptions',
        'demo' => 'bool',
        'directadminConfig' => '\COMPITAUT\DirectAdminAPI\Model\WebSessionDAConf',
        'effectiveRole' => 'string',
        'effectiveUsername' => 'string',
        'havePluginHooksAdmin' => 'bool',
        'havePluginHooksReseller' => 'bool',
        'havePluginHooksUser' => 'bool',
        'homeDir' => 'string',
        'loginAsDNSControl' => 'bool',
        'phpmyadminPublic' => 'bool',
        'realUsername' => 'string',
        'selectedDomain' => 'string',
        'sessionID' => 'string',
        'ticketsEnabled' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'allowedCommands' => null,
        'configFeatures' => null,
        'customDomainItems' => null,
        'custombuildOptions' => null,
        'demo' => null,
        'directadminConfig' => null,
        'effectiveRole' => null,
        'effectiveUsername' => null,
        'havePluginHooksAdmin' => null,
        'havePluginHooksReseller' => null,
        'havePluginHooksUser' => null,
        'homeDir' => null,
        'loginAsDNSControl' => null,
        'phpmyadminPublic' => null,
        'realUsername' => null,
        'selectedDomain' => null,
        'sessionID' => null,
        'ticketsEnabled' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'allowedCommands' => false,
        'configFeatures' => false,
        'customDomainItems' => false,
        'custombuildOptions' => false,
        'demo' => false,
        'directadminConfig' => false,
        'effectiveRole' => false,
        'effectiveUsername' => false,
        'havePluginHooksAdmin' => false,
        'havePluginHooksReseller' => false,
        'havePluginHooksUser' => false,
        'homeDir' => false,
        'loginAsDNSControl' => false,
        'phpmyadminPublic' => false,
        'realUsername' => false,
        'selectedDomain' => false,
        'sessionID' => false,
        'ticketsEnabled' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'allowedCommands' => 'allowedCommands',
        'configFeatures' => 'configFeatures',
        'customDomainItems' => 'customDomainItems',
        'custombuildOptions' => 'custombuildOptions',
        'demo' => 'demo',
        'directadminConfig' => 'directadminConfig',
        'effectiveRole' => 'effectiveRole',
        'effectiveUsername' => 'effectiveUsername',
        'havePluginHooksAdmin' => 'havePluginHooksAdmin',
        'havePluginHooksReseller' => 'havePluginHooksReseller',
        'havePluginHooksUser' => 'havePluginHooksUser',
        'homeDir' => 'homeDir',
        'loginAsDNSControl' => 'loginAsDNSControl',
        'phpmyadminPublic' => 'phpmyadminPublic',
        'realUsername' => 'realUsername',
        'selectedDomain' => 'selectedDomain',
        'sessionID' => 'sessionID',
        'ticketsEnabled' => 'ticketsEnabled'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'allowedCommands' => 'setAllowedCommands',
        'configFeatures' => 'setConfigFeatures',
        'customDomainItems' => 'setCustomDomainItems',
        'custombuildOptions' => 'setCustombuildOptions',
        'demo' => 'setDemo',
        'directadminConfig' => 'setDirectadminConfig',
        'effectiveRole' => 'setEffectiveRole',
        'effectiveUsername' => 'setEffectiveUsername',
        'havePluginHooksAdmin' => 'setHavePluginHooksAdmin',
        'havePluginHooksReseller' => 'setHavePluginHooksReseller',
        'havePluginHooksUser' => 'setHavePluginHooksUser',
        'homeDir' => 'setHomeDir',
        'loginAsDNSControl' => 'setLoginAsDNSControl',
        'phpmyadminPublic' => 'setPhpmyadminPublic',
        'realUsername' => 'setRealUsername',
        'selectedDomain' => 'setSelectedDomain',
        'sessionID' => 'setSessionID',
        'ticketsEnabled' => 'setTicketsEnabled'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'allowedCommands' => 'getAllowedCommands',
        'configFeatures' => 'getConfigFeatures',
        'customDomainItems' => 'getCustomDomainItems',
        'custombuildOptions' => 'getCustombuildOptions',
        'demo' => 'getDemo',
        'directadminConfig' => 'getDirectadminConfig',
        'effectiveRole' => 'getEffectiveRole',
        'effectiveUsername' => 'getEffectiveUsername',
        'havePluginHooksAdmin' => 'getHavePluginHooksAdmin',
        'havePluginHooksReseller' => 'getHavePluginHooksReseller',
        'havePluginHooksUser' => 'getHavePluginHooksUser',
        'homeDir' => 'getHomeDir',
        'loginAsDNSControl' => 'getLoginAsDNSControl',
        'phpmyadminPublic' => 'getPhpmyadminPublic',
        'realUsername' => 'getRealUsername',
        'selectedDomain' => 'getSelectedDomain',
        'sessionID' => 'getSessionID',
        'ticketsEnabled' => 'getTicketsEnabled'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const EFFECTIVE_ROLE_USER = 'user';
    public const EFFECTIVE_ROLE_RESELLER = 'reseller';
    public const EFFECTIVE_ROLE_ADMIN = 'admin';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getEffectiveRoleAllowableValues()
    {
        return [
            self::EFFECTIVE_ROLE_USER,
            self::EFFECTIVE_ROLE_RESELLER,
            self::EFFECTIVE_ROLE_ADMIN,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('allowedCommands', $data ?? [], null);
        $this->setIfExists('configFeatures', $data ?? [], null);
        $this->setIfExists('customDomainItems', $data ?? [], null);
        $this->setIfExists('custombuildOptions', $data ?? [], null);
        $this->setIfExists('demo', $data ?? [], null);
        $this->setIfExists('directadminConfig', $data ?? [], null);
        $this->setIfExists('effectiveRole', $data ?? [], null);
        $this->setIfExists('effectiveUsername', $data ?? [], null);
        $this->setIfExists('havePluginHooksAdmin', $data ?? [], null);
        $this->setIfExists('havePluginHooksReseller', $data ?? [], null);
        $this->setIfExists('havePluginHooksUser', $data ?? [], null);
        $this->setIfExists('homeDir', $data ?? [], null);
        $this->setIfExists('loginAsDNSControl', $data ?? [], null);
        $this->setIfExists('phpmyadminPublic', $data ?? [], null);
        $this->setIfExists('realUsername', $data ?? [], null);
        $this->setIfExists('selectedDomain', $data ?? [], null);
        $this->setIfExists('sessionID', $data ?? [], null);
        $this->setIfExists('ticketsEnabled', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['allowedCommands'] === null) {
            $invalidProperties[] = "'allowedCommands' can't be null";
        }
        if ($this->container['configFeatures'] === null) {
            $invalidProperties[] = "'configFeatures' can't be null";
        }
        if ($this->container['customDomainItems'] === null) {
            $invalidProperties[] = "'customDomainItems' can't be null";
        }
        if ($this->container['custombuildOptions'] === null) {
            $invalidProperties[] = "'custombuildOptions' can't be null";
        }
        if ($this->container['demo'] === null) {
            $invalidProperties[] = "'demo' can't be null";
        }
        if ($this->container['directadminConfig'] === null) {
            $invalidProperties[] = "'directadminConfig' can't be null";
        }
        if ($this->container['effectiveRole'] === null) {
            $invalidProperties[] = "'effectiveRole' can't be null";
        }
        $allowedValues = $this->getEffectiveRoleAllowableValues();
        if (!is_null($this->container['effectiveRole']) && !in_array($this->container['effectiveRole'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'effectiveRole', must be one of '%s'",
                $this->container['effectiveRole'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['effectiveUsername'] === null) {
            $invalidProperties[] = "'effectiveUsername' can't be null";
        }
        if ($this->container['havePluginHooksAdmin'] === null) {
            $invalidProperties[] = "'havePluginHooksAdmin' can't be null";
        }
        if ($this->container['havePluginHooksReseller'] === null) {
            $invalidProperties[] = "'havePluginHooksReseller' can't be null";
        }
        if ($this->container['havePluginHooksUser'] === null) {
            $invalidProperties[] = "'havePluginHooksUser' can't be null";
        }
        if ($this->container['homeDir'] === null) {
            $invalidProperties[] = "'homeDir' can't be null";
        }
        if ($this->container['loginAsDNSControl'] === null) {
            $invalidProperties[] = "'loginAsDNSControl' can't be null";
        }
        if ($this->container['phpmyadminPublic'] === null) {
            $invalidProperties[] = "'phpmyadminPublic' can't be null";
        }
        if ($this->container['realUsername'] === null) {
            $invalidProperties[] = "'realUsername' can't be null";
        }
        if ($this->container['selectedDomain'] === null) {
            $invalidProperties[] = "'selectedDomain' can't be null";
        }
        if ($this->container['sessionID'] === null) {
            $invalidProperties[] = "'sessionID' can't be null";
        }
        if ($this->container['ticketsEnabled'] === null) {
            $invalidProperties[] = "'ticketsEnabled' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets allowedCommands
     *
     * @return string[]
     */
    public function getAllowedCommands()
    {
        return $this->container['allowedCommands'];
    }

    /**
     * Sets allowedCommands
     *
     * @param string[] $allowedCommands allowedCommands
     *
     * @return self
     */
    public function setAllowedCommands($allowedCommands)
    {
        if (is_null($allowedCommands)) {
            throw new \InvalidArgumentException('non-nullable allowedCommands cannot be null');
        }
        $this->container['allowedCommands'] = $allowedCommands;

        return $this;
    }

    /**
     * Gets configFeatures
     *
     * @return \COMPITAUT\DirectAdminAPI\Model\WebSessionConfigFeatures
     */
    public function getConfigFeatures()
    {
        return $this->container['configFeatures'];
    }

    /**
     * Sets configFeatures
     *
     * @param \COMPITAUT\DirectAdminAPI\Model\WebSessionConfigFeatures $configFeatures configFeatures
     *
     * @return self
     */
    public function setConfigFeatures($configFeatures)
    {
        if (is_null($configFeatures)) {
            throw new \InvalidArgumentException('non-nullable configFeatures cannot be null');
        }
        $this->container['configFeatures'] = $configFeatures;

        return $this;
    }

    /**
     * Gets customDomainItems
     *
     * @return \COMPITAUT\DirectAdminAPI\Model\WebSessionCustomDomainItem[]
     */
    public function getCustomDomainItems()
    {
        return $this->container['customDomainItems'];
    }

    /**
     * Sets customDomainItems
     *
     * @param \COMPITAUT\DirectAdminAPI\Model\WebSessionCustomDomainItem[] $customDomainItems List of extra HTML form elements to be associated with domain config (when creating or updating).
     *
     * @return self
     */
    public function setCustomDomainItems($customDomainItems)
    {
        if (is_null($customDomainItems)) {
            throw new \InvalidArgumentException('non-nullable customDomainItems cannot be null');
        }
        $this->container['customDomainItems'] = $customDomainItems;

        return $this;
    }

    /**
     * Gets custombuildOptions
     *
     * @return \COMPITAUT\DirectAdminAPI\Model\WebSessionCBOptions
     */
    public function getCustombuildOptions()
    {
        return $this->container['custombuildOptions'];
    }

    /**
     * Sets custombuildOptions
     *
     * @param \COMPITAUT\DirectAdminAPI\Model\WebSessionCBOptions $custombuildOptions custombuildOptions
     *
     * @return self
     */
    public function setCustombuildOptions($custombuildOptions)
    {
        if (is_null($custombuildOptions)) {
            throw new \InvalidArgumentException('non-nullable custombuildOptions cannot be null');
        }
        $this->container['custombuildOptions'] = $custombuildOptions;

        return $this;
    }

    /**
     * Gets demo
     *
     * @return bool
     */
    public function getDemo()
    {
        return $this->container['demo'];
    }

    /**
     * Sets demo
     *
     * @param bool $demo demo
     *
     * @return self
     */
    public function setDemo($demo)
    {
        if (is_null($demo)) {
            throw new \InvalidArgumentException('non-nullable demo cannot be null');
        }
        $this->container['demo'] = $demo;

        return $this;
    }

    /**
     * Gets directadminConfig
     *
     * @return \COMPITAUT\DirectAdminAPI\Model\WebSessionDAConf
     */
    public function getDirectadminConfig()
    {
        return $this->container['directadminConfig'];
    }

    /**
     * Sets directadminConfig
     *
     * @param \COMPITAUT\DirectAdminAPI\Model\WebSessionDAConf $directadminConfig directadminConfig
     *
     * @return self
     */
    public function setDirectadminConfig($directadminConfig)
    {
        if (is_null($directadminConfig)) {
            throw new \InvalidArgumentException('non-nullable directadminConfig cannot be null');
        }
        $this->container['directadminConfig'] = $directadminConfig;

        return $this;
    }

    /**
     * Gets effectiveRole
     *
     * @return string
     */
    public function getEffectiveRole()
    {
        return $this->container['effectiveRole'];
    }

    /**
     * Sets effectiveRole
     *
     * @param string $effectiveRole Minimum role required to access the command
     *
     * @return self
     */
    public function setEffectiveRole($effectiveRole)
    {
        if (is_null($effectiveRole)) {
            throw new \InvalidArgumentException('non-nullable effectiveRole cannot be null');
        }
        $allowedValues = $this->getEffectiveRoleAllowableValues();
        if (!in_array($effectiveRole, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'effectiveRole', must be one of '%s'",
                    $effectiveRole,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['effectiveRole'] = $effectiveRole;

        return $this;
    }

    /**
     * Gets effectiveUsername
     *
     * @return string
     */
    public function getEffectiveUsername()
    {
        return $this->container['effectiveUsername'];
    }

    /**
     * Sets effectiveUsername
     *
     * @param string $effectiveUsername effectiveUsername
     *
     * @return self
     */
    public function setEffectiveUsername($effectiveUsername)
    {
        if (is_null($effectiveUsername)) {
            throw new \InvalidArgumentException('non-nullable effectiveUsername cannot be null');
        }
        $this->container['effectiveUsername'] = $effectiveUsername;

        return $this;
    }

    /**
     * Gets havePluginHooksAdmin
     *
     * @return bool
     */
    public function getHavePluginHooksAdmin()
    {
        return $this->container['havePluginHooksAdmin'];
    }

    /**
     * Sets havePluginHooksAdmin
     *
     * @param bool $havePluginHooksAdmin havePluginHooksAdmin
     *
     * @return self
     */
    public function setHavePluginHooksAdmin($havePluginHooksAdmin)
    {
        if (is_null($havePluginHooksAdmin)) {
            throw new \InvalidArgumentException('non-nullable havePluginHooksAdmin cannot be null');
        }
        $this->container['havePluginHooksAdmin'] = $havePluginHooksAdmin;

        return $this;
    }

    /**
     * Gets havePluginHooksReseller
     *
     * @return bool
     */
    public function getHavePluginHooksReseller()
    {
        return $this->container['havePluginHooksReseller'];
    }

    /**
     * Sets havePluginHooksReseller
     *
     * @param bool $havePluginHooksReseller havePluginHooksReseller
     *
     * @return self
     */
    public function setHavePluginHooksReseller($havePluginHooksReseller)
    {
        if (is_null($havePluginHooksReseller)) {
            throw new \InvalidArgumentException('non-nullable havePluginHooksReseller cannot be null');
        }
        $this->container['havePluginHooksReseller'] = $havePluginHooksReseller;

        return $this;
    }

    /**
     * Gets havePluginHooksUser
     *
     * @return bool
     */
    public function getHavePluginHooksUser()
    {
        return $this->container['havePluginHooksUser'];
    }

    /**
     * Sets havePluginHooksUser
     *
     * @param bool $havePluginHooksUser havePluginHooksUser
     *
     * @return self
     */
    public function setHavePluginHooksUser($havePluginHooksUser)
    {
        if (is_null($havePluginHooksUser)) {
            throw new \InvalidArgumentException('non-nullable havePluginHooksUser cannot be null');
        }
        $this->container['havePluginHooksUser'] = $havePluginHooksUser;

        return $this;
    }

    /**
     * Gets homeDir
     *
     * @return string
     */
    public function getHomeDir()
    {
        return $this->container['homeDir'];
    }

    /**
     * Sets homeDir
     *
     * @param string $homeDir homeDir
     *
     * @return self
     */
    public function setHomeDir($homeDir)
    {
        if (is_null($homeDir)) {
            throw new \InvalidArgumentException('non-nullable homeDir cannot be null');
        }
        $this->container['homeDir'] = $homeDir;

        return $this;
    }

    /**
     * Gets loginAsDNSControl
     *
     * @return bool
     */
    public function getLoginAsDNSControl()
    {
        return $this->container['loginAsDNSControl'];
    }

    /**
     * Sets loginAsDNSControl
     *
     * @param bool $loginAsDNSControl loginAsDNSControl
     *
     * @return self
     */
    public function setLoginAsDNSControl($loginAsDNSControl)
    {
        if (is_null($loginAsDNSControl)) {
            throw new \InvalidArgumentException('non-nullable loginAsDNSControl cannot be null');
        }
        $this->container['loginAsDNSControl'] = $loginAsDNSControl;

        return $this;
    }

    /**
     * Gets phpmyadminPublic
     *
     * @return bool
     */
    public function getPhpmyadminPublic()
    {
        return $this->container['phpmyadminPublic'];
    }

    /**
     * Sets phpmyadminPublic
     *
     * @param bool $phpmyadminPublic phpmyadminPublic
     *
     * @return self
     */
    public function setPhpmyadminPublic($phpmyadminPublic)
    {
        if (is_null($phpmyadminPublic)) {
            throw new \InvalidArgumentException('non-nullable phpmyadminPublic cannot be null');
        }
        $this->container['phpmyadminPublic'] = $phpmyadminPublic;

        return $this;
    }

    /**
     * Gets realUsername
     *
     * @return string
     */
    public function getRealUsername()
    {
        return $this->container['realUsername'];
    }

    /**
     * Sets realUsername
     *
     * @param string $realUsername Differs from effective username if an user with higher privileges (aka real user) is logged in as effective user, otherwise is equal to effective user.
     *
     * @return self
     */
    public function setRealUsername($realUsername)
    {
        if (is_null($realUsername)) {
            throw new \InvalidArgumentException('non-nullable realUsername cannot be null');
        }
        $this->container['realUsername'] = $realUsername;

        return $this;
    }

    /**
     * Gets selectedDomain
     *
     * @return string
     */
    public function getSelectedDomain()
    {
        return $this->container['selectedDomain'];
    }

    /**
     * Sets selectedDomain
     *
     * @param string $selectedDomain Can be empty, e. g., user has no domains.
     *
     * @return self
     */
    public function setSelectedDomain($selectedDomain)
    {
        if (is_null($selectedDomain)) {
            throw new \InvalidArgumentException('non-nullable selectedDomain cannot be null');
        }
        $this->container['selectedDomain'] = $selectedDomain;

        return $this;
    }

    /**
     * Gets sessionID
     *
     * @return string
     */
    public function getSessionID()
    {
        return $this->container['sessionID'];
    }

    /**
     * Sets sessionID
     *
     * @param string $sessionID Empty for Basic auth requests
     *
     * @return self
     */
    public function setSessionID($sessionID)
    {
        if (is_null($sessionID)) {
            throw new \InvalidArgumentException('non-nullable sessionID cannot be null');
        }
        $this->container['sessionID'] = $sessionID;

        return $this;
    }

    /**
     * Gets ticketsEnabled
     *
     * @return bool
     */
    public function getTicketsEnabled()
    {
        return $this->container['ticketsEnabled'];
    }

    /**
     * Sets ticketsEnabled
     *
     * @param bool $ticketsEnabled ticketsEnabled
     *
     * @return self
     */
    public function setTicketsEnabled($ticketsEnabled)
    {
        if (is_null($ticketsEnabled)) {
            throw new \InvalidArgumentException('non-nullable ticketsEnabled cannot be null');
        }
        $this->container['ticketsEnabled'] = $ticketsEnabled;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


