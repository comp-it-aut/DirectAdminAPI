<?php
/**
 * WebLoginKeyCreateRequest
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  COMPITAUT\DirectAdminAPI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Swagger DirectAdmin API
 *
 * Swagger API for DirectAdmin server
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@directadmin.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace COMPITAUT\DirectAdminAPI\Model;

use \ArrayAccess;
use \COMPITAUT\DirectAdminAPI\ObjectSerializer;

/**
 * WebLoginKeyCreateRequest Class Doc Comment
 *
 * @category Class
 * @package  COMPITAUT\DirectAdminAPI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class WebLoginKeyCreateRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'web.loginKeyCreateRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'allowCommands' => 'string[]',
        'allowLogin' => 'bool',
        'allowNetworks' => 'string[]',
        'autoRemove' => 'bool',
        'currentPassword' => 'string',
        'denyCommands' => 'string[]',
        'expires' => '\DateTime',
        'hasExpiry' => 'bool',
        'id' => 'string',
        'password' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'allowCommands' => null,
        'allowLogin' => null,
        'allowNetworks' => null,
        'autoRemove' => null,
        'currentPassword' => null,
        'denyCommands' => null,
        'expires' => 'date-time',
        'hasExpiry' => null,
        'id' => null,
        'password' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'allowCommands' => false,
        'allowLogin' => false,
        'allowNetworks' => false,
        'autoRemove' => false,
        'currentPassword' => false,
        'denyCommands' => false,
        'expires' => false,
        'hasExpiry' => false,
        'id' => false,
        'password' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'allowCommands' => 'allowCommands',
        'allowLogin' => 'allowLogin',
        'allowNetworks' => 'allowNetworks',
        'autoRemove' => 'autoRemove',
        'currentPassword' => 'currentPassword',
        'denyCommands' => 'denyCommands',
        'expires' => 'expires',
        'hasExpiry' => 'hasExpiry',
        'id' => 'id',
        'password' => 'password'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'allowCommands' => 'setAllowCommands',
        'allowLogin' => 'setAllowLogin',
        'allowNetworks' => 'setAllowNetworks',
        'autoRemove' => 'setAutoRemove',
        'currentPassword' => 'setCurrentPassword',
        'denyCommands' => 'setDenyCommands',
        'expires' => 'setExpires',
        'hasExpiry' => 'setHasExpiry',
        'id' => 'setId',
        'password' => 'setPassword'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'allowCommands' => 'getAllowCommands',
        'allowLogin' => 'getAllowLogin',
        'allowNetworks' => 'getAllowNetworks',
        'autoRemove' => 'getAutoRemove',
        'currentPassword' => 'getCurrentPassword',
        'denyCommands' => 'getDenyCommands',
        'expires' => 'getExpires',
        'hasExpiry' => 'getHasExpiry',
        'id' => 'getId',
        'password' => 'getPassword'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('allowCommands', $data ?? [], null);
        $this->setIfExists('allowLogin', $data ?? [], null);
        $this->setIfExists('allowNetworks', $data ?? [], null);
        $this->setIfExists('autoRemove', $data ?? [], null);
        $this->setIfExists('currentPassword', $data ?? [], null);
        $this->setIfExists('denyCommands', $data ?? [], null);
        $this->setIfExists('expires', $data ?? [], null);
        $this->setIfExists('hasExpiry', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('password', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['allowCommands'] === null) {
            $invalidProperties[] = "'allowCommands' can't be null";
        }
        if ($this->container['allowLogin'] === null) {
            $invalidProperties[] = "'allowLogin' can't be null";
        }
        if ($this->container['allowNetworks'] === null) {
            $invalidProperties[] = "'allowNetworks' can't be null";
        }
        if ($this->container['autoRemove'] === null) {
            $invalidProperties[] = "'autoRemove' can't be null";
        }
        if ($this->container['currentPassword'] === null) {
            $invalidProperties[] = "'currentPassword' can't be null";
        }
        if ($this->container['denyCommands'] === null) {
            $invalidProperties[] = "'denyCommands' can't be null";
        }
        if ($this->container['hasExpiry'] === null) {
            $invalidProperties[] = "'hasExpiry' can't be null";
        }
        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['password'] === null) {
            $invalidProperties[] = "'password' can't be null";
        }
        if ((mb_strlen($this->container['password']) > 256)) {
            $invalidProperties[] = "invalid value for 'password', the character length must be smaller than or equal to 256.";
        }

        if ((mb_strlen($this->container['password']) < 3)) {
            $invalidProperties[] = "invalid value for 'password', the character length must be bigger than or equal to 3.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets allowCommands
     *
     * @return string[]
     */
    public function getAllowCommands()
    {
        return $this->container['allowCommands'];
    }

    /**
     * Sets allowCommands
     *
     * @param string[] $allowCommands No restrictions if empty array.
     *
     * @return self
     */
    public function setAllowCommands($allowCommands)
    {
        if (is_null($allowCommands)) {
            throw new \InvalidArgumentException('non-nullable allowCommands cannot be null');
        }
        $this->container['allowCommands'] = $allowCommands;

        return $this;
    }

    /**
     * Gets allowLogin
     *
     * @return bool
     */
    public function getAllowLogin()
    {
        return $this->container['allowLogin'];
    }

    /**
     * Sets allowLogin
     *
     * @param bool $allowLogin allowLogin
     *
     * @return self
     */
    public function setAllowLogin($allowLogin)
    {
        if (is_null($allowLogin)) {
            throw new \InvalidArgumentException('non-nullable allowLogin cannot be null');
        }
        $this->container['allowLogin'] = $allowLogin;

        return $this;
    }

    /**
     * Gets allowNetworks
     *
     * @return string[]
     */
    public function getAllowNetworks()
    {
        return $this->container['allowNetworks'];
    }

    /**
     * Sets allowNetworks
     *
     * @param string[] $allowNetworks No restrictions if empty array.
     *
     * @return self
     */
    public function setAllowNetworks($allowNetworks)
    {
        if (is_null($allowNetworks)) {
            throw new \InvalidArgumentException('non-nullable allowNetworks cannot be null');
        }
        $this->container['allowNetworks'] = $allowNetworks;

        return $this;
    }

    /**
     * Gets autoRemove
     *
     * @return bool
     */
    public function getAutoRemove()
    {
        return $this->container['autoRemove'];
    }

    /**
     * Sets autoRemove
     *
     * @param bool $autoRemove autoRemove
     *
     * @return self
     */
    public function setAutoRemove($autoRemove)
    {
        if (is_null($autoRemove)) {
            throw new \InvalidArgumentException('non-nullable autoRemove cannot be null');
        }
        $this->container['autoRemove'] = $autoRemove;

        return $this;
    }

    /**
     * Gets currentPassword
     *
     * @return string
     */
    public function getCurrentPassword()
    {
        return $this->container['currentPassword'];
    }

    /**
     * Sets currentPassword
     *
     * @param string $currentPassword Only for session requests.
     *
     * @return self
     */
    public function setCurrentPassword($currentPassword)
    {
        if (is_null($currentPassword)) {
            throw new \InvalidArgumentException('non-nullable currentPassword cannot be null');
        }
        $this->container['currentPassword'] = $currentPassword;

        return $this;
    }

    /**
     * Gets denyCommands
     *
     * @return string[]
     */
    public function getDenyCommands()
    {
        return $this->container['denyCommands'];
    }

    /**
     * Sets denyCommands
     *
     * @param string[] $denyCommands No restrictions if empty array.
     *
     * @return self
     */
    public function setDenyCommands($denyCommands)
    {
        if (is_null($denyCommands)) {
            throw new \InvalidArgumentException('non-nullable denyCommands cannot be null');
        }
        $this->container['denyCommands'] = $denyCommands;

        return $this;
    }

    /**
     * Gets expires
     *
     * @return \DateTime|null
     */
    public function getExpires()
    {
        return $this->container['expires'];
    }

    /**
     * Sets expires
     *
     * @param \DateTime|null $expires Ignored if HasExpiry is false.
     *
     * @return self
     */
    public function setExpires($expires)
    {
        if (is_null($expires)) {
            throw new \InvalidArgumentException('non-nullable expires cannot be null');
        }
        $this->container['expires'] = $expires;

        return $this;
    }

    /**
     * Gets hasExpiry
     *
     * @return bool
     */
    public function getHasExpiry()
    {
        return $this->container['hasExpiry'];
    }

    /**
     * Sets hasExpiry
     *
     * @param bool $hasExpiry hasExpiry
     *
     * @return self
     */
    public function setHasExpiry($hasExpiry)
    {
        if (is_null($hasExpiry)) {
            throw new \InvalidArgumentException('non-nullable hasExpiry cannot be null');
        }
        $this->container['hasExpiry'] = $hasExpiry;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets password
     *
     * @return string
     */
    public function getPassword()
    {
        return $this->container['password'];
    }

    /**
     * Sets password
     *
     * @param string $password Login key password.
     *
     * @return self
     */
    public function setPassword($password)
    {
        if (is_null($password)) {
            throw new \InvalidArgumentException('non-nullable password cannot be null');
        }
        if ((mb_strlen($password) > 256)) {
            throw new \InvalidArgumentException('invalid length for $password when calling WebLoginKeyCreateRequest., must be smaller than or equal to 256.');
        }
        if ((mb_strlen($password) < 3)) {
            throw new \InvalidArgumentException('invalid length for $password when calling WebLoginKeyCreateRequest., must be bigger than or equal to 3.');
        }

        $this->container['password'] = $password;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


