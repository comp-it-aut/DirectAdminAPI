<?php
/**
 * WebSystemInfoFS
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  COMPITAUT\DirectAdminAPI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Swagger DirectAdmin API
 *
 * Swagger API for DirectAdmin server
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@directadmin.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace COMPITAUT\DirectAdminAPI\Model;

use \ArrayAccess;
use \COMPITAUT\DirectAdminAPI\ObjectSerializer;

/**
 * WebSystemInfoFS Class Doc Comment
 *
 * @category Class
 * @package  COMPITAUT\DirectAdminAPI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class WebSystemInfoFS implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'web.systemInfoFS';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'availableBytes' => 'int',
        'device' => 'string',
        'fileSystem' => 'string',
        'mountPoint' => 'string',
        'reservedBytes' => 'int',
        'totalBytes' => 'int',
        'usedBytes' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'availableBytes' => null,
        'device' => null,
        'fileSystem' => null,
        'mountPoint' => null,
        'reservedBytes' => null,
        'totalBytes' => null,
        'usedBytes' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'availableBytes' => false,
        'device' => false,
        'fileSystem' => false,
        'mountPoint' => false,
        'reservedBytes' => false,
        'totalBytes' => false,
        'usedBytes' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'availableBytes' => 'availableBytes',
        'device' => 'device',
        'fileSystem' => 'fileSystem',
        'mountPoint' => 'mountPoint',
        'reservedBytes' => 'reservedBytes',
        'totalBytes' => 'totalBytes',
        'usedBytes' => 'usedBytes'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'availableBytes' => 'setAvailableBytes',
        'device' => 'setDevice',
        'fileSystem' => 'setFileSystem',
        'mountPoint' => 'setMountPoint',
        'reservedBytes' => 'setReservedBytes',
        'totalBytes' => 'setTotalBytes',
        'usedBytes' => 'setUsedBytes'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'availableBytes' => 'getAvailableBytes',
        'device' => 'getDevice',
        'fileSystem' => 'getFileSystem',
        'mountPoint' => 'getMountPoint',
        'reservedBytes' => 'getReservedBytes',
        'totalBytes' => 'getTotalBytes',
        'usedBytes' => 'getUsedBytes'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('availableBytes', $data ?? [], null);
        $this->setIfExists('device', $data ?? [], null);
        $this->setIfExists('fileSystem', $data ?? [], null);
        $this->setIfExists('mountPoint', $data ?? [], null);
        $this->setIfExists('reservedBytes', $data ?? [], null);
        $this->setIfExists('totalBytes', $data ?? [], null);
        $this->setIfExists('usedBytes', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['availableBytes'] === null) {
            $invalidProperties[] = "'availableBytes' can't be null";
        }
        if ($this->container['device'] === null) {
            $invalidProperties[] = "'device' can't be null";
        }
        if ($this->container['fileSystem'] === null) {
            $invalidProperties[] = "'fileSystem' can't be null";
        }
        if ($this->container['mountPoint'] === null) {
            $invalidProperties[] = "'mountPoint' can't be null";
        }
        if ($this->container['reservedBytes'] === null) {
            $invalidProperties[] = "'reservedBytes' can't be null";
        }
        if ($this->container['totalBytes'] === null) {
            $invalidProperties[] = "'totalBytes' can't be null";
        }
        if ($this->container['usedBytes'] === null) {
            $invalidProperties[] = "'usedBytes' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets availableBytes
     *
     * @return int
     */
    public function getAvailableBytes()
    {
        return $this->container['availableBytes'];
    }

    /**
     * Sets availableBytes
     *
     * @param int $availableBytes Available bytes for unprivileged users.
     *
     * @return self
     */
    public function setAvailableBytes($availableBytes)
    {
        if (is_null($availableBytes)) {
            throw new \InvalidArgumentException('non-nullable availableBytes cannot be null');
        }
        $this->container['availableBytes'] = $availableBytes;

        return $this;
    }

    /**
     * Gets device
     *
     * @return string
     */
    public function getDevice()
    {
        return $this->container['device'];
    }

    /**
     * Sets device
     *
     * @param string $device device
     *
     * @return self
     */
    public function setDevice($device)
    {
        if (is_null($device)) {
            throw new \InvalidArgumentException('non-nullable device cannot be null');
        }
        $this->container['device'] = $device;

        return $this;
    }

    /**
     * Gets fileSystem
     *
     * @return string
     */
    public function getFileSystem()
    {
        return $this->container['fileSystem'];
    }

    /**
     * Sets fileSystem
     *
     * @param string $fileSystem fileSystem
     *
     * @return self
     */
    public function setFileSystem($fileSystem)
    {
        if (is_null($fileSystem)) {
            throw new \InvalidArgumentException('non-nullable fileSystem cannot be null');
        }
        $this->container['fileSystem'] = $fileSystem;

        return $this;
    }

    /**
     * Gets mountPoint
     *
     * @return string
     */
    public function getMountPoint()
    {
        return $this->container['mountPoint'];
    }

    /**
     * Sets mountPoint
     *
     * @param string $mountPoint mountPoint
     *
     * @return self
     */
    public function setMountPoint($mountPoint)
    {
        if (is_null($mountPoint)) {
            throw new \InvalidArgumentException('non-nullable mountPoint cannot be null');
        }
        $this->container['mountPoint'] = $mountPoint;

        return $this;
    }

    /**
     * Gets reservedBytes
     *
     * @return int
     */
    public function getReservedBytes()
    {
        return $this->container['reservedBytes'];
    }

    /**
     * Sets reservedBytes
     *
     * @param int $reservedBytes Reserved bytes for privileged users.
     *
     * @return self
     */
    public function setReservedBytes($reservedBytes)
    {
        if (is_null($reservedBytes)) {
            throw new \InvalidArgumentException('non-nullable reservedBytes cannot be null');
        }
        $this->container['reservedBytes'] = $reservedBytes;

        return $this;
    }

    /**
     * Gets totalBytes
     *
     * @return int
     */
    public function getTotalBytes()
    {
        return $this->container['totalBytes'];
    }

    /**
     * Sets totalBytes
     *
     * @param int $totalBytes Total bytes in file system.
     *
     * @return self
     */
    public function setTotalBytes($totalBytes)
    {
        if (is_null($totalBytes)) {
            throw new \InvalidArgumentException('non-nullable totalBytes cannot be null');
        }
        $this->container['totalBytes'] = $totalBytes;

        return $this;
    }

    /**
     * Gets usedBytes
     *
     * @return int
     */
    public function getUsedBytes()
    {
        return $this->container['usedBytes'];
    }

    /**
     * Sets usedBytes
     *
     * @param int $usedBytes Used bytes in file system.
     *
     * @return self
     */
    public function setUsedBytes($usedBytes)
    {
        if (is_null($usedBytes)) {
            throw new \InvalidArgumentException('non-nullable usedBytes cannot be null');
        }
        $this->container['usedBytes'] = $usedBytes;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


