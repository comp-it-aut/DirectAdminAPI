<?php
/**
 * WebUserConfig
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  COMPITAUT\DirectAdminAPI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Swagger DirectAdmin API
 *
 * Swagger API for DirectAdmin server
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@directadmin.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace COMPITAUT\DirectAdminAPI\Model;

use \ArrayAccess;
use \COMPITAUT\DirectAdminAPI\ObjectSerializer;

/**
 * WebUserConfig Class Doc Comment
 *
 * @category Class
 * @package  COMPITAUT\DirectAdminAPI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class WebUserConfig implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'web.userConfig';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'account' => 'bool',
        'aftp' => 'bool',
        'apiAllowPassword' => 'bool',
        'autorespondersLim' => 'int',
        'bandwidthLim' => 'float',
        'catchAll' => 'bool',
        'cgi' => 'bool',
        'clamav' => 'bool',
        'cpuQuota' => 'string',
        'creator' => 'string',
        'cron' => 'bool',
        'dateCreated' => 'string',
        'dnsControl' => 'bool',
        'domain' => 'string',
        'domainPointersLim' => 'int',
        'domains' => 'string[]',
        'domainsLim' => 'int',
        'email' => 'string',
        'emailAccountsLim' => 'int',
        'emailForwardersLim' => 'int',
        'featureSets' => 'string[]',
        'ftpAccountsLim' => 'int',
        'git' => 'bool',
        'inodeLim' => 'int',
        'ioReadBandwidthMax' => 'string',
        'ioReadIOPSMax' => 'string',
        'ioWriteBandwidthMax' => 'string',
        'ioWriteIOPSMax' => 'string',
        'ip' => 'string',
        'jail' => 'bool',
        'language' => 'string',
        'letsEncrypt' => 'int',
        'loginKeys' => 'bool',
        'mailPartition' => 'string',
        'mailingListsLim' => 'int',
        'memoryHigh' => 'string',
        'memoryMax' => 'string',
        'mySqlConf' => 'string',
        'mySqlDatabasesLim' => 'int',
        'name' => 'string',
        'nginxUnit' => 'bool',
        'ns1' => 'string',
        'ns2' => 'string',
        'package' => 'string',
        'php' => 'bool',
        'pluginsBlacklist' => 'string[]',
        'pluginsWhitelist' => 'string[]',
        'quotaLim' => 'float',
        'redis' => 'bool',
        'skin' => 'string',
        'spam' => 'bool',
        'ssh' => 'bool',
        'ssl' => 'bool',
        'subdomainsLim' => 'int',
        'suspended' => 'bool',
        'sysInfo' => 'bool',
        'tasksMax' => 'string',
        'twoStepAuth' => 'bool',
        'twoStepAuthDesc' => 'string',
        'userType' => 'string',
        'username' => 'string',
        'users' => 'string[]',
        'usersLim' => 'int',
        'usersManageDomains' => 'int',
        'wordpress' => 'bool',
        'zoom' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'account' => null,
        'aftp' => null,
        'apiAllowPassword' => null,
        'autorespondersLim' => null,
        'bandwidthLim' => null,
        'catchAll' => null,
        'cgi' => null,
        'clamav' => null,
        'cpuQuota' => null,
        'creator' => null,
        'cron' => null,
        'dateCreated' => null,
        'dnsControl' => null,
        'domain' => null,
        'domainPointersLim' => null,
        'domains' => null,
        'domainsLim' => null,
        'email' => null,
        'emailAccountsLim' => null,
        'emailForwardersLim' => null,
        'featureSets' => null,
        'ftpAccountsLim' => null,
        'git' => null,
        'inodeLim' => null,
        'ioReadBandwidthMax' => null,
        'ioReadIOPSMax' => null,
        'ioWriteBandwidthMax' => null,
        'ioWriteIOPSMax' => null,
        'ip' => null,
        'jail' => null,
        'language' => null,
        'letsEncrypt' => null,
        'loginKeys' => null,
        'mailPartition' => null,
        'mailingListsLim' => null,
        'memoryHigh' => null,
        'memoryMax' => null,
        'mySqlConf' => null,
        'mySqlDatabasesLim' => null,
        'name' => null,
        'nginxUnit' => null,
        'ns1' => null,
        'ns2' => null,
        'package' => null,
        'php' => null,
        'pluginsBlacklist' => null,
        'pluginsWhitelist' => null,
        'quotaLim' => null,
        'redis' => null,
        'skin' => null,
        'spam' => null,
        'ssh' => null,
        'ssl' => null,
        'subdomainsLim' => null,
        'suspended' => null,
        'sysInfo' => null,
        'tasksMax' => null,
        'twoStepAuth' => null,
        'twoStepAuthDesc' => null,
        'userType' => null,
        'username' => null,
        'users' => null,
        'usersLim' => null,
        'usersManageDomains' => null,
        'wordpress' => null,
        'zoom' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'account' => false,
        'aftp' => false,
        'apiAllowPassword' => false,
        'autorespondersLim' => false,
        'bandwidthLim' => false,
        'catchAll' => false,
        'cgi' => false,
        'clamav' => false,
        'cpuQuota' => false,
        'creator' => false,
        'cron' => false,
        'dateCreated' => false,
        'dnsControl' => false,
        'domain' => false,
        'domainPointersLim' => false,
        'domains' => false,
        'domainsLim' => false,
        'email' => false,
        'emailAccountsLim' => false,
        'emailForwardersLim' => false,
        'featureSets' => false,
        'ftpAccountsLim' => false,
        'git' => false,
        'inodeLim' => false,
        'ioReadBandwidthMax' => false,
        'ioReadIOPSMax' => false,
        'ioWriteBandwidthMax' => false,
        'ioWriteIOPSMax' => false,
        'ip' => false,
        'jail' => false,
        'language' => false,
        'letsEncrypt' => false,
        'loginKeys' => false,
        'mailPartition' => false,
        'mailingListsLim' => false,
        'memoryHigh' => false,
        'memoryMax' => false,
        'mySqlConf' => false,
        'mySqlDatabasesLim' => false,
        'name' => false,
        'nginxUnit' => false,
        'ns1' => false,
        'ns2' => false,
        'package' => false,
        'php' => false,
        'pluginsBlacklist' => false,
        'pluginsWhitelist' => false,
        'quotaLim' => false,
        'redis' => false,
        'skin' => false,
        'spam' => false,
        'ssh' => false,
        'ssl' => false,
        'subdomainsLim' => false,
        'suspended' => false,
        'sysInfo' => false,
        'tasksMax' => false,
        'twoStepAuth' => false,
        'twoStepAuthDesc' => false,
        'userType' => false,
        'username' => false,
        'users' => false,
        'usersLim' => false,
        'usersManageDomains' => false,
        'wordpress' => false,
        'zoom' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'account' => 'account',
        'aftp' => 'aftp',
        'apiAllowPassword' => 'apiAllowPassword',
        'autorespondersLim' => 'autorespondersLim',
        'bandwidthLim' => 'bandwidthLim',
        'catchAll' => 'catchAll',
        'cgi' => 'cgi',
        'clamav' => 'clamav',
        'cpuQuota' => 'cpuQuota',
        'creator' => 'creator',
        'cron' => 'cron',
        'dateCreated' => 'dateCreated',
        'dnsControl' => 'dnsControl',
        'domain' => 'domain',
        'domainPointersLim' => 'domainPointersLim',
        'domains' => 'domains',
        'domainsLim' => 'domainsLim',
        'email' => 'email',
        'emailAccountsLim' => 'emailAccountsLim',
        'emailForwardersLim' => 'emailForwardersLim',
        'featureSets' => 'featureSets',
        'ftpAccountsLim' => 'ftpAccountsLim',
        'git' => 'git',
        'inodeLim' => 'inodeLim',
        'ioReadBandwidthMax' => 'ioReadBandwidthMax',
        'ioReadIOPSMax' => 'ioReadIOPSMax',
        'ioWriteBandwidthMax' => 'ioWriteBandwidthMax',
        'ioWriteIOPSMax' => 'ioWriteIOPSMax',
        'ip' => 'ip',
        'jail' => 'jail',
        'language' => 'language',
        'letsEncrypt' => 'letsEncrypt',
        'loginKeys' => 'loginKeys',
        'mailPartition' => 'mailPartition',
        'mailingListsLim' => 'mailingListsLim',
        'memoryHigh' => 'memoryHigh',
        'memoryMax' => 'memoryMax',
        'mySqlConf' => 'mySqlConf',
        'mySqlDatabasesLim' => 'mySqlDatabasesLim',
        'name' => 'name',
        'nginxUnit' => 'nginxUnit',
        'ns1' => 'ns1',
        'ns2' => 'ns2',
        'package' => 'package',
        'php' => 'php',
        'pluginsBlacklist' => 'pluginsBlacklist',
        'pluginsWhitelist' => 'pluginsWhitelist',
        'quotaLim' => 'quotaLim',
        'redis' => 'redis',
        'skin' => 'skin',
        'spam' => 'spam',
        'ssh' => 'ssh',
        'ssl' => 'ssl',
        'subdomainsLim' => 'subdomainsLim',
        'suspended' => 'suspended',
        'sysInfo' => 'sysInfo',
        'tasksMax' => 'tasksMax',
        'twoStepAuth' => 'twoStepAuth',
        'twoStepAuthDesc' => 'twoStepAuthDesc',
        'userType' => 'userType',
        'username' => 'username',
        'users' => 'users',
        'usersLim' => 'usersLim',
        'usersManageDomains' => 'usersManageDomains',
        'wordpress' => 'wordpress',
        'zoom' => 'zoom'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'account' => 'setAccount',
        'aftp' => 'setAftp',
        'apiAllowPassword' => 'setApiAllowPassword',
        'autorespondersLim' => 'setAutorespondersLim',
        'bandwidthLim' => 'setBandwidthLim',
        'catchAll' => 'setCatchAll',
        'cgi' => 'setCgi',
        'clamav' => 'setClamav',
        'cpuQuota' => 'setCpuQuota',
        'creator' => 'setCreator',
        'cron' => 'setCron',
        'dateCreated' => 'setDateCreated',
        'dnsControl' => 'setDnsControl',
        'domain' => 'setDomain',
        'domainPointersLim' => 'setDomainPointersLim',
        'domains' => 'setDomains',
        'domainsLim' => 'setDomainsLim',
        'email' => 'setEmail',
        'emailAccountsLim' => 'setEmailAccountsLim',
        'emailForwardersLim' => 'setEmailForwardersLim',
        'featureSets' => 'setFeatureSets',
        'ftpAccountsLim' => 'setFtpAccountsLim',
        'git' => 'setGit',
        'inodeLim' => 'setInodeLim',
        'ioReadBandwidthMax' => 'setIoReadBandwidthMax',
        'ioReadIOPSMax' => 'setIoReadIOPSMax',
        'ioWriteBandwidthMax' => 'setIoWriteBandwidthMax',
        'ioWriteIOPSMax' => 'setIoWriteIOPSMax',
        'ip' => 'setIp',
        'jail' => 'setJail',
        'language' => 'setLanguage',
        'letsEncrypt' => 'setLetsEncrypt',
        'loginKeys' => 'setLoginKeys',
        'mailPartition' => 'setMailPartition',
        'mailingListsLim' => 'setMailingListsLim',
        'memoryHigh' => 'setMemoryHigh',
        'memoryMax' => 'setMemoryMax',
        'mySqlConf' => 'setMySqlConf',
        'mySqlDatabasesLim' => 'setMySqlDatabasesLim',
        'name' => 'setName',
        'nginxUnit' => 'setNginxUnit',
        'ns1' => 'setNs1',
        'ns2' => 'setNs2',
        'package' => 'setPackage',
        'php' => 'setPhp',
        'pluginsBlacklist' => 'setPluginsBlacklist',
        'pluginsWhitelist' => 'setPluginsWhitelist',
        'quotaLim' => 'setQuotaLim',
        'redis' => 'setRedis',
        'skin' => 'setSkin',
        'spam' => 'setSpam',
        'ssh' => 'setSsh',
        'ssl' => 'setSsl',
        'subdomainsLim' => 'setSubdomainsLim',
        'suspended' => 'setSuspended',
        'sysInfo' => 'setSysInfo',
        'tasksMax' => 'setTasksMax',
        'twoStepAuth' => 'setTwoStepAuth',
        'twoStepAuthDesc' => 'setTwoStepAuthDesc',
        'userType' => 'setUserType',
        'username' => 'setUsername',
        'users' => 'setUsers',
        'usersLim' => 'setUsersLim',
        'usersManageDomains' => 'setUsersManageDomains',
        'wordpress' => 'setWordpress',
        'zoom' => 'setZoom'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'account' => 'getAccount',
        'aftp' => 'getAftp',
        'apiAllowPassword' => 'getApiAllowPassword',
        'autorespondersLim' => 'getAutorespondersLim',
        'bandwidthLim' => 'getBandwidthLim',
        'catchAll' => 'getCatchAll',
        'cgi' => 'getCgi',
        'clamav' => 'getClamav',
        'cpuQuota' => 'getCpuQuota',
        'creator' => 'getCreator',
        'cron' => 'getCron',
        'dateCreated' => 'getDateCreated',
        'dnsControl' => 'getDnsControl',
        'domain' => 'getDomain',
        'domainPointersLim' => 'getDomainPointersLim',
        'domains' => 'getDomains',
        'domainsLim' => 'getDomainsLim',
        'email' => 'getEmail',
        'emailAccountsLim' => 'getEmailAccountsLim',
        'emailForwardersLim' => 'getEmailForwardersLim',
        'featureSets' => 'getFeatureSets',
        'ftpAccountsLim' => 'getFtpAccountsLim',
        'git' => 'getGit',
        'inodeLim' => 'getInodeLim',
        'ioReadBandwidthMax' => 'getIoReadBandwidthMax',
        'ioReadIOPSMax' => 'getIoReadIOPSMax',
        'ioWriteBandwidthMax' => 'getIoWriteBandwidthMax',
        'ioWriteIOPSMax' => 'getIoWriteIOPSMax',
        'ip' => 'getIp',
        'jail' => 'getJail',
        'language' => 'getLanguage',
        'letsEncrypt' => 'getLetsEncrypt',
        'loginKeys' => 'getLoginKeys',
        'mailPartition' => 'getMailPartition',
        'mailingListsLim' => 'getMailingListsLim',
        'memoryHigh' => 'getMemoryHigh',
        'memoryMax' => 'getMemoryMax',
        'mySqlConf' => 'getMySqlConf',
        'mySqlDatabasesLim' => 'getMySqlDatabasesLim',
        'name' => 'getName',
        'nginxUnit' => 'getNginxUnit',
        'ns1' => 'getNs1',
        'ns2' => 'getNs2',
        'package' => 'getPackage',
        'php' => 'getPhp',
        'pluginsBlacklist' => 'getPluginsBlacklist',
        'pluginsWhitelist' => 'getPluginsWhitelist',
        'quotaLim' => 'getQuotaLim',
        'redis' => 'getRedis',
        'skin' => 'getSkin',
        'spam' => 'getSpam',
        'ssh' => 'getSsh',
        'ssl' => 'getSsl',
        'subdomainsLim' => 'getSubdomainsLim',
        'suspended' => 'getSuspended',
        'sysInfo' => 'getSysInfo',
        'tasksMax' => 'getTasksMax',
        'twoStepAuth' => 'getTwoStepAuth',
        'twoStepAuthDesc' => 'getTwoStepAuthDesc',
        'userType' => 'getUserType',
        'username' => 'getUsername',
        'users' => 'getUsers',
        'usersLim' => 'getUsersLim',
        'usersManageDomains' => 'getUsersManageDomains',
        'wordpress' => 'getWordpress',
        'zoom' => 'getZoom'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('account', $data ?? [], null);
        $this->setIfExists('aftp', $data ?? [], null);
        $this->setIfExists('apiAllowPassword', $data ?? [], null);
        $this->setIfExists('autorespondersLim', $data ?? [], null);
        $this->setIfExists('bandwidthLim', $data ?? [], null);
        $this->setIfExists('catchAll', $data ?? [], null);
        $this->setIfExists('cgi', $data ?? [], null);
        $this->setIfExists('clamav', $data ?? [], null);
        $this->setIfExists('cpuQuota', $data ?? [], null);
        $this->setIfExists('creator', $data ?? [], null);
        $this->setIfExists('cron', $data ?? [], null);
        $this->setIfExists('dateCreated', $data ?? [], null);
        $this->setIfExists('dnsControl', $data ?? [], null);
        $this->setIfExists('domain', $data ?? [], null);
        $this->setIfExists('domainPointersLim', $data ?? [], null);
        $this->setIfExists('domains', $data ?? [], null);
        $this->setIfExists('domainsLim', $data ?? [], null);
        $this->setIfExists('email', $data ?? [], null);
        $this->setIfExists('emailAccountsLim', $data ?? [], null);
        $this->setIfExists('emailForwardersLim', $data ?? [], null);
        $this->setIfExists('featureSets', $data ?? [], null);
        $this->setIfExists('ftpAccountsLim', $data ?? [], null);
        $this->setIfExists('git', $data ?? [], null);
        $this->setIfExists('inodeLim', $data ?? [], null);
        $this->setIfExists('ioReadBandwidthMax', $data ?? [], null);
        $this->setIfExists('ioReadIOPSMax', $data ?? [], null);
        $this->setIfExists('ioWriteBandwidthMax', $data ?? [], null);
        $this->setIfExists('ioWriteIOPSMax', $data ?? [], null);
        $this->setIfExists('ip', $data ?? [], null);
        $this->setIfExists('jail', $data ?? [], null);
        $this->setIfExists('language', $data ?? [], null);
        $this->setIfExists('letsEncrypt', $data ?? [], null);
        $this->setIfExists('loginKeys', $data ?? [], null);
        $this->setIfExists('mailPartition', $data ?? [], null);
        $this->setIfExists('mailingListsLim', $data ?? [], null);
        $this->setIfExists('memoryHigh', $data ?? [], null);
        $this->setIfExists('memoryMax', $data ?? [], null);
        $this->setIfExists('mySqlConf', $data ?? [], null);
        $this->setIfExists('mySqlDatabasesLim', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('nginxUnit', $data ?? [], null);
        $this->setIfExists('ns1', $data ?? [], null);
        $this->setIfExists('ns2', $data ?? [], null);
        $this->setIfExists('package', $data ?? [], null);
        $this->setIfExists('php', $data ?? [], null);
        $this->setIfExists('pluginsBlacklist', $data ?? [], null);
        $this->setIfExists('pluginsWhitelist', $data ?? [], null);
        $this->setIfExists('quotaLim', $data ?? [], null);
        $this->setIfExists('redis', $data ?? [], null);
        $this->setIfExists('skin', $data ?? [], null);
        $this->setIfExists('spam', $data ?? [], null);
        $this->setIfExists('ssh', $data ?? [], null);
        $this->setIfExists('ssl', $data ?? [], null);
        $this->setIfExists('subdomainsLim', $data ?? [], null);
        $this->setIfExists('suspended', $data ?? [], null);
        $this->setIfExists('sysInfo', $data ?? [], null);
        $this->setIfExists('tasksMax', $data ?? [], null);
        $this->setIfExists('twoStepAuth', $data ?? [], null);
        $this->setIfExists('twoStepAuthDesc', $data ?? [], null);
        $this->setIfExists('userType', $data ?? [], null);
        $this->setIfExists('username', $data ?? [], null);
        $this->setIfExists('users', $data ?? [], null);
        $this->setIfExists('usersLim', $data ?? [], null);
        $this->setIfExists('usersManageDomains', $data ?? [], null);
        $this->setIfExists('wordpress', $data ?? [], null);
        $this->setIfExists('zoom', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['account'] === null) {
            $invalidProperties[] = "'account' can't be null";
        }
        if ($this->container['aftp'] === null) {
            $invalidProperties[] = "'aftp' can't be null";
        }
        if ($this->container['apiAllowPassword'] === null) {
            $invalidProperties[] = "'apiAllowPassword' can't be null";
        }
        if ($this->container['autorespondersLim'] === null) {
            $invalidProperties[] = "'autorespondersLim' can't be null";
        }
        if ($this->container['bandwidthLim'] === null) {
            $invalidProperties[] = "'bandwidthLim' can't be null";
        }
        if ($this->container['catchAll'] === null) {
            $invalidProperties[] = "'catchAll' can't be null";
        }
        if ($this->container['cgi'] === null) {
            $invalidProperties[] = "'cgi' can't be null";
        }
        if ($this->container['clamav'] === null) {
            $invalidProperties[] = "'clamav' can't be null";
        }
        if ($this->container['creator'] === null) {
            $invalidProperties[] = "'creator' can't be null";
        }
        if ($this->container['cron'] === null) {
            $invalidProperties[] = "'cron' can't be null";
        }
        if ($this->container['dateCreated'] === null) {
            $invalidProperties[] = "'dateCreated' can't be null";
        }
        if ($this->container['dnsControl'] === null) {
            $invalidProperties[] = "'dnsControl' can't be null";
        }
        if ($this->container['domain'] === null) {
            $invalidProperties[] = "'domain' can't be null";
        }
        if ($this->container['domainPointersLim'] === null) {
            $invalidProperties[] = "'domainPointersLim' can't be null";
        }
        if ($this->container['domains'] === null) {
            $invalidProperties[] = "'domains' can't be null";
        }
        if ($this->container['domainsLim'] === null) {
            $invalidProperties[] = "'domainsLim' can't be null";
        }
        if ($this->container['email'] === null) {
            $invalidProperties[] = "'email' can't be null";
        }
        if ($this->container['emailAccountsLim'] === null) {
            $invalidProperties[] = "'emailAccountsLim' can't be null";
        }
        if ($this->container['emailForwardersLim'] === null) {
            $invalidProperties[] = "'emailForwardersLim' can't be null";
        }
        if ($this->container['featureSets'] === null) {
            $invalidProperties[] = "'featureSets' can't be null";
        }
        if ($this->container['ftpAccountsLim'] === null) {
            $invalidProperties[] = "'ftpAccountsLim' can't be null";
        }
        if ($this->container['git'] === null) {
            $invalidProperties[] = "'git' can't be null";
        }
        if ($this->container['inodeLim'] === null) {
            $invalidProperties[] = "'inodeLim' can't be null";
        }
        if ($this->container['ip'] === null) {
            $invalidProperties[] = "'ip' can't be null";
        }
        if ($this->container['jail'] === null) {
            $invalidProperties[] = "'jail' can't be null";
        }
        if ($this->container['language'] === null) {
            $invalidProperties[] = "'language' can't be null";
        }
        if ($this->container['letsEncrypt'] === null) {
            $invalidProperties[] = "'letsEncrypt' can't be null";
        }
        if ($this->container['loginKeys'] === null) {
            $invalidProperties[] = "'loginKeys' can't be null";
        }
        if ($this->container['mailPartition'] === null) {
            $invalidProperties[] = "'mailPartition' can't be null";
        }
        if ($this->container['mailingListsLim'] === null) {
            $invalidProperties[] = "'mailingListsLim' can't be null";
        }
        if ($this->container['mySqlConf'] === null) {
            $invalidProperties[] = "'mySqlConf' can't be null";
        }
        if ($this->container['mySqlDatabasesLim'] === null) {
            $invalidProperties[] = "'mySqlDatabasesLim' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['nginxUnit'] === null) {
            $invalidProperties[] = "'nginxUnit' can't be null";
        }
        if ($this->container['ns1'] === null) {
            $invalidProperties[] = "'ns1' can't be null";
        }
        if ($this->container['ns2'] === null) {
            $invalidProperties[] = "'ns2' can't be null";
        }
        if ($this->container['package'] === null) {
            $invalidProperties[] = "'package' can't be null";
        }
        if ($this->container['php'] === null) {
            $invalidProperties[] = "'php' can't be null";
        }
        if ($this->container['pluginsBlacklist'] === null) {
            $invalidProperties[] = "'pluginsBlacklist' can't be null";
        }
        if ($this->container['pluginsWhitelist'] === null) {
            $invalidProperties[] = "'pluginsWhitelist' can't be null";
        }
        if ($this->container['quotaLim'] === null) {
            $invalidProperties[] = "'quotaLim' can't be null";
        }
        if ($this->container['redis'] === null) {
            $invalidProperties[] = "'redis' can't be null";
        }
        if ($this->container['skin'] === null) {
            $invalidProperties[] = "'skin' can't be null";
        }
        if ($this->container['spam'] === null) {
            $invalidProperties[] = "'spam' can't be null";
        }
        if ($this->container['ssh'] === null) {
            $invalidProperties[] = "'ssh' can't be null";
        }
        if ($this->container['ssl'] === null) {
            $invalidProperties[] = "'ssl' can't be null";
        }
        if ($this->container['subdomainsLim'] === null) {
            $invalidProperties[] = "'subdomainsLim' can't be null";
        }
        if ($this->container['suspended'] === null) {
            $invalidProperties[] = "'suspended' can't be null";
        }
        if ($this->container['sysInfo'] === null) {
            $invalidProperties[] = "'sysInfo' can't be null";
        }
        if ($this->container['twoStepAuth'] === null) {
            $invalidProperties[] = "'twoStepAuth' can't be null";
        }
        if ($this->container['twoStepAuthDesc'] === null) {
            $invalidProperties[] = "'twoStepAuthDesc' can't be null";
        }
        if ($this->container['userType'] === null) {
            $invalidProperties[] = "'userType' can't be null";
        }
        if ($this->container['username'] === null) {
            $invalidProperties[] = "'username' can't be null";
        }
        if ($this->container['users'] === null) {
            $invalidProperties[] = "'users' can't be null";
        }
        if ($this->container['usersLim'] === null) {
            $invalidProperties[] = "'usersLim' can't be null";
        }
        if ($this->container['usersManageDomains'] === null) {
            $invalidProperties[] = "'usersManageDomains' can't be null";
        }
        if ($this->container['wordpress'] === null) {
            $invalidProperties[] = "'wordpress' can't be null";
        }
        if ($this->container['zoom'] === null) {
            $invalidProperties[] = "'zoom' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets account
     *
     * @return bool
     */
    public function getAccount()
    {
        return $this->container['account'];
    }

    /**
     * Sets account
     *
     * @param bool $account account
     *
     * @return self
     */
    public function setAccount($account)
    {
        if (is_null($account)) {
            throw new \InvalidArgumentException('non-nullable account cannot be null');
        }
        $this->container['account'] = $account;

        return $this;
    }

    /**
     * Gets aftp
     *
     * @return bool
     */
    public function getAftp()
    {
        return $this->container['aftp'];
    }

    /**
     * Sets aftp
     *
     * @param bool $aftp aftp
     *
     * @return self
     */
    public function setAftp($aftp)
    {
        if (is_null($aftp)) {
            throw new \InvalidArgumentException('non-nullable aftp cannot be null');
        }
        $this->container['aftp'] = $aftp;

        return $this;
    }

    /**
     * Gets apiAllowPassword
     *
     * @return bool
     */
    public function getApiAllowPassword()
    {
        return $this->container['apiAllowPassword'];
    }

    /**
     * Sets apiAllowPassword
     *
     * @param bool $apiAllowPassword apiAllowPassword
     *
     * @return self
     */
    public function setApiAllowPassword($apiAllowPassword)
    {
        if (is_null($apiAllowPassword)) {
            throw new \InvalidArgumentException('non-nullable apiAllowPassword cannot be null');
        }
        $this->container['apiAllowPassword'] = $apiAllowPassword;

        return $this;
    }

    /**
     * Gets autorespondersLim
     *
     * @return int
     */
    public function getAutorespondersLim()
    {
        return $this->container['autorespondersLim'];
    }

    /**
     * Sets autorespondersLim
     *
     * @param int $autorespondersLim autorespondersLim
     *
     * @return self
     */
    public function setAutorespondersLim($autorespondersLim)
    {
        if (is_null($autorespondersLim)) {
            throw new \InvalidArgumentException('non-nullable autorespondersLim cannot be null');
        }
        $this->container['autorespondersLim'] = $autorespondersLim;

        return $this;
    }

    /**
     * Gets bandwidthLim
     *
     * @return float
     */
    public function getBandwidthLim()
    {
        return $this->container['bandwidthLim'];
    }

    /**
     * Sets bandwidthLim
     *
     * @param float $bandwidthLim bandwidthLim
     *
     * @return self
     */
    public function setBandwidthLim($bandwidthLim)
    {
        if (is_null($bandwidthLim)) {
            throw new \InvalidArgumentException('non-nullable bandwidthLim cannot be null');
        }
        $this->container['bandwidthLim'] = $bandwidthLim;

        return $this;
    }

    /**
     * Gets catchAll
     *
     * @return bool
     */
    public function getCatchAll()
    {
        return $this->container['catchAll'];
    }

    /**
     * Sets catchAll
     *
     * @param bool $catchAll catchAll
     *
     * @return self
     */
    public function setCatchAll($catchAll)
    {
        if (is_null($catchAll)) {
            throw new \InvalidArgumentException('non-nullable catchAll cannot be null');
        }
        $this->container['catchAll'] = $catchAll;

        return $this;
    }

    /**
     * Gets cgi
     *
     * @return bool
     */
    public function getCgi()
    {
        return $this->container['cgi'];
    }

    /**
     * Sets cgi
     *
     * @param bool $cgi cgi
     *
     * @return self
     */
    public function setCgi($cgi)
    {
        if (is_null($cgi)) {
            throw new \InvalidArgumentException('non-nullable cgi cannot be null');
        }
        $this->container['cgi'] = $cgi;

        return $this;
    }

    /**
     * Gets clamav
     *
     * @return bool
     */
    public function getClamav()
    {
        return $this->container['clamav'];
    }

    /**
     * Sets clamav
     *
     * @param bool $clamav clamav
     *
     * @return self
     */
    public function setClamav($clamav)
    {
        if (is_null($clamav)) {
            throw new \InvalidArgumentException('non-nullable clamav cannot be null');
        }
        $this->container['clamav'] = $clamav;

        return $this;
    }

    /**
     * Gets cpuQuota
     *
     * @return string|null
     */
    public function getCpuQuota()
    {
        return $this->container['cpuQuota'];
    }

    /**
     * Sets cpuQuota
     *
     * @param string|null $cpuQuota cpuQuota
     *
     * @return self
     */
    public function setCpuQuota($cpuQuota)
    {
        if (is_null($cpuQuota)) {
            throw new \InvalidArgumentException('non-nullable cpuQuota cannot be null');
        }
        $this->container['cpuQuota'] = $cpuQuota;

        return $this;
    }

    /**
     * Gets creator
     *
     * @return string
     */
    public function getCreator()
    {
        return $this->container['creator'];
    }

    /**
     * Sets creator
     *
     * @param string $creator creator
     *
     * @return self
     */
    public function setCreator($creator)
    {
        if (is_null($creator)) {
            throw new \InvalidArgumentException('non-nullable creator cannot be null');
        }
        $this->container['creator'] = $creator;

        return $this;
    }

    /**
     * Gets cron
     *
     * @return bool
     */
    public function getCron()
    {
        return $this->container['cron'];
    }

    /**
     * Sets cron
     *
     * @param bool $cron cron
     *
     * @return self
     */
    public function setCron($cron)
    {
        if (is_null($cron)) {
            throw new \InvalidArgumentException('non-nullable cron cannot be null');
        }
        $this->container['cron'] = $cron;

        return $this;
    }

    /**
     * Gets dateCreated
     *
     * @return string
     */
    public function getDateCreated()
    {
        return $this->container['dateCreated'];
    }

    /**
     * Sets dateCreated
     *
     * @param string $dateCreated FIXME: would be nice to have time.Time
     *
     * @return self
     */
    public function setDateCreated($dateCreated)
    {
        if (is_null($dateCreated)) {
            throw new \InvalidArgumentException('non-nullable dateCreated cannot be null');
        }
        $this->container['dateCreated'] = $dateCreated;

        return $this;
    }

    /**
     * Gets dnsControl
     *
     * @return bool
     */
    public function getDnsControl()
    {
        return $this->container['dnsControl'];
    }

    /**
     * Sets dnsControl
     *
     * @param bool $dnsControl dnsControl
     *
     * @return self
     */
    public function setDnsControl($dnsControl)
    {
        if (is_null($dnsControl)) {
            throw new \InvalidArgumentException('non-nullable dnsControl cannot be null');
        }
        $this->container['dnsControl'] = $dnsControl;

        return $this;
    }

    /**
     * Gets domain
     *
     * @return string
     */
    public function getDomain()
    {
        return $this->container['domain'];
    }

    /**
     * Sets domain
     *
     * @param string $domain domain
     *
     * @return self
     */
    public function setDomain($domain)
    {
        if (is_null($domain)) {
            throw new \InvalidArgumentException('non-nullable domain cannot be null');
        }
        $this->container['domain'] = $domain;

        return $this;
    }

    /**
     * Gets domainPointersLim
     *
     * @return int
     */
    public function getDomainPointersLim()
    {
        return $this->container['domainPointersLim'];
    }

    /**
     * Sets domainPointersLim
     *
     * @param int $domainPointersLim domainPointersLim
     *
     * @return self
     */
    public function setDomainPointersLim($domainPointersLim)
    {
        if (is_null($domainPointersLim)) {
            throw new \InvalidArgumentException('non-nullable domainPointersLim cannot be null');
        }
        $this->container['domainPointersLim'] = $domainPointersLim;

        return $this;
    }

    /**
     * Gets domains
     *
     * @return string[]
     */
    public function getDomains()
    {
        return $this->container['domains'];
    }

    /**
     * Sets domains
     *
     * @param string[] $domains domains
     *
     * @return self
     */
    public function setDomains($domains)
    {
        if (is_null($domains)) {
            throw new \InvalidArgumentException('non-nullable domains cannot be null');
        }
        $this->container['domains'] = $domains;

        return $this;
    }

    /**
     * Gets domainsLim
     *
     * @return int
     */
    public function getDomainsLim()
    {
        return $this->container['domainsLim'];
    }

    /**
     * Sets domainsLim
     *
     * @param int $domainsLim domainsLim
     *
     * @return self
     */
    public function setDomainsLim($domainsLim)
    {
        if (is_null($domainsLim)) {
            throw new \InvalidArgumentException('non-nullable domainsLim cannot be null');
        }
        $this->container['domainsLim'] = $domainsLim;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string $email email
     *
     * @return self
     */
    public function setEmail($email)
    {
        if (is_null($email)) {
            throw new \InvalidArgumentException('non-nullable email cannot be null');
        }
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets emailAccountsLim
     *
     * @return int
     */
    public function getEmailAccountsLim()
    {
        return $this->container['emailAccountsLim'];
    }

    /**
     * Sets emailAccountsLim
     *
     * @param int $emailAccountsLim POP Email Accounts
     *
     * @return self
     */
    public function setEmailAccountsLim($emailAccountsLim)
    {
        if (is_null($emailAccountsLim)) {
            throw new \InvalidArgumentException('non-nullable emailAccountsLim cannot be null');
        }
        $this->container['emailAccountsLim'] = $emailAccountsLim;

        return $this;
    }

    /**
     * Gets emailForwardersLim
     *
     * @return int
     */
    public function getEmailForwardersLim()
    {
        return $this->container['emailForwardersLim'];
    }

    /**
     * Sets emailForwardersLim
     *
     * @param int $emailForwardersLim emailForwardersLim
     *
     * @return self
     */
    public function setEmailForwardersLim($emailForwardersLim)
    {
        if (is_null($emailForwardersLim)) {
            throw new \InvalidArgumentException('non-nullable emailForwardersLim cannot be null');
        }
        $this->container['emailForwardersLim'] = $emailForwardersLim;

        return $this;
    }

    /**
     * Gets featureSets
     *
     * @return string[]
     */
    public function getFeatureSets()
    {
        return $this->container['featureSets'];
    }

    /**
     * Sets featureSets
     *
     * @param string[] $featureSets featureSets
     *
     * @return self
     */
    public function setFeatureSets($featureSets)
    {
        if (is_null($featureSets)) {
            throw new \InvalidArgumentException('non-nullable featureSets cannot be null');
        }
        $this->container['featureSets'] = $featureSets;

        return $this;
    }

    /**
     * Gets ftpAccountsLim
     *
     * @return int
     */
    public function getFtpAccountsLim()
    {
        return $this->container['ftpAccountsLim'];
    }

    /**
     * Sets ftpAccountsLim
     *
     * @param int $ftpAccountsLim ftpAccountsLim
     *
     * @return self
     */
    public function setFtpAccountsLim($ftpAccountsLim)
    {
        if (is_null($ftpAccountsLim)) {
            throw new \InvalidArgumentException('non-nullable ftpAccountsLim cannot be null');
        }
        $this->container['ftpAccountsLim'] = $ftpAccountsLim;

        return $this;
    }

    /**
     * Gets git
     *
     * @return bool
     */
    public function getGit()
    {
        return $this->container['git'];
    }

    /**
     * Sets git
     *
     * @param bool $git git
     *
     * @return self
     */
    public function setGit($git)
    {
        if (is_null($git)) {
            throw new \InvalidArgumentException('non-nullable git cannot be null');
        }
        $this->container['git'] = $git;

        return $this;
    }

    /**
     * Gets inodeLim
     *
     * @return int
     */
    public function getInodeLim()
    {
        return $this->container['inodeLim'];
    }

    /**
     * Sets inodeLim
     *
     * @param int $inodeLim inodeLim
     *
     * @return self
     */
    public function setInodeLim($inodeLim)
    {
        if (is_null($inodeLim)) {
            throw new \InvalidArgumentException('non-nullable inodeLim cannot be null');
        }
        $this->container['inodeLim'] = $inodeLim;

        return $this;
    }

    /**
     * Gets ioReadBandwidthMax
     *
     * @return string|null
     */
    public function getIoReadBandwidthMax()
    {
        return $this->container['ioReadBandwidthMax'];
    }

    /**
     * Sets ioReadBandwidthMax
     *
     * @param string|null $ioReadBandwidthMax ioReadBandwidthMax
     *
     * @return self
     */
    public function setIoReadBandwidthMax($ioReadBandwidthMax)
    {
        if (is_null($ioReadBandwidthMax)) {
            throw new \InvalidArgumentException('non-nullable ioReadBandwidthMax cannot be null');
        }
        $this->container['ioReadBandwidthMax'] = $ioReadBandwidthMax;

        return $this;
    }

    /**
     * Gets ioReadIOPSMax
     *
     * @return string|null
     */
    public function getIoReadIOPSMax()
    {
        return $this->container['ioReadIOPSMax'];
    }

    /**
     * Sets ioReadIOPSMax
     *
     * @param string|null $ioReadIOPSMax ioReadIOPSMax
     *
     * @return self
     */
    public function setIoReadIOPSMax($ioReadIOPSMax)
    {
        if (is_null($ioReadIOPSMax)) {
            throw new \InvalidArgumentException('non-nullable ioReadIOPSMax cannot be null');
        }
        $this->container['ioReadIOPSMax'] = $ioReadIOPSMax;

        return $this;
    }

    /**
     * Gets ioWriteBandwidthMax
     *
     * @return string|null
     */
    public function getIoWriteBandwidthMax()
    {
        return $this->container['ioWriteBandwidthMax'];
    }

    /**
     * Sets ioWriteBandwidthMax
     *
     * @param string|null $ioWriteBandwidthMax ioWriteBandwidthMax
     *
     * @return self
     */
    public function setIoWriteBandwidthMax($ioWriteBandwidthMax)
    {
        if (is_null($ioWriteBandwidthMax)) {
            throw new \InvalidArgumentException('non-nullable ioWriteBandwidthMax cannot be null');
        }
        $this->container['ioWriteBandwidthMax'] = $ioWriteBandwidthMax;

        return $this;
    }

    /**
     * Gets ioWriteIOPSMax
     *
     * @return string|null
     */
    public function getIoWriteIOPSMax()
    {
        return $this->container['ioWriteIOPSMax'];
    }

    /**
     * Sets ioWriteIOPSMax
     *
     * @param string|null $ioWriteIOPSMax ioWriteIOPSMax
     *
     * @return self
     */
    public function setIoWriteIOPSMax($ioWriteIOPSMax)
    {
        if (is_null($ioWriteIOPSMax)) {
            throw new \InvalidArgumentException('non-nullable ioWriteIOPSMax cannot be null');
        }
        $this->container['ioWriteIOPSMax'] = $ioWriteIOPSMax;

        return $this;
    }

    /**
     * Gets ip
     *
     * @return string
     */
    public function getIp()
    {
        return $this->container['ip'];
    }

    /**
     * Sets ip
     *
     * @param string $ip ip
     *
     * @return self
     */
    public function setIp($ip)
    {
        if (is_null($ip)) {
            throw new \InvalidArgumentException('non-nullable ip cannot be null');
        }
        $this->container['ip'] = $ip;

        return $this;
    }

    /**
     * Gets jail
     *
     * @return bool
     */
    public function getJail()
    {
        return $this->container['jail'];
    }

    /**
     * Sets jail
     *
     * @param bool $jail jail
     *
     * @return self
     */
    public function setJail($jail)
    {
        if (is_null($jail)) {
            throw new \InvalidArgumentException('non-nullable jail cannot be null');
        }
        $this->container['jail'] = $jail;

        return $this;
    }

    /**
     * Gets language
     *
     * @return string
     */
    public function getLanguage()
    {
        return $this->container['language'];
    }

    /**
     * Sets language
     *
     * @param string $language language
     *
     * @return self
     */
    public function setLanguage($language)
    {
        if (is_null($language)) {
            throw new \InvalidArgumentException('non-nullable language cannot be null');
        }
        $this->container['language'] = $language;

        return $this;
    }

    /**
     * Gets letsEncrypt
     *
     * @return int
     */
    public function getLetsEncrypt()
    {
        return $this->container['letsEncrypt'];
    }

    /**
     * Sets letsEncrypt
     *
     * @param int $letsEncrypt letsEncrypt
     *
     * @return self
     */
    public function setLetsEncrypt($letsEncrypt)
    {
        if (is_null($letsEncrypt)) {
            throw new \InvalidArgumentException('non-nullable letsEncrypt cannot be null');
        }
        $this->container['letsEncrypt'] = $letsEncrypt;

        return $this;
    }

    /**
     * Gets loginKeys
     *
     * @return bool
     */
    public function getLoginKeys()
    {
        return $this->container['loginKeys'];
    }

    /**
     * Sets loginKeys
     *
     * @param bool $loginKeys loginKeys
     *
     * @return self
     */
    public function setLoginKeys($loginKeys)
    {
        if (is_null($loginKeys)) {
            throw new \InvalidArgumentException('non-nullable loginKeys cannot be null');
        }
        $this->container['loginKeys'] = $loginKeys;

        return $this;
    }

    /**
     * Gets mailPartition
     *
     * @return string
     */
    public function getMailPartition()
    {
        return $this->container['mailPartition'];
    }

    /**
     * Sets mailPartition
     *
     * @param string $mailPartition mailPartition
     *
     * @return self
     */
    public function setMailPartition($mailPartition)
    {
        if (is_null($mailPartition)) {
            throw new \InvalidArgumentException('non-nullable mailPartition cannot be null');
        }
        $this->container['mailPartition'] = $mailPartition;

        return $this;
    }

    /**
     * Gets mailingListsLim
     *
     * @return int
     */
    public function getMailingListsLim()
    {
        return $this->container['mailingListsLim'];
    }

    /**
     * Sets mailingListsLim
     *
     * @param int $mailingListsLim mailingListsLim
     *
     * @return self
     */
    public function setMailingListsLim($mailingListsLim)
    {
        if (is_null($mailingListsLim)) {
            throw new \InvalidArgumentException('non-nullable mailingListsLim cannot be null');
        }
        $this->container['mailingListsLim'] = $mailingListsLim;

        return $this;
    }

    /**
     * Gets memoryHigh
     *
     * @return string|null
     */
    public function getMemoryHigh()
    {
        return $this->container['memoryHigh'];
    }

    /**
     * Sets memoryHigh
     *
     * @param string|null $memoryHigh memoryHigh
     *
     * @return self
     */
    public function setMemoryHigh($memoryHigh)
    {
        if (is_null($memoryHigh)) {
            throw new \InvalidArgumentException('non-nullable memoryHigh cannot be null');
        }
        $this->container['memoryHigh'] = $memoryHigh;

        return $this;
    }

    /**
     * Gets memoryMax
     *
     * @return string|null
     */
    public function getMemoryMax()
    {
        return $this->container['memoryMax'];
    }

    /**
     * Sets memoryMax
     *
     * @param string|null $memoryMax memoryMax
     *
     * @return self
     */
    public function setMemoryMax($memoryMax)
    {
        if (is_null($memoryMax)) {
            throw new \InvalidArgumentException('non-nullable memoryMax cannot be null');
        }
        $this->container['memoryMax'] = $memoryMax;

        return $this;
    }

    /**
     * Gets mySqlConf
     *
     * @return string
     */
    public function getMySqlConf()
    {
        return $this->container['mySqlConf'];
    }

    /**
     * Sets mySqlConf
     *
     * @param string $mySqlConf mySqlConf
     *
     * @return self
     */
    public function setMySqlConf($mySqlConf)
    {
        if (is_null($mySqlConf)) {
            throw new \InvalidArgumentException('non-nullable mySqlConf cannot be null');
        }
        $this->container['mySqlConf'] = $mySqlConf;

        return $this;
    }

    /**
     * Gets mySqlDatabasesLim
     *
     * @return int
     */
    public function getMySqlDatabasesLim()
    {
        return $this->container['mySqlDatabasesLim'];
    }

    /**
     * Sets mySqlDatabasesLim
     *
     * @param int $mySqlDatabasesLim mySqlDatabasesLim
     *
     * @return self
     */
    public function setMySqlDatabasesLim($mySqlDatabasesLim)
    {
        if (is_null($mySqlDatabasesLim)) {
            throw new \InvalidArgumentException('non-nullable mySqlDatabasesLim cannot be null');
        }
        $this->container['mySqlDatabasesLim'] = $mySqlDatabasesLim;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets nginxUnit
     *
     * @return bool
     */
    public function getNginxUnit()
    {
        return $this->container['nginxUnit'];
    }

    /**
     * Sets nginxUnit
     *
     * @param bool $nginxUnit nginxUnit
     *
     * @return self
     */
    public function setNginxUnit($nginxUnit)
    {
        if (is_null($nginxUnit)) {
            throw new \InvalidArgumentException('non-nullable nginxUnit cannot be null');
        }
        $this->container['nginxUnit'] = $nginxUnit;

        return $this;
    }

    /**
     * Gets ns1
     *
     * @return string
     */
    public function getNs1()
    {
        return $this->container['ns1'];
    }

    /**
     * Sets ns1
     *
     * @param string $ns1 ns1
     *
     * @return self
     */
    public function setNs1($ns1)
    {
        if (is_null($ns1)) {
            throw new \InvalidArgumentException('non-nullable ns1 cannot be null');
        }
        $this->container['ns1'] = $ns1;

        return $this;
    }

    /**
     * Gets ns2
     *
     * @return string
     */
    public function getNs2()
    {
        return $this->container['ns2'];
    }

    /**
     * Sets ns2
     *
     * @param string $ns2 ns2
     *
     * @return self
     */
    public function setNs2($ns2)
    {
        if (is_null($ns2)) {
            throw new \InvalidArgumentException('non-nullable ns2 cannot be null');
        }
        $this->container['ns2'] = $ns2;

        return $this;
    }

    /**
     * Gets package
     *
     * @return string
     */
    public function getPackage()
    {
        return $this->container['package'];
    }

    /**
     * Sets package
     *
     * @param string $package package
     *
     * @return self
     */
    public function setPackage($package)
    {
        if (is_null($package)) {
            throw new \InvalidArgumentException('non-nullable package cannot be null');
        }
        $this->container['package'] = $package;

        return $this;
    }

    /**
     * Gets php
     *
     * @return bool
     */
    public function getPhp()
    {
        return $this->container['php'];
    }

    /**
     * Sets php
     *
     * @param bool $php php
     *
     * @return self
     */
    public function setPhp($php)
    {
        if (is_null($php)) {
            throw new \InvalidArgumentException('non-nullable php cannot be null');
        }
        $this->container['php'] = $php;

        return $this;
    }

    /**
     * Gets pluginsBlacklist
     *
     * @return string[]
     */
    public function getPluginsBlacklist()
    {
        return $this->container['pluginsBlacklist'];
    }

    /**
     * Sets pluginsBlacklist
     *
     * @param string[] $pluginsBlacklist pluginsBlacklist
     *
     * @return self
     */
    public function setPluginsBlacklist($pluginsBlacklist)
    {
        if (is_null($pluginsBlacklist)) {
            throw new \InvalidArgumentException('non-nullable pluginsBlacklist cannot be null');
        }
        $this->container['pluginsBlacklist'] = $pluginsBlacklist;

        return $this;
    }

    /**
     * Gets pluginsWhitelist
     *
     * @return string[]
     */
    public function getPluginsWhitelist()
    {
        return $this->container['pluginsWhitelist'];
    }

    /**
     * Sets pluginsWhitelist
     *
     * @param string[] $pluginsWhitelist pluginsWhitelist
     *
     * @return self
     */
    public function setPluginsWhitelist($pluginsWhitelist)
    {
        if (is_null($pluginsWhitelist)) {
            throw new \InvalidArgumentException('non-nullable pluginsWhitelist cannot be null');
        }
        $this->container['pluginsWhitelist'] = $pluginsWhitelist;

        return $this;
    }

    /**
     * Gets quotaLim
     *
     * @return float
     */
    public function getQuotaLim()
    {
        return $this->container['quotaLim'];
    }

    /**
     * Sets quotaLim
     *
     * @param float $quotaLim quotaLim
     *
     * @return self
     */
    public function setQuotaLim($quotaLim)
    {
        if (is_null($quotaLim)) {
            throw new \InvalidArgumentException('non-nullable quotaLim cannot be null');
        }
        $this->container['quotaLim'] = $quotaLim;

        return $this;
    }

    /**
     * Gets redis
     *
     * @return bool
     */
    public function getRedis()
    {
        return $this->container['redis'];
    }

    /**
     * Sets redis
     *
     * @param bool $redis redis
     *
     * @return self
     */
    public function setRedis($redis)
    {
        if (is_null($redis)) {
            throw new \InvalidArgumentException('non-nullable redis cannot be null');
        }
        $this->container['redis'] = $redis;

        return $this;
    }

    /**
     * Gets skin
     *
     * @return string
     */
    public function getSkin()
    {
        return $this->container['skin'];
    }

    /**
     * Sets skin
     *
     * @param string $skin skin
     *
     * @return self
     */
    public function setSkin($skin)
    {
        if (is_null($skin)) {
            throw new \InvalidArgumentException('non-nullable skin cannot be null');
        }
        $this->container['skin'] = $skin;

        return $this;
    }

    /**
     * Gets spam
     *
     * @return bool
     */
    public function getSpam()
    {
        return $this->container['spam'];
    }

    /**
     * Sets spam
     *
     * @param bool $spam spam
     *
     * @return self
     */
    public function setSpam($spam)
    {
        if (is_null($spam)) {
            throw new \InvalidArgumentException('non-nullable spam cannot be null');
        }
        $this->container['spam'] = $spam;

        return $this;
    }

    /**
     * Gets ssh
     *
     * @return bool
     */
    public function getSsh()
    {
        return $this->container['ssh'];
    }

    /**
     * Sets ssh
     *
     * @param bool $ssh ssh
     *
     * @return self
     */
    public function setSsh($ssh)
    {
        if (is_null($ssh)) {
            throw new \InvalidArgumentException('non-nullable ssh cannot be null');
        }
        $this->container['ssh'] = $ssh;

        return $this;
    }

    /**
     * Gets ssl
     *
     * @return bool
     */
    public function getSsl()
    {
        return $this->container['ssl'];
    }

    /**
     * Sets ssl
     *
     * @param bool $ssl ssl
     *
     * @return self
     */
    public function setSsl($ssl)
    {
        if (is_null($ssl)) {
            throw new \InvalidArgumentException('non-nullable ssl cannot be null');
        }
        $this->container['ssl'] = $ssl;

        return $this;
    }

    /**
     * Gets subdomainsLim
     *
     * @return int
     */
    public function getSubdomainsLim()
    {
        return $this->container['subdomainsLim'];
    }

    /**
     * Sets subdomainsLim
     *
     * @param int $subdomainsLim subdomainsLim
     *
     * @return self
     */
    public function setSubdomainsLim($subdomainsLim)
    {
        if (is_null($subdomainsLim)) {
            throw new \InvalidArgumentException('non-nullable subdomainsLim cannot be null');
        }
        $this->container['subdomainsLim'] = $subdomainsLim;

        return $this;
    }

    /**
     * Gets suspended
     *
     * @return bool
     */
    public function getSuspended()
    {
        return $this->container['suspended'];
    }

    /**
     * Sets suspended
     *
     * @param bool $suspended suspended
     *
     * @return self
     */
    public function setSuspended($suspended)
    {
        if (is_null($suspended)) {
            throw new \InvalidArgumentException('non-nullable suspended cannot be null');
        }
        $this->container['suspended'] = $suspended;

        return $this;
    }

    /**
     * Gets sysInfo
     *
     * @return bool
     */
    public function getSysInfo()
    {
        return $this->container['sysInfo'];
    }

    /**
     * Sets sysInfo
     *
     * @param bool $sysInfo sysInfo
     *
     * @return self
     */
    public function setSysInfo($sysInfo)
    {
        if (is_null($sysInfo)) {
            throw new \InvalidArgumentException('non-nullable sysInfo cannot be null');
        }
        $this->container['sysInfo'] = $sysInfo;

        return $this;
    }

    /**
     * Gets tasksMax
     *
     * @return string|null
     */
    public function getTasksMax()
    {
        return $this->container['tasksMax'];
    }

    /**
     * Sets tasksMax
     *
     * @param string|null $tasksMax tasksMax
     *
     * @return self
     */
    public function setTasksMax($tasksMax)
    {
        if (is_null($tasksMax)) {
            throw new \InvalidArgumentException('non-nullable tasksMax cannot be null');
        }
        $this->container['tasksMax'] = $tasksMax;

        return $this;
    }

    /**
     * Gets twoStepAuth
     *
     * @return bool
     */
    public function getTwoStepAuth()
    {
        return $this->container['twoStepAuth'];
    }

    /**
     * Sets twoStepAuth
     *
     * @param bool $twoStepAuth twoStepAuth
     *
     * @return self
     */
    public function setTwoStepAuth($twoStepAuth)
    {
        if (is_null($twoStepAuth)) {
            throw new \InvalidArgumentException('non-nullable twoStepAuth cannot be null');
        }
        $this->container['twoStepAuth'] = $twoStepAuth;

        return $this;
    }

    /**
     * Gets twoStepAuthDesc
     *
     * @return string
     */
    public function getTwoStepAuthDesc()
    {
        return $this->container['twoStepAuthDesc'];
    }

    /**
     * Sets twoStepAuthDesc
     *
     * @param string $twoStepAuthDesc twoStepAuthDesc
     *
     * @return self
     */
    public function setTwoStepAuthDesc($twoStepAuthDesc)
    {
        if (is_null($twoStepAuthDesc)) {
            throw new \InvalidArgumentException('non-nullable twoStepAuthDesc cannot be null');
        }
        $this->container['twoStepAuthDesc'] = $twoStepAuthDesc;

        return $this;
    }

    /**
     * Gets userType
     *
     * @return string
     */
    public function getUserType()
    {
        return $this->container['userType'];
    }

    /**
     * Sets userType
     *
     * @param string $userType Minimum role required to access the command
     *
     * @return self
     */
    public function setUserType($userType)
    {
        if (is_null($userType)) {
            throw new \InvalidArgumentException('non-nullable userType cannot be null');
        }
        $this->container['userType'] = $userType;

        return $this;
    }

    /**
     * Gets username
     *
     * @return string
     */
    public function getUsername()
    {
        return $this->container['username'];
    }

    /**
     * Sets username
     *
     * @param string $username username
     *
     * @return self
     */
    public function setUsername($username)
    {
        if (is_null($username)) {
            throw new \InvalidArgumentException('non-nullable username cannot be null');
        }
        $this->container['username'] = $username;

        return $this;
    }

    /**
     * Gets users
     *
     * @return string[]
     */
    public function getUsers()
    {
        return $this->container['users'];
    }

    /**
     * Sets users
     *
     * @param string[] $users users
     *
     * @return self
     */
    public function setUsers($users)
    {
        if (is_null($users)) {
            throw new \InvalidArgumentException('non-nullable users cannot be null');
        }
        $this->container['users'] = $users;

        return $this;
    }

    /**
     * Gets usersLim
     *
     * @return int
     */
    public function getUsersLim()
    {
        return $this->container['usersLim'];
    }

    /**
     * Sets usersLim
     *
     * @param int $usersLim usersLim
     *
     * @return self
     */
    public function setUsersLim($usersLim)
    {
        if (is_null($usersLim)) {
            throw new \InvalidArgumentException('non-nullable usersLim cannot be null');
        }
        $this->container['usersLim'] = $usersLim;

        return $this;
    }

    /**
     * Gets usersManageDomains
     *
     * @return int
     */
    public function getUsersManageDomains()
    {
        return $this->container['usersManageDomains'];
    }

    /**
     * Sets usersManageDomains
     *
     * @param int $usersManageDomains usersManageDomains
     *
     * @return self
     */
    public function setUsersManageDomains($usersManageDomains)
    {
        if (is_null($usersManageDomains)) {
            throw new \InvalidArgumentException('non-nullable usersManageDomains cannot be null');
        }
        $this->container['usersManageDomains'] = $usersManageDomains;

        return $this;
    }

    /**
     * Gets wordpress
     *
     * @return bool
     */
    public function getWordpress()
    {
        return $this->container['wordpress'];
    }

    /**
     * Sets wordpress
     *
     * @param bool $wordpress wordpress
     *
     * @return self
     */
    public function setWordpress($wordpress)
    {
        if (is_null($wordpress)) {
            throw new \InvalidArgumentException('non-nullable wordpress cannot be null');
        }
        $this->container['wordpress'] = $wordpress;

        return $this;
    }

    /**
     * Gets zoom
     *
     * @return int
     */
    public function getZoom()
    {
        return $this->container['zoom'];
    }

    /**
     * Sets zoom
     *
     * @param int $zoom zoom
     *
     * @return self
     */
    public function setZoom($zoom)
    {
        if (is_null($zoom)) {
            throw new \InvalidArgumentException('non-nullable zoom cannot be null');
        }
        $this->container['zoom'] = $zoom;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


