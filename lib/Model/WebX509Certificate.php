<?php
/**
 * WebX509Certificate
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  COMPITAUT\DirectAdminAPI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Swagger DirectAdmin API
 *
 * Swagger API for DirectAdmin server
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@directadmin.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace COMPITAUT\DirectAdminAPI\Model;

use \ArrayAccess;
use \COMPITAUT\DirectAdminAPI\ObjectSerializer;

/**
 * WebX509Certificate Class Doc Comment
 *
 * @category Class
 * @package  COMPITAUT\DirectAdminAPI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class WebX509Certificate implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'web.x509Certificate';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'dnsNames' => 'string[]',
        'ipAddresses' => 'string[]',
        'issuer' => 'string',
        'notAfter' => 'string',
        'notBefore' => 'string',
        'prettyType' => 'string',
        'serialNumber' => 'string',
        'subject' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'dnsNames' => null,
        'ipAddresses' => null,
        'issuer' => null,
        'notAfter' => null,
        'notBefore' => null,
        'prettyType' => null,
        'serialNumber' => null,
        'subject' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'dnsNames' => false,
        'ipAddresses' => false,
        'issuer' => false,
        'notAfter' => false,
        'notBefore' => false,
        'prettyType' => false,
        'serialNumber' => false,
        'subject' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'dnsNames' => 'dnsNames',
        'ipAddresses' => 'ipAddresses',
        'issuer' => 'issuer',
        'notAfter' => 'notAfter',
        'notBefore' => 'notBefore',
        'prettyType' => 'prettyType',
        'serialNumber' => 'serialNumber',
        'subject' => 'subject'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'dnsNames' => 'setDnsNames',
        'ipAddresses' => 'setIpAddresses',
        'issuer' => 'setIssuer',
        'notAfter' => 'setNotAfter',
        'notBefore' => 'setNotBefore',
        'prettyType' => 'setPrettyType',
        'serialNumber' => 'setSerialNumber',
        'subject' => 'setSubject'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'dnsNames' => 'getDnsNames',
        'ipAddresses' => 'getIpAddresses',
        'issuer' => 'getIssuer',
        'notAfter' => 'getNotAfter',
        'notBefore' => 'getNotBefore',
        'prettyType' => 'getPrettyType',
        'serialNumber' => 'getSerialNumber',
        'subject' => 'getSubject'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('dnsNames', $data ?? [], null);
        $this->setIfExists('ipAddresses', $data ?? [], null);
        $this->setIfExists('issuer', $data ?? [], null);
        $this->setIfExists('notAfter', $data ?? [], null);
        $this->setIfExists('notBefore', $data ?? [], null);
        $this->setIfExists('prettyType', $data ?? [], null);
        $this->setIfExists('serialNumber', $data ?? [], null);
        $this->setIfExists('subject', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['dnsNames'] === null) {
            $invalidProperties[] = "'dnsNames' can't be null";
        }
        if ($this->container['ipAddresses'] === null) {
            $invalidProperties[] = "'ipAddresses' can't be null";
        }
        if ($this->container['issuer'] === null) {
            $invalidProperties[] = "'issuer' can't be null";
        }
        if ($this->container['notAfter'] === null) {
            $invalidProperties[] = "'notAfter' can't be null";
        }
        if ($this->container['notBefore'] === null) {
            $invalidProperties[] = "'notBefore' can't be null";
        }
        if ($this->container['prettyType'] === null) {
            $invalidProperties[] = "'prettyType' can't be null";
        }
        if ($this->container['serialNumber'] === null) {
            $invalidProperties[] = "'serialNumber' can't be null";
        }
        if ($this->container['subject'] === null) {
            $invalidProperties[] = "'subject' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets dnsNames
     *
     * @return string[]
     */
    public function getDnsNames()
    {
        return $this->container['dnsNames'];
    }

    /**
     * Sets dnsNames
     *
     * @param string[] $dnsNames dnsNames
     *
     * @return self
     */
    public function setDnsNames($dnsNames)
    {
        if (is_null($dnsNames)) {
            throw new \InvalidArgumentException('non-nullable dnsNames cannot be null');
        }
        $this->container['dnsNames'] = $dnsNames;

        return $this;
    }

    /**
     * Gets ipAddresses
     *
     * @return string[]
     */
    public function getIpAddresses()
    {
        return $this->container['ipAddresses'];
    }

    /**
     * Sets ipAddresses
     *
     * @param string[] $ipAddresses ipAddresses
     *
     * @return self
     */
    public function setIpAddresses($ipAddresses)
    {
        if (is_null($ipAddresses)) {
            throw new \InvalidArgumentException('non-nullable ipAddresses cannot be null');
        }
        $this->container['ipAddresses'] = $ipAddresses;

        return $this;
    }

    /**
     * Gets issuer
     *
     * @return string
     */
    public function getIssuer()
    {
        return $this->container['issuer'];
    }

    /**
     * Sets issuer
     *
     * @param string $issuer issuer
     *
     * @return self
     */
    public function setIssuer($issuer)
    {
        if (is_null($issuer)) {
            throw new \InvalidArgumentException('non-nullable issuer cannot be null');
        }
        $this->container['issuer'] = $issuer;

        return $this;
    }

    /**
     * Gets notAfter
     *
     * @return string
     */
    public function getNotAfter()
    {
        return $this->container['notAfter'];
    }

    /**
     * Sets notAfter
     *
     * @param string $notAfter notAfter
     *
     * @return self
     */
    public function setNotAfter($notAfter)
    {
        if (is_null($notAfter)) {
            throw new \InvalidArgumentException('non-nullable notAfter cannot be null');
        }
        $this->container['notAfter'] = $notAfter;

        return $this;
    }

    /**
     * Gets notBefore
     *
     * @return string
     */
    public function getNotBefore()
    {
        return $this->container['notBefore'];
    }

    /**
     * Sets notBefore
     *
     * @param string $notBefore notBefore
     *
     * @return self
     */
    public function setNotBefore($notBefore)
    {
        if (is_null($notBefore)) {
            throw new \InvalidArgumentException('non-nullable notBefore cannot be null');
        }
        $this->container['notBefore'] = $notBefore;

        return $this;
    }

    /**
     * Gets prettyType
     *
     * @return string
     */
    public function getPrettyType()
    {
        return $this->container['prettyType'];
    }

    /**
     * Sets prettyType
     *
     * @param string $prettyType prettyType
     *
     * @return self
     */
    public function setPrettyType($prettyType)
    {
        if (is_null($prettyType)) {
            throw new \InvalidArgumentException('non-nullable prettyType cannot be null');
        }
        $this->container['prettyType'] = $prettyType;

        return $this;
    }

    /**
     * Gets serialNumber
     *
     * @return string
     */
    public function getSerialNumber()
    {
        return $this->container['serialNumber'];
    }

    /**
     * Sets serialNumber
     *
     * @param string $serialNumber serialNumber
     *
     * @return self
     */
    public function setSerialNumber($serialNumber)
    {
        if (is_null($serialNumber)) {
            throw new \InvalidArgumentException('non-nullable serialNumber cannot be null');
        }
        $this->container['serialNumber'] = $serialNumber;

        return $this;
    }

    /**
     * Gets subject
     *
     * @return string
     */
    public function getSubject()
    {
        return $this->container['subject'];
    }

    /**
     * Sets subject
     *
     * @param string $subject subject
     *
     * @return self
     */
    public function setSubject($subject)
    {
        if (is_null($subject)) {
            throw new \InvalidArgumentException('non-nullable subject cannot be null');
        }
        $this->container['subject'] = $subject;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


