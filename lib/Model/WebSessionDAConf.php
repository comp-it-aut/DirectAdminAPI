<?php
/**
 * WebSessionDAConf
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  COMPITAUT\DirectAdminAPI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Swagger DirectAdmin API
 *
 * Swagger API for DirectAdmin server
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@directadmin.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace COMPITAUT\DirectAdminAPI\Model;

use \ArrayAccess;
use \COMPITAUT\DirectAdminAPI\ObjectSerializer;

/**
 * WebSessionDAConf Class Doc Comment
 *
 * @category Class
 * @package  COMPITAUT\DirectAdminAPI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class WebSessionDAConf implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'web.sessionDAConf';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'allowForwarderPipe' => 'bool',
        'ftpSeparator' => 'string',
        'homeOverrides' => 'string[]',
        'loginKeys' => 'bool',
        'maxFilesizeBytes' => 'int',
        'passwordCheckDifficult' => 'bool',
        'passwordCheckMinLength' => 'int',
        'resellerWarningBandwidthPercentage' => 'int',
        'showPointersInList' => 'int',
        'tableDefaultIPP' => 'int',
        'userWarningBandwidthPercentage' => 'int',
        'userWarningInodePercentage' => 'int',
        'userWarningQuotaPercentage' => 'int',
        'webappsSSL' => 'bool',
        'webmailHideLinks' => 'bool',
        'webmailLink' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'allowForwarderPipe' => null,
        'ftpSeparator' => null,
        'homeOverrides' => null,
        'loginKeys' => null,
        'maxFilesizeBytes' => null,
        'passwordCheckDifficult' => null,
        'passwordCheckMinLength' => null,
        'resellerWarningBandwidthPercentage' => null,
        'showPointersInList' => null,
        'tableDefaultIPP' => null,
        'userWarningBandwidthPercentage' => null,
        'userWarningInodePercentage' => null,
        'userWarningQuotaPercentage' => null,
        'webappsSSL' => null,
        'webmailHideLinks' => null,
        'webmailLink' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'allowForwarderPipe' => false,
        'ftpSeparator' => false,
        'homeOverrides' => false,
        'loginKeys' => false,
        'maxFilesizeBytes' => false,
        'passwordCheckDifficult' => false,
        'passwordCheckMinLength' => false,
        'resellerWarningBandwidthPercentage' => false,
        'showPointersInList' => false,
        'tableDefaultIPP' => false,
        'userWarningBandwidthPercentage' => false,
        'userWarningInodePercentage' => false,
        'userWarningQuotaPercentage' => false,
        'webappsSSL' => false,
        'webmailHideLinks' => false,
        'webmailLink' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'allowForwarderPipe' => 'allowForwarderPipe',
        'ftpSeparator' => 'ftpSeparator',
        'homeOverrides' => 'homeOverrides',
        'loginKeys' => 'loginKeys',
        'maxFilesizeBytes' => 'maxFilesizeBytes',
        'passwordCheckDifficult' => 'passwordCheckDifficult',
        'passwordCheckMinLength' => 'passwordCheckMinLength',
        'resellerWarningBandwidthPercentage' => 'resellerWarningBandwidthPercentage',
        'showPointersInList' => 'showPointersInList',
        'tableDefaultIPP' => 'tableDefaultIPP',
        'userWarningBandwidthPercentage' => 'userWarningBandwidthPercentage',
        'userWarningInodePercentage' => 'userWarningInodePercentage',
        'userWarningQuotaPercentage' => 'userWarningQuotaPercentage',
        'webappsSSL' => 'webappsSSL',
        'webmailHideLinks' => 'webmailHideLinks',
        'webmailLink' => 'webmailLink'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'allowForwarderPipe' => 'setAllowForwarderPipe',
        'ftpSeparator' => 'setFtpSeparator',
        'homeOverrides' => 'setHomeOverrides',
        'loginKeys' => 'setLoginKeys',
        'maxFilesizeBytes' => 'setMaxFilesizeBytes',
        'passwordCheckDifficult' => 'setPasswordCheckDifficult',
        'passwordCheckMinLength' => 'setPasswordCheckMinLength',
        'resellerWarningBandwidthPercentage' => 'setResellerWarningBandwidthPercentage',
        'showPointersInList' => 'setShowPointersInList',
        'tableDefaultIPP' => 'setTableDefaultIPP',
        'userWarningBandwidthPercentage' => 'setUserWarningBandwidthPercentage',
        'userWarningInodePercentage' => 'setUserWarningInodePercentage',
        'userWarningQuotaPercentage' => 'setUserWarningQuotaPercentage',
        'webappsSSL' => 'setWebappsSSL',
        'webmailHideLinks' => 'setWebmailHideLinks',
        'webmailLink' => 'setWebmailLink'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'allowForwarderPipe' => 'getAllowForwarderPipe',
        'ftpSeparator' => 'getFtpSeparator',
        'homeOverrides' => 'getHomeOverrides',
        'loginKeys' => 'getLoginKeys',
        'maxFilesizeBytes' => 'getMaxFilesizeBytes',
        'passwordCheckDifficult' => 'getPasswordCheckDifficult',
        'passwordCheckMinLength' => 'getPasswordCheckMinLength',
        'resellerWarningBandwidthPercentage' => 'getResellerWarningBandwidthPercentage',
        'showPointersInList' => 'getShowPointersInList',
        'tableDefaultIPP' => 'getTableDefaultIPP',
        'userWarningBandwidthPercentage' => 'getUserWarningBandwidthPercentage',
        'userWarningInodePercentage' => 'getUserWarningInodePercentage',
        'userWarningQuotaPercentage' => 'getUserWarningQuotaPercentage',
        'webappsSSL' => 'getWebappsSSL',
        'webmailHideLinks' => 'getWebmailHideLinks',
        'webmailLink' => 'getWebmailLink'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('allowForwarderPipe', $data ?? [], null);
        $this->setIfExists('ftpSeparator', $data ?? [], null);
        $this->setIfExists('homeOverrides', $data ?? [], null);
        $this->setIfExists('loginKeys', $data ?? [], null);
        $this->setIfExists('maxFilesizeBytes', $data ?? [], null);
        $this->setIfExists('passwordCheckDifficult', $data ?? [], null);
        $this->setIfExists('passwordCheckMinLength', $data ?? [], null);
        $this->setIfExists('resellerWarningBandwidthPercentage', $data ?? [], null);
        $this->setIfExists('showPointersInList', $data ?? [], null);
        $this->setIfExists('tableDefaultIPP', $data ?? [], null);
        $this->setIfExists('userWarningBandwidthPercentage', $data ?? [], null);
        $this->setIfExists('userWarningInodePercentage', $data ?? [], null);
        $this->setIfExists('userWarningQuotaPercentage', $data ?? [], null);
        $this->setIfExists('webappsSSL', $data ?? [], null);
        $this->setIfExists('webmailHideLinks', $data ?? [], null);
        $this->setIfExists('webmailLink', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['allowForwarderPipe'] === null) {
            $invalidProperties[] = "'allowForwarderPipe' can't be null";
        }
        if ($this->container['ftpSeparator'] === null) {
            $invalidProperties[] = "'ftpSeparator' can't be null";
        }
        if ($this->container['homeOverrides'] === null) {
            $invalidProperties[] = "'homeOverrides' can't be null";
        }
        if ($this->container['loginKeys'] === null) {
            $invalidProperties[] = "'loginKeys' can't be null";
        }
        if ($this->container['maxFilesizeBytes'] === null) {
            $invalidProperties[] = "'maxFilesizeBytes' can't be null";
        }
        if ($this->container['passwordCheckDifficult'] === null) {
            $invalidProperties[] = "'passwordCheckDifficult' can't be null";
        }
        if ($this->container['passwordCheckMinLength'] === null) {
            $invalidProperties[] = "'passwordCheckMinLength' can't be null";
        }
        if ($this->container['resellerWarningBandwidthPercentage'] === null) {
            $invalidProperties[] = "'resellerWarningBandwidthPercentage' can't be null";
        }
        if ($this->container['showPointersInList'] === null) {
            $invalidProperties[] = "'showPointersInList' can't be null";
        }
        if ($this->container['tableDefaultIPP'] === null) {
            $invalidProperties[] = "'tableDefaultIPP' can't be null";
        }
        if ($this->container['userWarningBandwidthPercentage'] === null) {
            $invalidProperties[] = "'userWarningBandwidthPercentage' can't be null";
        }
        if ($this->container['userWarningInodePercentage'] === null) {
            $invalidProperties[] = "'userWarningInodePercentage' can't be null";
        }
        if ($this->container['userWarningQuotaPercentage'] === null) {
            $invalidProperties[] = "'userWarningQuotaPercentage' can't be null";
        }
        if ($this->container['webappsSSL'] === null) {
            $invalidProperties[] = "'webappsSSL' can't be null";
        }
        if ($this->container['webmailHideLinks'] === null) {
            $invalidProperties[] = "'webmailHideLinks' can't be null";
        }
        if ($this->container['webmailLink'] === null) {
            $invalidProperties[] = "'webmailLink' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets allowForwarderPipe
     *
     * @return bool
     */
    public function getAllowForwarderPipe()
    {
        return $this->container['allowForwarderPipe'];
    }

    /**
     * Sets allowForwarderPipe
     *
     * @param bool $allowForwarderPipe Field `allow_forwarder_pipe` in `directadmin.conf`.
     *
     * @return self
     */
    public function setAllowForwarderPipe($allowForwarderPipe)
    {
        if (is_null($allowForwarderPipe)) {
            throw new \InvalidArgumentException('non-nullable allowForwarderPipe cannot be null');
        }
        $this->container['allowForwarderPipe'] = $allowForwarderPipe;

        return $this;
    }

    /**
     * Gets ftpSeparator
     *
     * @return string
     */
    public function getFtpSeparator()
    {
        return $this->container['ftpSeparator'];
    }

    /**
     * Sets ftpSeparator
     *
     * @param string $ftpSeparator Field `ftpsep` in `directadmin.conf`.
     *
     * @return self
     */
    public function setFtpSeparator($ftpSeparator)
    {
        if (is_null($ftpSeparator)) {
            throw new \InvalidArgumentException('non-nullable ftpSeparator cannot be null');
        }
        $this->container['ftpSeparator'] = $ftpSeparator;

        return $this;
    }

    /**
     * Gets homeOverrides
     *
     * @return string[]
     */
    public function getHomeOverrides()
    {
        return $this->container['homeOverrides'];
    }

    /**
     * Sets homeOverrides
     *
     * @param string[] $homeOverrides Field `home_override_list` in `directadmin.conf`.
     *
     * @return self
     */
    public function setHomeOverrides($homeOverrides)
    {
        if (is_null($homeOverrides)) {
            throw new \InvalidArgumentException('non-nullable homeOverrides cannot be null');
        }
        $this->container['homeOverrides'] = $homeOverrides;

        return $this;
    }

    /**
     * Gets loginKeys
     *
     * @return bool
     */
    public function getLoginKeys()
    {
        return $this->container['loginKeys'];
    }

    /**
     * Sets loginKeys
     *
     * @param bool $loginKeys Field `login_keys` in `directadmin.conf`.
     *
     * @return self
     */
    public function setLoginKeys($loginKeys)
    {
        if (is_null($loginKeys)) {
            throw new \InvalidArgumentException('non-nullable loginKeys cannot be null');
        }
        $this->container['loginKeys'] = $loginKeys;

        return $this;
    }

    /**
     * Gets maxFilesizeBytes
     *
     * @return int
     */
    public function getMaxFilesizeBytes()
    {
        return $this->container['maxFilesizeBytes'];
    }

    /**
     * Sets maxFilesizeBytes
     *
     * @param int $maxFilesizeBytes Field `maxfilesize` in `directadmin.conf`.
     *
     * @return self
     */
    public function setMaxFilesizeBytes($maxFilesizeBytes)
    {
        if (is_null($maxFilesizeBytes)) {
            throw new \InvalidArgumentException('non-nullable maxFilesizeBytes cannot be null');
        }
        $this->container['maxFilesizeBytes'] = $maxFilesizeBytes;

        return $this;
    }

    /**
     * Gets passwordCheckDifficult
     *
     * @return bool
     */
    public function getPasswordCheckDifficult()
    {
        return $this->container['passwordCheckDifficult'];
    }

    /**
     * Sets passwordCheckDifficult
     *
     * @param bool $passwordCheckDifficult If enabled, then user password must contain at least one symbol from three ranges [a-z], [A-Z], [0-9]. Field `enforce_difficult_passwords` in `directadmin.conf`.
     *
     * @return self
     */
    public function setPasswordCheckDifficult($passwordCheckDifficult)
    {
        if (is_null($passwordCheckDifficult)) {
            throw new \InvalidArgumentException('non-nullable passwordCheckDifficult cannot be null');
        }
        $this->container['passwordCheckDifficult'] = $passwordCheckDifficult;

        return $this;
    }

    /**
     * Gets passwordCheckMinLength
     *
     * @return int
     */
    public function getPasswordCheckMinLength()
    {
        return $this->container['passwordCheckMinLength'];
    }

    /**
     * Sets passwordCheckMinLength
     *
     * @param int $passwordCheckMinLength Minimum number of symbols in user password. Field `difficult_password_length_min` in `directadmin.conf`.
     *
     * @return self
     */
    public function setPasswordCheckMinLength($passwordCheckMinLength)
    {
        if (is_null($passwordCheckMinLength)) {
            throw new \InvalidArgumentException('non-nullable passwordCheckMinLength cannot be null');
        }
        $this->container['passwordCheckMinLength'] = $passwordCheckMinLength;

        return $this;
    }

    /**
     * Gets resellerWarningBandwidthPercentage
     *
     * @return int
     */
    public function getResellerWarningBandwidthPercentage()
    {
        return $this->container['resellerWarningBandwidthPercentage'];
    }

    /**
     * Sets resellerWarningBandwidthPercentage
     *
     * @param int $resellerWarningBandwidthPercentage Field `reseller_warning_thresh` in `directadmin.conf`.
     *
     * @return self
     */
    public function setResellerWarningBandwidthPercentage($resellerWarningBandwidthPercentage)
    {
        if (is_null($resellerWarningBandwidthPercentage)) {
            throw new \InvalidArgumentException('non-nullable resellerWarningBandwidthPercentage cannot be null');
        }
        $this->container['resellerWarningBandwidthPercentage'] = $resellerWarningBandwidthPercentage;

        return $this;
    }

    /**
     * Gets showPointersInList
     *
     * @return int
     */
    public function getShowPointersInList()
    {
        return $this->container['showPointersInList'];
    }

    /**
     * Sets showPointersInList
     *
     * @param int $showPointersInList Field `show_pointers_in_list` in `directadmin.conf`.
     *
     * @return self
     */
    public function setShowPointersInList($showPointersInList)
    {
        if (is_null($showPointersInList)) {
            throw new \InvalidArgumentException('non-nullable showPointersInList cannot be null');
        }
        $this->container['showPointersInList'] = $showPointersInList;

        return $this;
    }

    /**
     * Gets tableDefaultIPP
     *
     * @return int
     */
    public function getTableDefaultIPP()
    {
        return $this->container['tableDefaultIPP'];
    }

    /**
     * Sets tableDefaultIPP
     *
     * @param int $tableDefaultIPP Default items per page. Field `table_default_ipp` in `directadmin.conf`.
     *
     * @return self
     */
    public function setTableDefaultIPP($tableDefaultIPP)
    {
        if (is_null($tableDefaultIPP)) {
            throw new \InvalidArgumentException('non-nullable tableDefaultIPP cannot be null');
        }
        $this->container['tableDefaultIPP'] = $tableDefaultIPP;

        return $this;
    }

    /**
     * Gets userWarningBandwidthPercentage
     *
     * @return int
     */
    public function getUserWarningBandwidthPercentage()
    {
        return $this->container['userWarningBandwidthPercentage'];
    }

    /**
     * Sets userWarningBandwidthPercentage
     *
     * @param int $userWarningBandwidthPercentage Field `user_warning_thresh` in `directadmin.conf`.
     *
     * @return self
     */
    public function setUserWarningBandwidthPercentage($userWarningBandwidthPercentage)
    {
        if (is_null($userWarningBandwidthPercentage)) {
            throw new \InvalidArgumentException('non-nullable userWarningBandwidthPercentage cannot be null');
        }
        $this->container['userWarningBandwidthPercentage'] = $userWarningBandwidthPercentage;

        return $this;
    }

    /**
     * Gets userWarningInodePercentage
     *
     * @return int
     */
    public function getUserWarningInodePercentage()
    {
        return $this->container['userWarningInodePercentage'];
    }

    /**
     * Sets userWarningInodePercentage
     *
     * @param int $userWarningInodePercentage Field `user_warning_thresh_inode` in `directadmin.conf`.
     *
     * @return self
     */
    public function setUserWarningInodePercentage($userWarningInodePercentage)
    {
        if (is_null($userWarningInodePercentage)) {
            throw new \InvalidArgumentException('non-nullable userWarningInodePercentage cannot be null');
        }
        $this->container['userWarningInodePercentage'] = $userWarningInodePercentage;

        return $this;
    }

    /**
     * Gets userWarningQuotaPercentage
     *
     * @return int
     */
    public function getUserWarningQuotaPercentage()
    {
        return $this->container['userWarningQuotaPercentage'];
    }

    /**
     * Sets userWarningQuotaPercentage
     *
     * @param int $userWarningQuotaPercentage Field `user_warning_thresh_disk` in `directadmin.conf`.
     *
     * @return self
     */
    public function setUserWarningQuotaPercentage($userWarningQuotaPercentage)
    {
        if (is_null($userWarningQuotaPercentage)) {
            throw new \InvalidArgumentException('non-nullable userWarningQuotaPercentage cannot be null');
        }
        $this->container['userWarningQuotaPercentage'] = $userWarningQuotaPercentage;

        return $this;
    }

    /**
     * Gets webappsSSL
     *
     * @return bool
     */
    public function getWebappsSSL()
    {
        return $this->container['webappsSSL'];
    }

    /**
     * Sets webappsSSL
     *
     * @param bool $webappsSSL Field `webapps_ssl` in `directadmin.conf`.
     *
     * @return self
     */
    public function setWebappsSSL($webappsSSL)
    {
        if (is_null($webappsSSL)) {
            throw new \InvalidArgumentException('non-nullable webappsSSL cannot be null');
        }
        $this->container['webappsSSL'] = $webappsSSL;

        return $this;
    }

    /**
     * Gets webmailHideLinks
     *
     * @return bool
     */
    public function getWebmailHideLinks()
    {
        return $this->container['webmailHideLinks'];
    }

    /**
     * Sets webmailHideLinks
     *
     * @param bool $webmailHideLinks Field `hide_webmail_links` in `directadmin.conf`.
     *
     * @return self
     */
    public function setWebmailHideLinks($webmailHideLinks)
    {
        if (is_null($webmailHideLinks)) {
            throw new \InvalidArgumentException('non-nullable webmailHideLinks cannot be null');
        }
        $this->container['webmailHideLinks'] = $webmailHideLinks;

        return $this;
    }

    /**
     * Gets webmailLink
     *
     * @return string
     */
    public function getWebmailLink()
    {
        return $this->container['webmailLink'];
    }

    /**
     * Sets webmailLink
     *
     * @param string $webmailLink Field `webmail_link` in `directadmin.conf`.
     *
     * @return self
     */
    public function setWebmailLink($webmailLink)
    {
        if (is_null($webmailLink)) {
            throw new \InvalidArgumentException('non-nullable webmailLink cannot be null');
        }
        $this->container['webmailLink'] = $webmailLink;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


