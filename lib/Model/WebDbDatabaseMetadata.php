<?php
/**
 * WebDbDatabaseMetadata
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  COMPITAUT\DirectAdminAPI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Swagger DirectAdmin API
 *
 * Swagger API for DirectAdmin server
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@directadmin.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace COMPITAUT\DirectAdminAPI\Model;

use \ArrayAccess;
use \COMPITAUT\DirectAdminAPI\ObjectSerializer;

/**
 * WebDbDatabaseMetadata Class Doc Comment
 *
 * @category Class
 * @package  COMPITAUT\DirectAdminAPI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class WebDbDatabaseMetadata implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'web.dbDatabaseMetadata';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'database' => 'string',
        'defaultCharset' => 'string',
        'defaultCollation' => 'string',
        'definerIssues' => 'int',
        'eventCount' => 'int',
        'routineCount' => 'int',
        'sizeBytes' => 'int',
        'tableCount' => 'int',
        'triggerCount' => 'int',
        'userCount' => 'int',
        'viewCount' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'database' => null,
        'defaultCharset' => null,
        'defaultCollation' => null,
        'definerIssues' => null,
        'eventCount' => null,
        'routineCount' => null,
        'sizeBytes' => null,
        'tableCount' => null,
        'triggerCount' => null,
        'userCount' => null,
        'viewCount' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'database' => false,
        'defaultCharset' => false,
        'defaultCollation' => false,
        'definerIssues' => false,
        'eventCount' => false,
        'routineCount' => false,
        'sizeBytes' => false,
        'tableCount' => false,
        'triggerCount' => false,
        'userCount' => false,
        'viewCount' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'database' => 'database',
        'defaultCharset' => 'defaultCharset',
        'defaultCollation' => 'defaultCollation',
        'definerIssues' => 'definerIssues',
        'eventCount' => 'eventCount',
        'routineCount' => 'routineCount',
        'sizeBytes' => 'sizeBytes',
        'tableCount' => 'tableCount',
        'triggerCount' => 'triggerCount',
        'userCount' => 'userCount',
        'viewCount' => 'viewCount'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'database' => 'setDatabase',
        'defaultCharset' => 'setDefaultCharset',
        'defaultCollation' => 'setDefaultCollation',
        'definerIssues' => 'setDefinerIssues',
        'eventCount' => 'setEventCount',
        'routineCount' => 'setRoutineCount',
        'sizeBytes' => 'setSizeBytes',
        'tableCount' => 'setTableCount',
        'triggerCount' => 'setTriggerCount',
        'userCount' => 'setUserCount',
        'viewCount' => 'setViewCount'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'database' => 'getDatabase',
        'defaultCharset' => 'getDefaultCharset',
        'defaultCollation' => 'getDefaultCollation',
        'definerIssues' => 'getDefinerIssues',
        'eventCount' => 'getEventCount',
        'routineCount' => 'getRoutineCount',
        'sizeBytes' => 'getSizeBytes',
        'tableCount' => 'getTableCount',
        'triggerCount' => 'getTriggerCount',
        'userCount' => 'getUserCount',
        'viewCount' => 'getViewCount'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('database', $data ?? [], null);
        $this->setIfExists('defaultCharset', $data ?? [], null);
        $this->setIfExists('defaultCollation', $data ?? [], null);
        $this->setIfExists('definerIssues', $data ?? [], null);
        $this->setIfExists('eventCount', $data ?? [], null);
        $this->setIfExists('routineCount', $data ?? [], null);
        $this->setIfExists('sizeBytes', $data ?? [], null);
        $this->setIfExists('tableCount', $data ?? [], null);
        $this->setIfExists('triggerCount', $data ?? [], null);
        $this->setIfExists('userCount', $data ?? [], null);
        $this->setIfExists('viewCount', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['database'] === null) {
            $invalidProperties[] = "'database' can't be null";
        }
        if ($this->container['defaultCharset'] === null) {
            $invalidProperties[] = "'defaultCharset' can't be null";
        }
        if ($this->container['defaultCollation'] === null) {
            $invalidProperties[] = "'defaultCollation' can't be null";
        }
        if ($this->container['definerIssues'] === null) {
            $invalidProperties[] = "'definerIssues' can't be null";
        }
        if ($this->container['eventCount'] === null) {
            $invalidProperties[] = "'eventCount' can't be null";
        }
        if ($this->container['routineCount'] === null) {
            $invalidProperties[] = "'routineCount' can't be null";
        }
        if ($this->container['sizeBytes'] === null) {
            $invalidProperties[] = "'sizeBytes' can't be null";
        }
        if ($this->container['tableCount'] === null) {
            $invalidProperties[] = "'tableCount' can't be null";
        }
        if ($this->container['triggerCount'] === null) {
            $invalidProperties[] = "'triggerCount' can't be null";
        }
        if ($this->container['userCount'] === null) {
            $invalidProperties[] = "'userCount' can't be null";
        }
        if ($this->container['viewCount'] === null) {
            $invalidProperties[] = "'viewCount' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets database
     *
     * @return string
     */
    public function getDatabase()
    {
        return $this->container['database'];
    }

    /**
     * Sets database
     *
     * @param string $database database
     *
     * @return self
     */
    public function setDatabase($database)
    {
        if (is_null($database)) {
            throw new \InvalidArgumentException('non-nullable database cannot be null');
        }
        $this->container['database'] = $database;

        return $this;
    }

    /**
     * Gets defaultCharset
     *
     * @return string
     */
    public function getDefaultCharset()
    {
        return $this->container['defaultCharset'];
    }

    /**
     * Sets defaultCharset
     *
     * @param string $defaultCharset defaultCharset
     *
     * @return self
     */
    public function setDefaultCharset($defaultCharset)
    {
        if (is_null($defaultCharset)) {
            throw new \InvalidArgumentException('non-nullable defaultCharset cannot be null');
        }
        $this->container['defaultCharset'] = $defaultCharset;

        return $this;
    }

    /**
     * Gets defaultCollation
     *
     * @return string
     */
    public function getDefaultCollation()
    {
        return $this->container['defaultCollation'];
    }

    /**
     * Sets defaultCollation
     *
     * @param string $defaultCollation defaultCollation
     *
     * @return self
     */
    public function setDefaultCollation($defaultCollation)
    {
        if (is_null($defaultCollation)) {
            throw new \InvalidArgumentException('non-nullable defaultCollation cannot be null');
        }
        $this->container['defaultCollation'] = $defaultCollation;

        return $this;
    }

    /**
     * Gets definerIssues
     *
     * @return int
     */
    public function getDefinerIssues()
    {
        return $this->container['definerIssues'];
    }

    /**
     * Sets definerIssues
     *
     * @param int $definerIssues definerIssues
     *
     * @return self
     */
    public function setDefinerIssues($definerIssues)
    {
        if (is_null($definerIssues)) {
            throw new \InvalidArgumentException('non-nullable definerIssues cannot be null');
        }
        $this->container['definerIssues'] = $definerIssues;

        return $this;
    }

    /**
     * Gets eventCount
     *
     * @return int
     */
    public function getEventCount()
    {
        return $this->container['eventCount'];
    }

    /**
     * Sets eventCount
     *
     * @param int $eventCount eventCount
     *
     * @return self
     */
    public function setEventCount($eventCount)
    {
        if (is_null($eventCount)) {
            throw new \InvalidArgumentException('non-nullable eventCount cannot be null');
        }
        $this->container['eventCount'] = $eventCount;

        return $this;
    }

    /**
     * Gets routineCount
     *
     * @return int
     */
    public function getRoutineCount()
    {
        return $this->container['routineCount'];
    }

    /**
     * Sets routineCount
     *
     * @param int $routineCount routineCount
     *
     * @return self
     */
    public function setRoutineCount($routineCount)
    {
        if (is_null($routineCount)) {
            throw new \InvalidArgumentException('non-nullable routineCount cannot be null');
        }
        $this->container['routineCount'] = $routineCount;

        return $this;
    }

    /**
     * Gets sizeBytes
     *
     * @return int
     */
    public function getSizeBytes()
    {
        return $this->container['sizeBytes'];
    }

    /**
     * Sets sizeBytes
     *
     * @param int $sizeBytes sizeBytes
     *
     * @return self
     */
    public function setSizeBytes($sizeBytes)
    {
        if (is_null($sizeBytes)) {
            throw new \InvalidArgumentException('non-nullable sizeBytes cannot be null');
        }
        $this->container['sizeBytes'] = $sizeBytes;

        return $this;
    }

    /**
     * Gets tableCount
     *
     * @return int
     */
    public function getTableCount()
    {
        return $this->container['tableCount'];
    }

    /**
     * Sets tableCount
     *
     * @param int $tableCount tableCount
     *
     * @return self
     */
    public function setTableCount($tableCount)
    {
        if (is_null($tableCount)) {
            throw new \InvalidArgumentException('non-nullable tableCount cannot be null');
        }
        $this->container['tableCount'] = $tableCount;

        return $this;
    }

    /**
     * Gets triggerCount
     *
     * @return int
     */
    public function getTriggerCount()
    {
        return $this->container['triggerCount'];
    }

    /**
     * Sets triggerCount
     *
     * @param int $triggerCount triggerCount
     *
     * @return self
     */
    public function setTriggerCount($triggerCount)
    {
        if (is_null($triggerCount)) {
            throw new \InvalidArgumentException('non-nullable triggerCount cannot be null');
        }
        $this->container['triggerCount'] = $triggerCount;

        return $this;
    }

    /**
     * Gets userCount
     *
     * @return int
     */
    public function getUserCount()
    {
        return $this->container['userCount'];
    }

    /**
     * Sets userCount
     *
     * @param int $userCount userCount
     *
     * @return self
     */
    public function setUserCount($userCount)
    {
        if (is_null($userCount)) {
            throw new \InvalidArgumentException('non-nullable userCount cannot be null');
        }
        $this->container['userCount'] = $userCount;

        return $this;
    }

    /**
     * Gets viewCount
     *
     * @return int
     */
    public function getViewCount()
    {
        return $this->container['viewCount'];
    }

    /**
     * Sets viewCount
     *
     * @param int $viewCount viewCount
     *
     * @return self
     */
    public function setViewCount($viewCount)
    {
        if (is_null($viewCount)) {
            throw new \InvalidArgumentException('non-nullable viewCount cannot be null');
        }
        $this->container['viewCount'] = $viewCount;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


