<?php
/**
 * WebResellerUsage
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  COMPITAUT\DirectAdminAPI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Swagger DirectAdmin API
 *
 * Swagger API for DirectAdmin server
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@directadmin.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace COMPITAUT\DirectAdminAPI\Model;

use \ArrayAccess;
use \COMPITAUT\DirectAdminAPI\ObjectSerializer;

/**
 * WebResellerUsage Class Doc Comment
 *
 * @category Class
 * @package  COMPITAUT\DirectAdminAPI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class WebResellerUsage implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'web.resellerUsage';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'autoresponders' => '\COMPITAUT\DirectAdminAPI\Model\WebUsageLimitAllocation',
        'bandwidthBytes' => '\COMPITAUT\DirectAdminAPI\Model\WebUsageLimitAllocation',
        'bandwidthDeletedUserBytes' => 'int',
        'dbQuotaBytes' => 'int',
        'domainPointers' => '\COMPITAUT\DirectAdminAPI\Model\WebUsageLimitAllocation',
        'domains' => '\COMPITAUT\DirectAdminAPI\Model\WebUsageLimitAllocation',
        'emailAccounts' => '\COMPITAUT\DirectAdminAPI\Model\WebUsageLimitAllocation',
        'emailDeliveries' => 'int',
        'emailDeliveriesIncoming' => 'int',
        'emailDeliveriesOutgoing' => 'int',
        'emailForwarders' => '\COMPITAUT\DirectAdminAPI\Model\WebUsageLimitAllocation',
        'emailQuotaBytes' => 'int',
        'ftpAccounts' => '\COMPITAUT\DirectAdminAPI\Model\WebUsageLimitAllocation',
        'inode' => '\COMPITAUT\DirectAdminAPI\Model\WebUsageLimitAllocation',
        'mailingLists' => '\COMPITAUT\DirectAdminAPI\Model\WebUsageLimitAllocation',
        'mySqlDatabases' => '\COMPITAUT\DirectAdminAPI\Model\WebUsageLimitAllocation',
        'otherQuotaBytes' => 'int',
        'quotaBytes' => '\COMPITAUT\DirectAdminAPI\Model\WebUsageLimitAllocation',
        'subdomains' => '\COMPITAUT\DirectAdminAPI\Model\WebUsageLimitAllocation',
        'users' => '\COMPITAUT\DirectAdminAPI\Model\WebUsageLimitAllocation'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'autoresponders' => null,
        'bandwidthBytes' => null,
        'bandwidthDeletedUserBytes' => null,
        'dbQuotaBytes' => null,
        'domainPointers' => null,
        'domains' => null,
        'emailAccounts' => null,
        'emailDeliveries' => null,
        'emailDeliveriesIncoming' => null,
        'emailDeliveriesOutgoing' => null,
        'emailForwarders' => null,
        'emailQuotaBytes' => null,
        'ftpAccounts' => null,
        'inode' => null,
        'mailingLists' => null,
        'mySqlDatabases' => null,
        'otherQuotaBytes' => null,
        'quotaBytes' => null,
        'subdomains' => null,
        'users' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'autoresponders' => false,
        'bandwidthBytes' => false,
        'bandwidthDeletedUserBytes' => false,
        'dbQuotaBytes' => false,
        'domainPointers' => false,
        'domains' => false,
        'emailAccounts' => false,
        'emailDeliveries' => false,
        'emailDeliveriesIncoming' => false,
        'emailDeliveriesOutgoing' => false,
        'emailForwarders' => false,
        'emailQuotaBytes' => false,
        'ftpAccounts' => false,
        'inode' => false,
        'mailingLists' => false,
        'mySqlDatabases' => false,
        'otherQuotaBytes' => false,
        'quotaBytes' => false,
        'subdomains' => false,
        'users' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'autoresponders' => 'autoresponders',
        'bandwidthBytes' => 'bandwidthBytes',
        'bandwidthDeletedUserBytes' => 'bandwidthDeletedUserBytes',
        'dbQuotaBytes' => 'dbQuotaBytes',
        'domainPointers' => 'domainPointers',
        'domains' => 'domains',
        'emailAccounts' => 'emailAccounts',
        'emailDeliveries' => 'emailDeliveries',
        'emailDeliveriesIncoming' => 'emailDeliveriesIncoming',
        'emailDeliveriesOutgoing' => 'emailDeliveriesOutgoing',
        'emailForwarders' => 'emailForwarders',
        'emailQuotaBytes' => 'emailQuotaBytes',
        'ftpAccounts' => 'ftpAccounts',
        'inode' => 'inode',
        'mailingLists' => 'mailingLists',
        'mySqlDatabases' => 'mySqlDatabases',
        'otherQuotaBytes' => 'otherQuotaBytes',
        'quotaBytes' => 'quotaBytes',
        'subdomains' => 'subdomains',
        'users' => 'users'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'autoresponders' => 'setAutoresponders',
        'bandwidthBytes' => 'setBandwidthBytes',
        'bandwidthDeletedUserBytes' => 'setBandwidthDeletedUserBytes',
        'dbQuotaBytes' => 'setDbQuotaBytes',
        'domainPointers' => 'setDomainPointers',
        'domains' => 'setDomains',
        'emailAccounts' => 'setEmailAccounts',
        'emailDeliveries' => 'setEmailDeliveries',
        'emailDeliveriesIncoming' => 'setEmailDeliveriesIncoming',
        'emailDeliveriesOutgoing' => 'setEmailDeliveriesOutgoing',
        'emailForwarders' => 'setEmailForwarders',
        'emailQuotaBytes' => 'setEmailQuotaBytes',
        'ftpAccounts' => 'setFtpAccounts',
        'inode' => 'setInode',
        'mailingLists' => 'setMailingLists',
        'mySqlDatabases' => 'setMySqlDatabases',
        'otherQuotaBytes' => 'setOtherQuotaBytes',
        'quotaBytes' => 'setQuotaBytes',
        'subdomains' => 'setSubdomains',
        'users' => 'setUsers'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'autoresponders' => 'getAutoresponders',
        'bandwidthBytes' => 'getBandwidthBytes',
        'bandwidthDeletedUserBytes' => 'getBandwidthDeletedUserBytes',
        'dbQuotaBytes' => 'getDbQuotaBytes',
        'domainPointers' => 'getDomainPointers',
        'domains' => 'getDomains',
        'emailAccounts' => 'getEmailAccounts',
        'emailDeliveries' => 'getEmailDeliveries',
        'emailDeliveriesIncoming' => 'getEmailDeliveriesIncoming',
        'emailDeliveriesOutgoing' => 'getEmailDeliveriesOutgoing',
        'emailForwarders' => 'getEmailForwarders',
        'emailQuotaBytes' => 'getEmailQuotaBytes',
        'ftpAccounts' => 'getFtpAccounts',
        'inode' => 'getInode',
        'mailingLists' => 'getMailingLists',
        'mySqlDatabases' => 'getMySqlDatabases',
        'otherQuotaBytes' => 'getOtherQuotaBytes',
        'quotaBytes' => 'getQuotaBytes',
        'subdomains' => 'getSubdomains',
        'users' => 'getUsers'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('autoresponders', $data ?? [], null);
        $this->setIfExists('bandwidthBytes', $data ?? [], null);
        $this->setIfExists('bandwidthDeletedUserBytes', $data ?? [], null);
        $this->setIfExists('dbQuotaBytes', $data ?? [], null);
        $this->setIfExists('domainPointers', $data ?? [], null);
        $this->setIfExists('domains', $data ?? [], null);
        $this->setIfExists('emailAccounts', $data ?? [], null);
        $this->setIfExists('emailDeliveries', $data ?? [], null);
        $this->setIfExists('emailDeliveriesIncoming', $data ?? [], null);
        $this->setIfExists('emailDeliveriesOutgoing', $data ?? [], null);
        $this->setIfExists('emailForwarders', $data ?? [], null);
        $this->setIfExists('emailQuotaBytes', $data ?? [], null);
        $this->setIfExists('ftpAccounts', $data ?? [], null);
        $this->setIfExists('inode', $data ?? [], null);
        $this->setIfExists('mailingLists', $data ?? [], null);
        $this->setIfExists('mySqlDatabases', $data ?? [], null);
        $this->setIfExists('otherQuotaBytes', $data ?? [], null);
        $this->setIfExists('quotaBytes', $data ?? [], null);
        $this->setIfExists('subdomains', $data ?? [], null);
        $this->setIfExists('users', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['autoresponders'] === null) {
            $invalidProperties[] = "'autoresponders' can't be null";
        }
        if ($this->container['bandwidthBytes'] === null) {
            $invalidProperties[] = "'bandwidthBytes' can't be null";
        }
        if ($this->container['bandwidthDeletedUserBytes'] === null) {
            $invalidProperties[] = "'bandwidthDeletedUserBytes' can't be null";
        }
        if ($this->container['dbQuotaBytes'] === null) {
            $invalidProperties[] = "'dbQuotaBytes' can't be null";
        }
        if ($this->container['domainPointers'] === null) {
            $invalidProperties[] = "'domainPointers' can't be null";
        }
        if ($this->container['domains'] === null) {
            $invalidProperties[] = "'domains' can't be null";
        }
        if ($this->container['emailAccounts'] === null) {
            $invalidProperties[] = "'emailAccounts' can't be null";
        }
        if ($this->container['emailDeliveries'] === null) {
            $invalidProperties[] = "'emailDeliveries' can't be null";
        }
        if ($this->container['emailDeliveriesIncoming'] === null) {
            $invalidProperties[] = "'emailDeliveriesIncoming' can't be null";
        }
        if ($this->container['emailDeliveriesOutgoing'] === null) {
            $invalidProperties[] = "'emailDeliveriesOutgoing' can't be null";
        }
        if ($this->container['emailForwarders'] === null) {
            $invalidProperties[] = "'emailForwarders' can't be null";
        }
        if ($this->container['emailQuotaBytes'] === null) {
            $invalidProperties[] = "'emailQuotaBytes' can't be null";
        }
        if ($this->container['ftpAccounts'] === null) {
            $invalidProperties[] = "'ftpAccounts' can't be null";
        }
        if ($this->container['inode'] === null) {
            $invalidProperties[] = "'inode' can't be null";
        }
        if ($this->container['mailingLists'] === null) {
            $invalidProperties[] = "'mailingLists' can't be null";
        }
        if ($this->container['mySqlDatabases'] === null) {
            $invalidProperties[] = "'mySqlDatabases' can't be null";
        }
        if ($this->container['otherQuotaBytes'] === null) {
            $invalidProperties[] = "'otherQuotaBytes' can't be null";
        }
        if ($this->container['quotaBytes'] === null) {
            $invalidProperties[] = "'quotaBytes' can't be null";
        }
        if ($this->container['subdomains'] === null) {
            $invalidProperties[] = "'subdomains' can't be null";
        }
        if ($this->container['users'] === null) {
            $invalidProperties[] = "'users' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets autoresponders
     *
     * @return \COMPITAUT\DirectAdminAPI\Model\WebUsageLimitAllocation
     */
    public function getAutoresponders()
    {
        return $this->container['autoresponders'];
    }

    /**
     * Sets autoresponders
     *
     * @param \COMPITAUT\DirectAdminAPI\Model\WebUsageLimitAllocation $autoresponders autoresponders
     *
     * @return self
     */
    public function setAutoresponders($autoresponders)
    {
        if (is_null($autoresponders)) {
            throw new \InvalidArgumentException('non-nullable autoresponders cannot be null');
        }
        $this->container['autoresponders'] = $autoresponders;

        return $this;
    }

    /**
     * Gets bandwidthBytes
     *
     * @return \COMPITAUT\DirectAdminAPI\Model\WebUsageLimitAllocation
     */
    public function getBandwidthBytes()
    {
        return $this->container['bandwidthBytes'];
    }

    /**
     * Sets bandwidthBytes
     *
     * @param \COMPITAUT\DirectAdminAPI\Model\WebUsageLimitAllocation $bandwidthBytes bandwidthBytes
     *
     * @return self
     */
    public function setBandwidthBytes($bandwidthBytes)
    {
        if (is_null($bandwidthBytes)) {
            throw new \InvalidArgumentException('non-nullable bandwidthBytes cannot be null');
        }
        $this->container['bandwidthBytes'] = $bandwidthBytes;

        return $this;
    }

    /**
     * Gets bandwidthDeletedUserBytes
     *
     * @return int
     */
    public function getBandwidthDeletedUserBytes()
    {
        return $this->container['bandwidthDeletedUserBytes'];
    }

    /**
     * Sets bandwidthDeletedUserBytes
     *
     * @param int $bandwidthDeletedUserBytes bandwidthDeletedUserBytes
     *
     * @return self
     */
    public function setBandwidthDeletedUserBytes($bandwidthDeletedUserBytes)
    {
        if (is_null($bandwidthDeletedUserBytes)) {
            throw new \InvalidArgumentException('non-nullable bandwidthDeletedUserBytes cannot be null');
        }
        $this->container['bandwidthDeletedUserBytes'] = $bandwidthDeletedUserBytes;

        return $this;
    }

    /**
     * Gets dbQuotaBytes
     *
     * @return int
     */
    public function getDbQuotaBytes()
    {
        return $this->container['dbQuotaBytes'];
    }

    /**
     * Sets dbQuotaBytes
     *
     * @param int $dbQuotaBytes dbQuotaBytes
     *
     * @return self
     */
    public function setDbQuotaBytes($dbQuotaBytes)
    {
        if (is_null($dbQuotaBytes)) {
            throw new \InvalidArgumentException('non-nullable dbQuotaBytes cannot be null');
        }
        $this->container['dbQuotaBytes'] = $dbQuotaBytes;

        return $this;
    }

    /**
     * Gets domainPointers
     *
     * @return \COMPITAUT\DirectAdminAPI\Model\WebUsageLimitAllocation
     */
    public function getDomainPointers()
    {
        return $this->container['domainPointers'];
    }

    /**
     * Sets domainPointers
     *
     * @param \COMPITAUT\DirectAdminAPI\Model\WebUsageLimitAllocation $domainPointers domainPointers
     *
     * @return self
     */
    public function setDomainPointers($domainPointers)
    {
        if (is_null($domainPointers)) {
            throw new \InvalidArgumentException('non-nullable domainPointers cannot be null');
        }
        $this->container['domainPointers'] = $domainPointers;

        return $this;
    }

    /**
     * Gets domains
     *
     * @return \COMPITAUT\DirectAdminAPI\Model\WebUsageLimitAllocation
     */
    public function getDomains()
    {
        return $this->container['domains'];
    }

    /**
     * Sets domains
     *
     * @param \COMPITAUT\DirectAdminAPI\Model\WebUsageLimitAllocation $domains domains
     *
     * @return self
     */
    public function setDomains($domains)
    {
        if (is_null($domains)) {
            throw new \InvalidArgumentException('non-nullable domains cannot be null');
        }
        $this->container['domains'] = $domains;

        return $this;
    }

    /**
     * Gets emailAccounts
     *
     * @return \COMPITAUT\DirectAdminAPI\Model\WebUsageLimitAllocation
     */
    public function getEmailAccounts()
    {
        return $this->container['emailAccounts'];
    }

    /**
     * Sets emailAccounts
     *
     * @param \COMPITAUT\DirectAdminAPI\Model\WebUsageLimitAllocation $emailAccounts emailAccounts
     *
     * @return self
     */
    public function setEmailAccounts($emailAccounts)
    {
        if (is_null($emailAccounts)) {
            throw new \InvalidArgumentException('non-nullable emailAccounts cannot be null');
        }
        $this->container['emailAccounts'] = $emailAccounts;

        return $this;
    }

    /**
     * Gets emailDeliveries
     *
     * @return int
     */
    public function getEmailDeliveries()
    {
        return $this->container['emailDeliveries'];
    }

    /**
     * Sets emailDeliveries
     *
     * @param int $emailDeliveries emailDeliveries
     *
     * @return self
     */
    public function setEmailDeliveries($emailDeliveries)
    {
        if (is_null($emailDeliveries)) {
            throw new \InvalidArgumentException('non-nullable emailDeliveries cannot be null');
        }
        $this->container['emailDeliveries'] = $emailDeliveries;

        return $this;
    }

    /**
     * Gets emailDeliveriesIncoming
     *
     * @return int
     */
    public function getEmailDeliveriesIncoming()
    {
        return $this->container['emailDeliveriesIncoming'];
    }

    /**
     * Sets emailDeliveriesIncoming
     *
     * @param int $emailDeliveriesIncoming emailDeliveriesIncoming
     *
     * @return self
     */
    public function setEmailDeliveriesIncoming($emailDeliveriesIncoming)
    {
        if (is_null($emailDeliveriesIncoming)) {
            throw new \InvalidArgumentException('non-nullable emailDeliveriesIncoming cannot be null');
        }
        $this->container['emailDeliveriesIncoming'] = $emailDeliveriesIncoming;

        return $this;
    }

    /**
     * Gets emailDeliveriesOutgoing
     *
     * @return int
     */
    public function getEmailDeliveriesOutgoing()
    {
        return $this->container['emailDeliveriesOutgoing'];
    }

    /**
     * Sets emailDeliveriesOutgoing
     *
     * @param int $emailDeliveriesOutgoing emailDeliveriesOutgoing
     *
     * @return self
     */
    public function setEmailDeliveriesOutgoing($emailDeliveriesOutgoing)
    {
        if (is_null($emailDeliveriesOutgoing)) {
            throw new \InvalidArgumentException('non-nullable emailDeliveriesOutgoing cannot be null');
        }
        $this->container['emailDeliveriesOutgoing'] = $emailDeliveriesOutgoing;

        return $this;
    }

    /**
     * Gets emailForwarders
     *
     * @return \COMPITAUT\DirectAdminAPI\Model\WebUsageLimitAllocation
     */
    public function getEmailForwarders()
    {
        return $this->container['emailForwarders'];
    }

    /**
     * Sets emailForwarders
     *
     * @param \COMPITAUT\DirectAdminAPI\Model\WebUsageLimitAllocation $emailForwarders emailForwarders
     *
     * @return self
     */
    public function setEmailForwarders($emailForwarders)
    {
        if (is_null($emailForwarders)) {
            throw new \InvalidArgumentException('non-nullable emailForwarders cannot be null');
        }
        $this->container['emailForwarders'] = $emailForwarders;

        return $this;
    }

    /**
     * Gets emailQuotaBytes
     *
     * @return int
     */
    public function getEmailQuotaBytes()
    {
        return $this->container['emailQuotaBytes'];
    }

    /**
     * Sets emailQuotaBytes
     *
     * @param int $emailQuotaBytes emailQuotaBytes
     *
     * @return self
     */
    public function setEmailQuotaBytes($emailQuotaBytes)
    {
        if (is_null($emailQuotaBytes)) {
            throw new \InvalidArgumentException('non-nullable emailQuotaBytes cannot be null');
        }
        $this->container['emailQuotaBytes'] = $emailQuotaBytes;

        return $this;
    }

    /**
     * Gets ftpAccounts
     *
     * @return \COMPITAUT\DirectAdminAPI\Model\WebUsageLimitAllocation
     */
    public function getFtpAccounts()
    {
        return $this->container['ftpAccounts'];
    }

    /**
     * Sets ftpAccounts
     *
     * @param \COMPITAUT\DirectAdminAPI\Model\WebUsageLimitAllocation $ftpAccounts ftpAccounts
     *
     * @return self
     */
    public function setFtpAccounts($ftpAccounts)
    {
        if (is_null($ftpAccounts)) {
            throw new \InvalidArgumentException('non-nullable ftpAccounts cannot be null');
        }
        $this->container['ftpAccounts'] = $ftpAccounts;

        return $this;
    }

    /**
     * Gets inode
     *
     * @return \COMPITAUT\DirectAdminAPI\Model\WebUsageLimitAllocation
     */
    public function getInode()
    {
        return $this->container['inode'];
    }

    /**
     * Sets inode
     *
     * @param \COMPITAUT\DirectAdminAPI\Model\WebUsageLimitAllocation $inode inode
     *
     * @return self
     */
    public function setInode($inode)
    {
        if (is_null($inode)) {
            throw new \InvalidArgumentException('non-nullable inode cannot be null');
        }
        $this->container['inode'] = $inode;

        return $this;
    }

    /**
     * Gets mailingLists
     *
     * @return \COMPITAUT\DirectAdminAPI\Model\WebUsageLimitAllocation
     */
    public function getMailingLists()
    {
        return $this->container['mailingLists'];
    }

    /**
     * Sets mailingLists
     *
     * @param \COMPITAUT\DirectAdminAPI\Model\WebUsageLimitAllocation $mailingLists mailingLists
     *
     * @return self
     */
    public function setMailingLists($mailingLists)
    {
        if (is_null($mailingLists)) {
            throw new \InvalidArgumentException('non-nullable mailingLists cannot be null');
        }
        $this->container['mailingLists'] = $mailingLists;

        return $this;
    }

    /**
     * Gets mySqlDatabases
     *
     * @return \COMPITAUT\DirectAdminAPI\Model\WebUsageLimitAllocation
     */
    public function getMySqlDatabases()
    {
        return $this->container['mySqlDatabases'];
    }

    /**
     * Sets mySqlDatabases
     *
     * @param \COMPITAUT\DirectAdminAPI\Model\WebUsageLimitAllocation $mySqlDatabases mySqlDatabases
     *
     * @return self
     */
    public function setMySqlDatabases($mySqlDatabases)
    {
        if (is_null($mySqlDatabases)) {
            throw new \InvalidArgumentException('non-nullable mySqlDatabases cannot be null');
        }
        $this->container['mySqlDatabases'] = $mySqlDatabases;

        return $this;
    }

    /**
     * Gets otherQuotaBytes
     *
     * @return int
     */
    public function getOtherQuotaBytes()
    {
        return $this->container['otherQuotaBytes'];
    }

    /**
     * Sets otherQuotaBytes
     *
     * @param int $otherQuotaBytes otherQuotaBytes
     *
     * @return self
     */
    public function setOtherQuotaBytes($otherQuotaBytes)
    {
        if (is_null($otherQuotaBytes)) {
            throw new \InvalidArgumentException('non-nullable otherQuotaBytes cannot be null');
        }
        $this->container['otherQuotaBytes'] = $otherQuotaBytes;

        return $this;
    }

    /**
     * Gets quotaBytes
     *
     * @return \COMPITAUT\DirectAdminAPI\Model\WebUsageLimitAllocation
     */
    public function getQuotaBytes()
    {
        return $this->container['quotaBytes'];
    }

    /**
     * Sets quotaBytes
     *
     * @param \COMPITAUT\DirectAdminAPI\Model\WebUsageLimitAllocation $quotaBytes quotaBytes
     *
     * @return self
     */
    public function setQuotaBytes($quotaBytes)
    {
        if (is_null($quotaBytes)) {
            throw new \InvalidArgumentException('non-nullable quotaBytes cannot be null');
        }
        $this->container['quotaBytes'] = $quotaBytes;

        return $this;
    }

    /**
     * Gets subdomains
     *
     * @return \COMPITAUT\DirectAdminAPI\Model\WebUsageLimitAllocation
     */
    public function getSubdomains()
    {
        return $this->container['subdomains'];
    }

    /**
     * Sets subdomains
     *
     * @param \COMPITAUT\DirectAdminAPI\Model\WebUsageLimitAllocation $subdomains subdomains
     *
     * @return self
     */
    public function setSubdomains($subdomains)
    {
        if (is_null($subdomains)) {
            throw new \InvalidArgumentException('non-nullable subdomains cannot be null');
        }
        $this->container['subdomains'] = $subdomains;

        return $this;
    }

    /**
     * Gets users
     *
     * @return \COMPITAUT\DirectAdminAPI\Model\WebUsageLimitAllocation
     */
    public function getUsers()
    {
        return $this->container['users'];
    }

    /**
     * Sets users
     *
     * @param \COMPITAUT\DirectAdminAPI\Model\WebUsageLimitAllocation $users users
     *
     * @return self
     */
    public function setUsers($users)
    {
        if (is_null($users)) {
            throw new \InvalidArgumentException('non-nullable users cannot be null');
        }
        $this->container['users'] = $users;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


