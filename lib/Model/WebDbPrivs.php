<?php
/**
 * WebDbPrivs
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  COMPITAUT\DirectAdminAPI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Swagger DirectAdmin API
 *
 * Swagger API for DirectAdmin server
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@directadmin.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace COMPITAUT\DirectAdminAPI\Model;

use \ArrayAccess;
use \COMPITAUT\DirectAdminAPI\ObjectSerializer;

/**
 * WebDbPrivs Class Doc Comment
 *
 * @category Class
 * @package  COMPITAUT\DirectAdminAPI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class WebDbPrivs implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'web.dbPrivs';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'alter' => 'bool',
        'alterRoutine' => 'bool',
        'create' => 'bool',
        'createRoutine' => 'bool',
        'createTmpTable' => 'bool',
        'createView' => 'bool',
        'delete' => 'bool',
        'drop' => 'bool',
        'event' => 'bool',
        'execute' => 'bool',
        'index' => 'bool',
        'insert' => 'bool',
        'lockTables' => 'bool',
        'references' => 'bool',
        'select' => 'bool',
        'showView' => 'bool',
        'trigger' => 'bool',
        'update' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'alter' => null,
        'alterRoutine' => null,
        'create' => null,
        'createRoutine' => null,
        'createTmpTable' => null,
        'createView' => null,
        'delete' => null,
        'drop' => null,
        'event' => null,
        'execute' => null,
        'index' => null,
        'insert' => null,
        'lockTables' => null,
        'references' => null,
        'select' => null,
        'showView' => null,
        'trigger' => null,
        'update' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'alter' => false,
        'alterRoutine' => false,
        'create' => false,
        'createRoutine' => false,
        'createTmpTable' => false,
        'createView' => false,
        'delete' => false,
        'drop' => false,
        'event' => false,
        'execute' => false,
        'index' => false,
        'insert' => false,
        'lockTables' => false,
        'references' => false,
        'select' => false,
        'showView' => false,
        'trigger' => false,
        'update' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'alter' => 'alter',
        'alterRoutine' => 'alterRoutine',
        'create' => 'create',
        'createRoutine' => 'createRoutine',
        'createTmpTable' => 'createTmpTable',
        'createView' => 'createView',
        'delete' => 'delete',
        'drop' => 'drop',
        'event' => 'event',
        'execute' => 'execute',
        'index' => 'index',
        'insert' => 'insert',
        'lockTables' => 'lockTables',
        'references' => 'references',
        'select' => 'select',
        'showView' => 'showView',
        'trigger' => 'trigger',
        'update' => 'update'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'alter' => 'setAlter',
        'alterRoutine' => 'setAlterRoutine',
        'create' => 'setCreate',
        'createRoutine' => 'setCreateRoutine',
        'createTmpTable' => 'setCreateTmpTable',
        'createView' => 'setCreateView',
        'delete' => 'setDelete',
        'drop' => 'setDrop',
        'event' => 'setEvent',
        'execute' => 'setExecute',
        'index' => 'setIndex',
        'insert' => 'setInsert',
        'lockTables' => 'setLockTables',
        'references' => 'setReferences',
        'select' => 'setSelect',
        'showView' => 'setShowView',
        'trigger' => 'setTrigger',
        'update' => 'setUpdate'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'alter' => 'getAlter',
        'alterRoutine' => 'getAlterRoutine',
        'create' => 'getCreate',
        'createRoutine' => 'getCreateRoutine',
        'createTmpTable' => 'getCreateTmpTable',
        'createView' => 'getCreateView',
        'delete' => 'getDelete',
        'drop' => 'getDrop',
        'event' => 'getEvent',
        'execute' => 'getExecute',
        'index' => 'getIndex',
        'insert' => 'getInsert',
        'lockTables' => 'getLockTables',
        'references' => 'getReferences',
        'select' => 'getSelect',
        'showView' => 'getShowView',
        'trigger' => 'getTrigger',
        'update' => 'getUpdate'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('alter', $data ?? [], null);
        $this->setIfExists('alterRoutine', $data ?? [], null);
        $this->setIfExists('create', $data ?? [], null);
        $this->setIfExists('createRoutine', $data ?? [], null);
        $this->setIfExists('createTmpTable', $data ?? [], null);
        $this->setIfExists('createView', $data ?? [], null);
        $this->setIfExists('delete', $data ?? [], null);
        $this->setIfExists('drop', $data ?? [], null);
        $this->setIfExists('event', $data ?? [], null);
        $this->setIfExists('execute', $data ?? [], null);
        $this->setIfExists('index', $data ?? [], null);
        $this->setIfExists('insert', $data ?? [], null);
        $this->setIfExists('lockTables', $data ?? [], null);
        $this->setIfExists('references', $data ?? [], null);
        $this->setIfExists('select', $data ?? [], null);
        $this->setIfExists('showView', $data ?? [], null);
        $this->setIfExists('trigger', $data ?? [], null);
        $this->setIfExists('update', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['alter'] === null) {
            $invalidProperties[] = "'alter' can't be null";
        }
        if ($this->container['alterRoutine'] === null) {
            $invalidProperties[] = "'alterRoutine' can't be null";
        }
        if ($this->container['create'] === null) {
            $invalidProperties[] = "'create' can't be null";
        }
        if ($this->container['createRoutine'] === null) {
            $invalidProperties[] = "'createRoutine' can't be null";
        }
        if ($this->container['createTmpTable'] === null) {
            $invalidProperties[] = "'createTmpTable' can't be null";
        }
        if ($this->container['createView'] === null) {
            $invalidProperties[] = "'createView' can't be null";
        }
        if ($this->container['delete'] === null) {
            $invalidProperties[] = "'delete' can't be null";
        }
        if ($this->container['drop'] === null) {
            $invalidProperties[] = "'drop' can't be null";
        }
        if ($this->container['event'] === null) {
            $invalidProperties[] = "'event' can't be null";
        }
        if ($this->container['execute'] === null) {
            $invalidProperties[] = "'execute' can't be null";
        }
        if ($this->container['index'] === null) {
            $invalidProperties[] = "'index' can't be null";
        }
        if ($this->container['insert'] === null) {
            $invalidProperties[] = "'insert' can't be null";
        }
        if ($this->container['lockTables'] === null) {
            $invalidProperties[] = "'lockTables' can't be null";
        }
        if ($this->container['references'] === null) {
            $invalidProperties[] = "'references' can't be null";
        }
        if ($this->container['select'] === null) {
            $invalidProperties[] = "'select' can't be null";
        }
        if ($this->container['showView'] === null) {
            $invalidProperties[] = "'showView' can't be null";
        }
        if ($this->container['trigger'] === null) {
            $invalidProperties[] = "'trigger' can't be null";
        }
        if ($this->container['update'] === null) {
            $invalidProperties[] = "'update' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets alter
     *
     * @return bool
     */
    public function getAlter()
    {
        return $this->container['alter'];
    }

    /**
     * Sets alter
     *
     * @param bool $alter alter
     *
     * @return self
     */
    public function setAlter($alter)
    {
        if (is_null($alter)) {
            throw new \InvalidArgumentException('non-nullable alter cannot be null');
        }
        $this->container['alter'] = $alter;

        return $this;
    }

    /**
     * Gets alterRoutine
     *
     * @return bool
     */
    public function getAlterRoutine()
    {
        return $this->container['alterRoutine'];
    }

    /**
     * Sets alterRoutine
     *
     * @param bool $alterRoutine alterRoutine
     *
     * @return self
     */
    public function setAlterRoutine($alterRoutine)
    {
        if (is_null($alterRoutine)) {
            throw new \InvalidArgumentException('non-nullable alterRoutine cannot be null');
        }
        $this->container['alterRoutine'] = $alterRoutine;

        return $this;
    }

    /**
     * Gets create
     *
     * @return bool
     */
    public function getCreate()
    {
        return $this->container['create'];
    }

    /**
     * Sets create
     *
     * @param bool $create create
     *
     * @return self
     */
    public function setCreate($create)
    {
        if (is_null($create)) {
            throw new \InvalidArgumentException('non-nullable create cannot be null');
        }
        $this->container['create'] = $create;

        return $this;
    }

    /**
     * Gets createRoutine
     *
     * @return bool
     */
    public function getCreateRoutine()
    {
        return $this->container['createRoutine'];
    }

    /**
     * Sets createRoutine
     *
     * @param bool $createRoutine createRoutine
     *
     * @return self
     */
    public function setCreateRoutine($createRoutine)
    {
        if (is_null($createRoutine)) {
            throw new \InvalidArgumentException('non-nullable createRoutine cannot be null');
        }
        $this->container['createRoutine'] = $createRoutine;

        return $this;
    }

    /**
     * Gets createTmpTable
     *
     * @return bool
     */
    public function getCreateTmpTable()
    {
        return $this->container['createTmpTable'];
    }

    /**
     * Sets createTmpTable
     *
     * @param bool $createTmpTable createTmpTable
     *
     * @return self
     */
    public function setCreateTmpTable($createTmpTable)
    {
        if (is_null($createTmpTable)) {
            throw new \InvalidArgumentException('non-nullable createTmpTable cannot be null');
        }
        $this->container['createTmpTable'] = $createTmpTable;

        return $this;
    }

    /**
     * Gets createView
     *
     * @return bool
     */
    public function getCreateView()
    {
        return $this->container['createView'];
    }

    /**
     * Sets createView
     *
     * @param bool $createView createView
     *
     * @return self
     */
    public function setCreateView($createView)
    {
        if (is_null($createView)) {
            throw new \InvalidArgumentException('non-nullable createView cannot be null');
        }
        $this->container['createView'] = $createView;

        return $this;
    }

    /**
     * Gets delete
     *
     * @return bool
     */
    public function getDelete()
    {
        return $this->container['delete'];
    }

    /**
     * Sets delete
     *
     * @param bool $delete delete
     *
     * @return self
     */
    public function setDelete($delete)
    {
        if (is_null($delete)) {
            throw new \InvalidArgumentException('non-nullable delete cannot be null');
        }
        $this->container['delete'] = $delete;

        return $this;
    }

    /**
     * Gets drop
     *
     * @return bool
     */
    public function getDrop()
    {
        return $this->container['drop'];
    }

    /**
     * Sets drop
     *
     * @param bool $drop drop
     *
     * @return self
     */
    public function setDrop($drop)
    {
        if (is_null($drop)) {
            throw new \InvalidArgumentException('non-nullable drop cannot be null');
        }
        $this->container['drop'] = $drop;

        return $this;
    }

    /**
     * Gets event
     *
     * @return bool
     */
    public function getEvent()
    {
        return $this->container['event'];
    }

    /**
     * Sets event
     *
     * @param bool $event event
     *
     * @return self
     */
    public function setEvent($event)
    {
        if (is_null($event)) {
            throw new \InvalidArgumentException('non-nullable event cannot be null');
        }
        $this->container['event'] = $event;

        return $this;
    }

    /**
     * Gets execute
     *
     * @return bool
     */
    public function getExecute()
    {
        return $this->container['execute'];
    }

    /**
     * Sets execute
     *
     * @param bool $execute execute
     *
     * @return self
     */
    public function setExecute($execute)
    {
        if (is_null($execute)) {
            throw new \InvalidArgumentException('non-nullable execute cannot be null');
        }
        $this->container['execute'] = $execute;

        return $this;
    }

    /**
     * Gets index
     *
     * @return bool
     */
    public function getIndex()
    {
        return $this->container['index'];
    }

    /**
     * Sets index
     *
     * @param bool $index index
     *
     * @return self
     */
    public function setIndex($index)
    {
        if (is_null($index)) {
            throw new \InvalidArgumentException('non-nullable index cannot be null');
        }
        $this->container['index'] = $index;

        return $this;
    }

    /**
     * Gets insert
     *
     * @return bool
     */
    public function getInsert()
    {
        return $this->container['insert'];
    }

    /**
     * Sets insert
     *
     * @param bool $insert insert
     *
     * @return self
     */
    public function setInsert($insert)
    {
        if (is_null($insert)) {
            throw new \InvalidArgumentException('non-nullable insert cannot be null');
        }
        $this->container['insert'] = $insert;

        return $this;
    }

    /**
     * Gets lockTables
     *
     * @return bool
     */
    public function getLockTables()
    {
        return $this->container['lockTables'];
    }

    /**
     * Sets lockTables
     *
     * @param bool $lockTables lockTables
     *
     * @return self
     */
    public function setLockTables($lockTables)
    {
        if (is_null($lockTables)) {
            throw new \InvalidArgumentException('non-nullable lockTables cannot be null');
        }
        $this->container['lockTables'] = $lockTables;

        return $this;
    }

    /**
     * Gets references
     *
     * @return bool
     */
    public function getReferences()
    {
        return $this->container['references'];
    }

    /**
     * Sets references
     *
     * @param bool $references references
     *
     * @return self
     */
    public function setReferences($references)
    {
        if (is_null($references)) {
            throw new \InvalidArgumentException('non-nullable references cannot be null');
        }
        $this->container['references'] = $references;

        return $this;
    }

    /**
     * Gets select
     *
     * @return bool
     */
    public function getSelect()
    {
        return $this->container['select'];
    }

    /**
     * Sets select
     *
     * @param bool $select select
     *
     * @return self
     */
    public function setSelect($select)
    {
        if (is_null($select)) {
            throw new \InvalidArgumentException('non-nullable select cannot be null');
        }
        $this->container['select'] = $select;

        return $this;
    }

    /**
     * Gets showView
     *
     * @return bool
     */
    public function getShowView()
    {
        return $this->container['showView'];
    }

    /**
     * Sets showView
     *
     * @param bool $showView showView
     *
     * @return self
     */
    public function setShowView($showView)
    {
        if (is_null($showView)) {
            throw new \InvalidArgumentException('non-nullable showView cannot be null');
        }
        $this->container['showView'] = $showView;

        return $this;
    }

    /**
     * Gets trigger
     *
     * @return bool
     */
    public function getTrigger()
    {
        return $this->container['trigger'];
    }

    /**
     * Sets trigger
     *
     * @param bool $trigger trigger
     *
     * @return self
     */
    public function setTrigger($trigger)
    {
        if (is_null($trigger)) {
            throw new \InvalidArgumentException('non-nullable trigger cannot be null');
        }
        $this->container['trigger'] = $trigger;

        return $this;
    }

    /**
     * Gets update
     *
     * @return bool
     */
    public function getUpdate()
    {
        return $this->container['update'];
    }

    /**
     * Sets update
     *
     * @param bool $update update
     *
     * @return self
     */
    public function setUpdate($update)
    {
        if (is_null($update)) {
            throw new \InvalidArgumentException('non-nullable update cannot be null');
        }
        $this->container['update'] = $update;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


