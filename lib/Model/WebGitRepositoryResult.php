<?php
/**
 * WebGitRepositoryResult
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  COMPITAUT\DirectAdminAPI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Swagger DirectAdmin API
 *
 * Swagger API for DirectAdmin server
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@directadmin.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace COMPITAUT\DirectAdminAPI\Model;

use \ArrayAccess;
use \COMPITAUT\DirectAdminAPI\ObjectSerializer;

/**
 * WebGitRepositoryResult Class Doc Comment
 *
 * @category Class
 * @package  COMPITAUT\DirectAdminAPI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class WebGitRepositoryResult implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'web.gitRepositoryResult';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'branches' => 'string[]',
        'deployBranch' => 'string',
        'deployDir' => 'string',
        'keyfile' => 'string',
        'name' => 'string',
        'remote' => 'string',
        'url' => 'string',
        'uuid' => 'string',
        'valid' => 'bool',
        'webhookUrl' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'branches' => null,
        'deployBranch' => null,
        'deployDir' => null,
        'keyfile' => null,
        'name' => null,
        'remote' => null,
        'url' => null,
        'uuid' => null,
        'valid' => null,
        'webhookUrl' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'branches' => false,
        'deployBranch' => false,
        'deployDir' => false,
        'keyfile' => false,
        'name' => false,
        'remote' => false,
        'url' => false,
        'uuid' => false,
        'valid' => false,
        'webhookUrl' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'branches' => 'branches',
        'deployBranch' => 'deploy_branch',
        'deployDir' => 'deploy_dir',
        'keyfile' => 'keyfile',
        'name' => 'name',
        'remote' => 'remote',
        'url' => 'url',
        'uuid' => 'uuid',
        'valid' => 'valid',
        'webhookUrl' => 'webhook_url'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'branches' => 'setBranches',
        'deployBranch' => 'setDeployBranch',
        'deployDir' => 'setDeployDir',
        'keyfile' => 'setKeyfile',
        'name' => 'setName',
        'remote' => 'setRemote',
        'url' => 'setUrl',
        'uuid' => 'setUuid',
        'valid' => 'setValid',
        'webhookUrl' => 'setWebhookUrl'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'branches' => 'getBranches',
        'deployBranch' => 'getDeployBranch',
        'deployDir' => 'getDeployDir',
        'keyfile' => 'getKeyfile',
        'name' => 'getName',
        'remote' => 'getRemote',
        'url' => 'getUrl',
        'uuid' => 'getUuid',
        'valid' => 'getValid',
        'webhookUrl' => 'getWebhookUrl'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('branches', $data ?? [], null);
        $this->setIfExists('deployBranch', $data ?? [], null);
        $this->setIfExists('deployDir', $data ?? [], null);
        $this->setIfExists('keyfile', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('remote', $data ?? [], null);
        $this->setIfExists('url', $data ?? [], null);
        $this->setIfExists('uuid', $data ?? [], null);
        $this->setIfExists('valid', $data ?? [], null);
        $this->setIfExists('webhookUrl', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['branches'] === null) {
            $invalidProperties[] = "'branches' can't be null";
        }
        if ($this->container['deployBranch'] === null) {
            $invalidProperties[] = "'deployBranch' can't be null";
        }
        if ($this->container['deployDir'] === null) {
            $invalidProperties[] = "'deployDir' can't be null";
        }
        if ($this->container['keyfile'] === null) {
            $invalidProperties[] = "'keyfile' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['remote'] === null) {
            $invalidProperties[] = "'remote' can't be null";
        }
        if ($this->container['url'] === null) {
            $invalidProperties[] = "'url' can't be null";
        }
        if ($this->container['uuid'] === null) {
            $invalidProperties[] = "'uuid' can't be null";
        }
        if ($this->container['valid'] === null) {
            $invalidProperties[] = "'valid' can't be null";
        }
        if ($this->container['webhookUrl'] === null) {
            $invalidProperties[] = "'webhookUrl' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets branches
     *
     * @return string[]
     */
    public function getBranches()
    {
        return $this->container['branches'];
    }

    /**
     * Sets branches
     *
     * @param string[] $branches branches
     *
     * @return self
     */
    public function setBranches($branches)
    {
        if (is_null($branches)) {
            throw new \InvalidArgumentException('non-nullable branches cannot be null');
        }
        $this->container['branches'] = $branches;

        return $this;
    }

    /**
     * Gets deployBranch
     *
     * @return string
     */
    public function getDeployBranch()
    {
        return $this->container['deployBranch'];
    }

    /**
     * Sets deployBranch
     *
     * @param string $deployBranch deployBranch
     *
     * @return self
     */
    public function setDeployBranch($deployBranch)
    {
        if (is_null($deployBranch)) {
            throw new \InvalidArgumentException('non-nullable deployBranch cannot be null');
        }
        $this->container['deployBranch'] = $deployBranch;

        return $this;
    }

    /**
     * Gets deployDir
     *
     * @return string
     */
    public function getDeployDir()
    {
        return $this->container['deployDir'];
    }

    /**
     * Sets deployDir
     *
     * @param string $deployDir deployDir
     *
     * @return self
     */
    public function setDeployDir($deployDir)
    {
        if (is_null($deployDir)) {
            throw new \InvalidArgumentException('non-nullable deployDir cannot be null');
        }
        $this->container['deployDir'] = $deployDir;

        return $this;
    }

    /**
     * Gets keyfile
     *
     * @return string
     */
    public function getKeyfile()
    {
        return $this->container['keyfile'];
    }

    /**
     * Sets keyfile
     *
     * @param string $keyfile keyfile
     *
     * @return self
     */
    public function setKeyfile($keyfile)
    {
        if (is_null($keyfile)) {
            throw new \InvalidArgumentException('non-nullable keyfile cannot be null');
        }
        $this->container['keyfile'] = $keyfile;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets remote
     *
     * @return string
     */
    public function getRemote()
    {
        return $this->container['remote'];
    }

    /**
     * Sets remote
     *
     * @param string $remote remote
     *
     * @return self
     */
    public function setRemote($remote)
    {
        if (is_null($remote)) {
            throw new \InvalidArgumentException('non-nullable remote cannot be null');
        }
        $this->container['remote'] = $remote;

        return $this;
    }

    /**
     * Gets url
     *
     * @return string
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string $url url
     *
     * @return self
     */
    public function setUrl($url)
    {
        if (is_null($url)) {
            throw new \InvalidArgumentException('non-nullable url cannot be null');
        }
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets uuid
     *
     * @return string
     */
    public function getUuid()
    {
        return $this->container['uuid'];
    }

    /**
     * Sets uuid
     *
     * @param string $uuid uuid
     *
     * @return self
     */
    public function setUuid($uuid)
    {
        if (is_null($uuid)) {
            throw new \InvalidArgumentException('non-nullable uuid cannot be null');
        }
        $this->container['uuid'] = $uuid;

        return $this;
    }

    /**
     * Gets valid
     *
     * @return bool
     */
    public function getValid()
    {
        return $this->container['valid'];
    }

    /**
     * Sets valid
     *
     * @param bool $valid valid
     *
     * @return self
     */
    public function setValid($valid)
    {
        if (is_null($valid)) {
            throw new \InvalidArgumentException('non-nullable valid cannot be null');
        }
        $this->container['valid'] = $valid;

        return $this;
    }

    /**
     * Gets webhookUrl
     *
     * @return string
     */
    public function getWebhookUrl()
    {
        return $this->container['webhookUrl'];
    }

    /**
     * Sets webhookUrl
     *
     * @param string $webhookUrl webhookUrl
     *
     * @return self
     */
    public function setWebhookUrl($webhookUrl)
    {
        if (is_null($webhookUrl)) {
            throw new \InvalidArgumentException('non-nullable webhookUrl cannot be null');
        }
        $this->container['webhookUrl'] = $webhookUrl;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


