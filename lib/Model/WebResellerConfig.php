<?php
/**
 * WebResellerConfig
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  COMPITAUT\DirectAdminAPI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Swagger DirectAdmin API
 *
 * Swagger API for DirectAdmin server
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@directadmin.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace COMPITAUT\DirectAdminAPI\Model;

use \ArrayAccess;
use \COMPITAUT\DirectAdminAPI\ObjectSerializer;

/**
 * WebResellerConfig Class Doc Comment
 *
 * @category Class
 * @package  COMPITAUT\DirectAdminAPI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class WebResellerConfig implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'web.resellerConfig';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'aftp' => 'bool',
        'autorespondersLimit' => 'int',
        'bandwidthLimit' => 'float',
        'catchAll' => 'bool',
        'cgi' => 'bool',
        'clamav' => 'bool',
        'cpuQuota' => 'string',
        'cron' => 'bool',
        'dnsControl' => 'bool',
        'domainPointersLimit' => 'int',
        'domainsLimit' => 'int',
        'emailAccountsLimit' => 'int',
        'emailForwardersLimit' => 'int',
        'ftpAccountsLimit' => 'int',
        'git' => 'bool',
        'inodeLimit' => 'int',
        'ioReadBandwidthMax' => 'string',
        'ioReadIOPSMax' => 'string',
        'ioWriteBandwidthMax' => 'string',
        'ioWriteIOPSMax' => 'string',
        'loginKeys' => 'bool',
        'mailingListsLimit' => 'int',
        'memoryHigh' => 'string',
        'memoryMax' => 'string',
        'mysqlDatabasesLimit' => 'int',
        'nginxUnit' => 'bool',
        'php' => 'bool',
        'quotaLimit' => 'float',
        'redis' => 'bool',
        'spam' => 'bool',
        'ssl' => 'bool',
        'subdomainsLimit' => 'int',
        'sysInfo' => 'bool',
        'tasksMax' => 'string',
        'userSsh' => 'bool',
        'usersLimit' => 'int',
        'wordpress' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'aftp' => null,
        'autorespondersLimit' => null,
        'bandwidthLimit' => null,
        'catchAll' => null,
        'cgi' => null,
        'clamav' => null,
        'cpuQuota' => null,
        'cron' => null,
        'dnsControl' => null,
        'domainPointersLimit' => null,
        'domainsLimit' => null,
        'emailAccountsLimit' => null,
        'emailForwardersLimit' => null,
        'ftpAccountsLimit' => null,
        'git' => null,
        'inodeLimit' => null,
        'ioReadBandwidthMax' => null,
        'ioReadIOPSMax' => null,
        'ioWriteBandwidthMax' => null,
        'ioWriteIOPSMax' => null,
        'loginKeys' => null,
        'mailingListsLimit' => null,
        'memoryHigh' => null,
        'memoryMax' => null,
        'mysqlDatabasesLimit' => null,
        'nginxUnit' => null,
        'php' => null,
        'quotaLimit' => null,
        'redis' => null,
        'spam' => null,
        'ssl' => null,
        'subdomainsLimit' => null,
        'sysInfo' => null,
        'tasksMax' => null,
        'userSsh' => null,
        'usersLimit' => null,
        'wordpress' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'aftp' => false,
        'autorespondersLimit' => false,
        'bandwidthLimit' => false,
        'catchAll' => false,
        'cgi' => false,
        'clamav' => false,
        'cpuQuota' => false,
        'cron' => false,
        'dnsControl' => false,
        'domainPointersLimit' => false,
        'domainsLimit' => false,
        'emailAccountsLimit' => false,
        'emailForwardersLimit' => false,
        'ftpAccountsLimit' => false,
        'git' => false,
        'inodeLimit' => false,
        'ioReadBandwidthMax' => false,
        'ioReadIOPSMax' => false,
        'ioWriteBandwidthMax' => false,
        'ioWriteIOPSMax' => false,
        'loginKeys' => false,
        'mailingListsLimit' => false,
        'memoryHigh' => false,
        'memoryMax' => false,
        'mysqlDatabasesLimit' => false,
        'nginxUnit' => false,
        'php' => false,
        'quotaLimit' => false,
        'redis' => false,
        'spam' => false,
        'ssl' => false,
        'subdomainsLimit' => false,
        'sysInfo' => false,
        'tasksMax' => false,
        'userSsh' => false,
        'usersLimit' => false,
        'wordpress' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'aftp' => 'aftp',
        'autorespondersLimit' => 'autorespondersLimit',
        'bandwidthLimit' => 'bandwidthLimit',
        'catchAll' => 'catchAll',
        'cgi' => 'cgi',
        'clamav' => 'clamav',
        'cpuQuota' => 'cpuQuota',
        'cron' => 'cron',
        'dnsControl' => 'dnsControl',
        'domainPointersLimit' => 'domainPointersLimit',
        'domainsLimit' => 'domainsLimit',
        'emailAccountsLimit' => 'emailAccountsLimit',
        'emailForwardersLimit' => 'emailForwardersLimit',
        'ftpAccountsLimit' => 'ftpAccountsLimit',
        'git' => 'git',
        'inodeLimit' => 'inodeLimit',
        'ioReadBandwidthMax' => 'ioReadBandwidthMax',
        'ioReadIOPSMax' => 'ioReadIOPSMax',
        'ioWriteBandwidthMax' => 'ioWriteBandwidthMax',
        'ioWriteIOPSMax' => 'ioWriteIOPSMax',
        'loginKeys' => 'loginKeys',
        'mailingListsLimit' => 'mailingListsLimit',
        'memoryHigh' => 'memoryHigh',
        'memoryMax' => 'memoryMax',
        'mysqlDatabasesLimit' => 'mysqlDatabasesLimit',
        'nginxUnit' => 'nginxUnit',
        'php' => 'php',
        'quotaLimit' => 'quotaLimit',
        'redis' => 'redis',
        'spam' => 'spam',
        'ssl' => 'ssl',
        'subdomainsLimit' => 'subdomainsLimit',
        'sysInfo' => 'sysInfo',
        'tasksMax' => 'tasksMax',
        'userSsh' => 'userSsh',
        'usersLimit' => 'usersLimit',
        'wordpress' => 'wordpress'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'aftp' => 'setAftp',
        'autorespondersLimit' => 'setAutorespondersLimit',
        'bandwidthLimit' => 'setBandwidthLimit',
        'catchAll' => 'setCatchAll',
        'cgi' => 'setCgi',
        'clamav' => 'setClamav',
        'cpuQuota' => 'setCpuQuota',
        'cron' => 'setCron',
        'dnsControl' => 'setDnsControl',
        'domainPointersLimit' => 'setDomainPointersLimit',
        'domainsLimit' => 'setDomainsLimit',
        'emailAccountsLimit' => 'setEmailAccountsLimit',
        'emailForwardersLimit' => 'setEmailForwardersLimit',
        'ftpAccountsLimit' => 'setFtpAccountsLimit',
        'git' => 'setGit',
        'inodeLimit' => 'setInodeLimit',
        'ioReadBandwidthMax' => 'setIoReadBandwidthMax',
        'ioReadIOPSMax' => 'setIoReadIOPSMax',
        'ioWriteBandwidthMax' => 'setIoWriteBandwidthMax',
        'ioWriteIOPSMax' => 'setIoWriteIOPSMax',
        'loginKeys' => 'setLoginKeys',
        'mailingListsLimit' => 'setMailingListsLimit',
        'memoryHigh' => 'setMemoryHigh',
        'memoryMax' => 'setMemoryMax',
        'mysqlDatabasesLimit' => 'setMysqlDatabasesLimit',
        'nginxUnit' => 'setNginxUnit',
        'php' => 'setPhp',
        'quotaLimit' => 'setQuotaLimit',
        'redis' => 'setRedis',
        'spam' => 'setSpam',
        'ssl' => 'setSsl',
        'subdomainsLimit' => 'setSubdomainsLimit',
        'sysInfo' => 'setSysInfo',
        'tasksMax' => 'setTasksMax',
        'userSsh' => 'setUserSsh',
        'usersLimit' => 'setUsersLimit',
        'wordpress' => 'setWordpress'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'aftp' => 'getAftp',
        'autorespondersLimit' => 'getAutorespondersLimit',
        'bandwidthLimit' => 'getBandwidthLimit',
        'catchAll' => 'getCatchAll',
        'cgi' => 'getCgi',
        'clamav' => 'getClamav',
        'cpuQuota' => 'getCpuQuota',
        'cron' => 'getCron',
        'dnsControl' => 'getDnsControl',
        'domainPointersLimit' => 'getDomainPointersLimit',
        'domainsLimit' => 'getDomainsLimit',
        'emailAccountsLimit' => 'getEmailAccountsLimit',
        'emailForwardersLimit' => 'getEmailForwardersLimit',
        'ftpAccountsLimit' => 'getFtpAccountsLimit',
        'git' => 'getGit',
        'inodeLimit' => 'getInodeLimit',
        'ioReadBandwidthMax' => 'getIoReadBandwidthMax',
        'ioReadIOPSMax' => 'getIoReadIOPSMax',
        'ioWriteBandwidthMax' => 'getIoWriteBandwidthMax',
        'ioWriteIOPSMax' => 'getIoWriteIOPSMax',
        'loginKeys' => 'getLoginKeys',
        'mailingListsLimit' => 'getMailingListsLimit',
        'memoryHigh' => 'getMemoryHigh',
        'memoryMax' => 'getMemoryMax',
        'mysqlDatabasesLimit' => 'getMysqlDatabasesLimit',
        'nginxUnit' => 'getNginxUnit',
        'php' => 'getPhp',
        'quotaLimit' => 'getQuotaLimit',
        'redis' => 'getRedis',
        'spam' => 'getSpam',
        'ssl' => 'getSsl',
        'subdomainsLimit' => 'getSubdomainsLimit',
        'sysInfo' => 'getSysInfo',
        'tasksMax' => 'getTasksMax',
        'userSsh' => 'getUserSsh',
        'usersLimit' => 'getUsersLimit',
        'wordpress' => 'getWordpress'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('aftp', $data ?? [], null);
        $this->setIfExists('autorespondersLimit', $data ?? [], null);
        $this->setIfExists('bandwidthLimit', $data ?? [], null);
        $this->setIfExists('catchAll', $data ?? [], null);
        $this->setIfExists('cgi', $data ?? [], null);
        $this->setIfExists('clamav', $data ?? [], null);
        $this->setIfExists('cpuQuota', $data ?? [], null);
        $this->setIfExists('cron', $data ?? [], null);
        $this->setIfExists('dnsControl', $data ?? [], null);
        $this->setIfExists('domainPointersLimit', $data ?? [], null);
        $this->setIfExists('domainsLimit', $data ?? [], null);
        $this->setIfExists('emailAccountsLimit', $data ?? [], null);
        $this->setIfExists('emailForwardersLimit', $data ?? [], null);
        $this->setIfExists('ftpAccountsLimit', $data ?? [], null);
        $this->setIfExists('git', $data ?? [], null);
        $this->setIfExists('inodeLimit', $data ?? [], null);
        $this->setIfExists('ioReadBandwidthMax', $data ?? [], null);
        $this->setIfExists('ioReadIOPSMax', $data ?? [], null);
        $this->setIfExists('ioWriteBandwidthMax', $data ?? [], null);
        $this->setIfExists('ioWriteIOPSMax', $data ?? [], null);
        $this->setIfExists('loginKeys', $data ?? [], null);
        $this->setIfExists('mailingListsLimit', $data ?? [], null);
        $this->setIfExists('memoryHigh', $data ?? [], null);
        $this->setIfExists('memoryMax', $data ?? [], null);
        $this->setIfExists('mysqlDatabasesLimit', $data ?? [], null);
        $this->setIfExists('nginxUnit', $data ?? [], null);
        $this->setIfExists('php', $data ?? [], null);
        $this->setIfExists('quotaLimit', $data ?? [], null);
        $this->setIfExists('redis', $data ?? [], null);
        $this->setIfExists('spam', $data ?? [], null);
        $this->setIfExists('ssl', $data ?? [], null);
        $this->setIfExists('subdomainsLimit', $data ?? [], null);
        $this->setIfExists('sysInfo', $data ?? [], null);
        $this->setIfExists('tasksMax', $data ?? [], null);
        $this->setIfExists('userSsh', $data ?? [], null);
        $this->setIfExists('usersLimit', $data ?? [], null);
        $this->setIfExists('wordpress', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['aftp'] === null) {
            $invalidProperties[] = "'aftp' can't be null";
        }
        if ($this->container['autorespondersLimit'] === null) {
            $invalidProperties[] = "'autorespondersLimit' can't be null";
        }
        if ($this->container['bandwidthLimit'] === null) {
            $invalidProperties[] = "'bandwidthLimit' can't be null";
        }
        if ($this->container['catchAll'] === null) {
            $invalidProperties[] = "'catchAll' can't be null";
        }
        if ($this->container['cgi'] === null) {
            $invalidProperties[] = "'cgi' can't be null";
        }
        if ($this->container['clamav'] === null) {
            $invalidProperties[] = "'clamav' can't be null";
        }
        if ($this->container['cron'] === null) {
            $invalidProperties[] = "'cron' can't be null";
        }
        if ($this->container['dnsControl'] === null) {
            $invalidProperties[] = "'dnsControl' can't be null";
        }
        if ($this->container['domainPointersLimit'] === null) {
            $invalidProperties[] = "'domainPointersLimit' can't be null";
        }
        if ($this->container['domainsLimit'] === null) {
            $invalidProperties[] = "'domainsLimit' can't be null";
        }
        if ($this->container['emailAccountsLimit'] === null) {
            $invalidProperties[] = "'emailAccountsLimit' can't be null";
        }
        if ($this->container['emailForwardersLimit'] === null) {
            $invalidProperties[] = "'emailForwardersLimit' can't be null";
        }
        if ($this->container['ftpAccountsLimit'] === null) {
            $invalidProperties[] = "'ftpAccountsLimit' can't be null";
        }
        if ($this->container['git'] === null) {
            $invalidProperties[] = "'git' can't be null";
        }
        if ($this->container['inodeLimit'] === null) {
            $invalidProperties[] = "'inodeLimit' can't be null";
        }
        if ($this->container['loginKeys'] === null) {
            $invalidProperties[] = "'loginKeys' can't be null";
        }
        if ($this->container['mailingListsLimit'] === null) {
            $invalidProperties[] = "'mailingListsLimit' can't be null";
        }
        if ($this->container['mysqlDatabasesLimit'] === null) {
            $invalidProperties[] = "'mysqlDatabasesLimit' can't be null";
        }
        if ($this->container['nginxUnit'] === null) {
            $invalidProperties[] = "'nginxUnit' can't be null";
        }
        if ($this->container['php'] === null) {
            $invalidProperties[] = "'php' can't be null";
        }
        if ($this->container['quotaLimit'] === null) {
            $invalidProperties[] = "'quotaLimit' can't be null";
        }
        if ($this->container['redis'] === null) {
            $invalidProperties[] = "'redis' can't be null";
        }
        if ($this->container['spam'] === null) {
            $invalidProperties[] = "'spam' can't be null";
        }
        if ($this->container['ssl'] === null) {
            $invalidProperties[] = "'ssl' can't be null";
        }
        if ($this->container['subdomainsLimit'] === null) {
            $invalidProperties[] = "'subdomainsLimit' can't be null";
        }
        if ($this->container['sysInfo'] === null) {
            $invalidProperties[] = "'sysInfo' can't be null";
        }
        if ($this->container['userSsh'] === null) {
            $invalidProperties[] = "'userSsh' can't be null";
        }
        if ($this->container['usersLimit'] === null) {
            $invalidProperties[] = "'usersLimit' can't be null";
        }
        if ($this->container['wordpress'] === null) {
            $invalidProperties[] = "'wordpress' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets aftp
     *
     * @return bool
     */
    public function getAftp()
    {
        return $this->container['aftp'];
    }

    /**
     * Sets aftp
     *
     * @param bool $aftp aftp
     *
     * @return self
     */
    public function setAftp($aftp)
    {
        if (is_null($aftp)) {
            throw new \InvalidArgumentException('non-nullable aftp cannot be null');
        }
        $this->container['aftp'] = $aftp;

        return $this;
    }

    /**
     * Gets autorespondersLimit
     *
     * @return int
     */
    public function getAutorespondersLimit()
    {
        return $this->container['autorespondersLimit'];
    }

    /**
     * Sets autorespondersLimit
     *
     * @param int $autorespondersLimit autorespondersLimit
     *
     * @return self
     */
    public function setAutorespondersLimit($autorespondersLimit)
    {
        if (is_null($autorespondersLimit)) {
            throw new \InvalidArgumentException('non-nullable autorespondersLimit cannot be null');
        }
        $this->container['autorespondersLimit'] = $autorespondersLimit;

        return $this;
    }

    /**
     * Gets bandwidthLimit
     *
     * @return float
     */
    public function getBandwidthLimit()
    {
        return $this->container['bandwidthLimit'];
    }

    /**
     * Sets bandwidthLimit
     *
     * @param float $bandwidthLimit bandwidthLimit
     *
     * @return self
     */
    public function setBandwidthLimit($bandwidthLimit)
    {
        if (is_null($bandwidthLimit)) {
            throw new \InvalidArgumentException('non-nullable bandwidthLimit cannot be null');
        }
        $this->container['bandwidthLimit'] = $bandwidthLimit;

        return $this;
    }

    /**
     * Gets catchAll
     *
     * @return bool
     */
    public function getCatchAll()
    {
        return $this->container['catchAll'];
    }

    /**
     * Sets catchAll
     *
     * @param bool $catchAll catchAll
     *
     * @return self
     */
    public function setCatchAll($catchAll)
    {
        if (is_null($catchAll)) {
            throw new \InvalidArgumentException('non-nullable catchAll cannot be null');
        }
        $this->container['catchAll'] = $catchAll;

        return $this;
    }

    /**
     * Gets cgi
     *
     * @return bool
     */
    public function getCgi()
    {
        return $this->container['cgi'];
    }

    /**
     * Sets cgi
     *
     * @param bool $cgi cgi
     *
     * @return self
     */
    public function setCgi($cgi)
    {
        if (is_null($cgi)) {
            throw new \InvalidArgumentException('non-nullable cgi cannot be null');
        }
        $this->container['cgi'] = $cgi;

        return $this;
    }

    /**
     * Gets clamav
     *
     * @return bool
     */
    public function getClamav()
    {
        return $this->container['clamav'];
    }

    /**
     * Sets clamav
     *
     * @param bool $clamav clamav
     *
     * @return self
     */
    public function setClamav($clamav)
    {
        if (is_null($clamav)) {
            throw new \InvalidArgumentException('non-nullable clamav cannot be null');
        }
        $this->container['clamav'] = $clamav;

        return $this;
    }

    /**
     * Gets cpuQuota
     *
     * @return string|null
     */
    public function getCpuQuota()
    {
        return $this->container['cpuQuota'];
    }

    /**
     * Sets cpuQuota
     *
     * @param string|null $cpuQuota cpuQuota
     *
     * @return self
     */
    public function setCpuQuota($cpuQuota)
    {
        if (is_null($cpuQuota)) {
            throw new \InvalidArgumentException('non-nullable cpuQuota cannot be null');
        }
        $this->container['cpuQuota'] = $cpuQuota;

        return $this;
    }

    /**
     * Gets cron
     *
     * @return bool
     */
    public function getCron()
    {
        return $this->container['cron'];
    }

    /**
     * Sets cron
     *
     * @param bool $cron cron
     *
     * @return self
     */
    public function setCron($cron)
    {
        if (is_null($cron)) {
            throw new \InvalidArgumentException('non-nullable cron cannot be null');
        }
        $this->container['cron'] = $cron;

        return $this;
    }

    /**
     * Gets dnsControl
     *
     * @return bool
     */
    public function getDnsControl()
    {
        return $this->container['dnsControl'];
    }

    /**
     * Sets dnsControl
     *
     * @param bool $dnsControl dnsControl
     *
     * @return self
     */
    public function setDnsControl($dnsControl)
    {
        if (is_null($dnsControl)) {
            throw new \InvalidArgumentException('non-nullable dnsControl cannot be null');
        }
        $this->container['dnsControl'] = $dnsControl;

        return $this;
    }

    /**
     * Gets domainPointersLimit
     *
     * @return int
     */
    public function getDomainPointersLimit()
    {
        return $this->container['domainPointersLimit'];
    }

    /**
     * Sets domainPointersLimit
     *
     * @param int $domainPointersLimit domainPointersLimit
     *
     * @return self
     */
    public function setDomainPointersLimit($domainPointersLimit)
    {
        if (is_null($domainPointersLimit)) {
            throw new \InvalidArgumentException('non-nullable domainPointersLimit cannot be null');
        }
        $this->container['domainPointersLimit'] = $domainPointersLimit;

        return $this;
    }

    /**
     * Gets domainsLimit
     *
     * @return int
     */
    public function getDomainsLimit()
    {
        return $this->container['domainsLimit'];
    }

    /**
     * Sets domainsLimit
     *
     * @param int $domainsLimit domainsLimit
     *
     * @return self
     */
    public function setDomainsLimit($domainsLimit)
    {
        if (is_null($domainsLimit)) {
            throw new \InvalidArgumentException('non-nullable domainsLimit cannot be null');
        }
        $this->container['domainsLimit'] = $domainsLimit;

        return $this;
    }

    /**
     * Gets emailAccountsLimit
     *
     * @return int
     */
    public function getEmailAccountsLimit()
    {
        return $this->container['emailAccountsLimit'];
    }

    /**
     * Sets emailAccountsLimit
     *
     * @param int $emailAccountsLimit emailAccountsLimit
     *
     * @return self
     */
    public function setEmailAccountsLimit($emailAccountsLimit)
    {
        if (is_null($emailAccountsLimit)) {
            throw new \InvalidArgumentException('non-nullable emailAccountsLimit cannot be null');
        }
        $this->container['emailAccountsLimit'] = $emailAccountsLimit;

        return $this;
    }

    /**
     * Gets emailForwardersLimit
     *
     * @return int
     */
    public function getEmailForwardersLimit()
    {
        return $this->container['emailForwardersLimit'];
    }

    /**
     * Sets emailForwardersLimit
     *
     * @param int $emailForwardersLimit emailForwardersLimit
     *
     * @return self
     */
    public function setEmailForwardersLimit($emailForwardersLimit)
    {
        if (is_null($emailForwardersLimit)) {
            throw new \InvalidArgumentException('non-nullable emailForwardersLimit cannot be null');
        }
        $this->container['emailForwardersLimit'] = $emailForwardersLimit;

        return $this;
    }

    /**
     * Gets ftpAccountsLimit
     *
     * @return int
     */
    public function getFtpAccountsLimit()
    {
        return $this->container['ftpAccountsLimit'];
    }

    /**
     * Sets ftpAccountsLimit
     *
     * @param int $ftpAccountsLimit ftpAccountsLimit
     *
     * @return self
     */
    public function setFtpAccountsLimit($ftpAccountsLimit)
    {
        if (is_null($ftpAccountsLimit)) {
            throw new \InvalidArgumentException('non-nullable ftpAccountsLimit cannot be null');
        }
        $this->container['ftpAccountsLimit'] = $ftpAccountsLimit;

        return $this;
    }

    /**
     * Gets git
     *
     * @return bool
     */
    public function getGit()
    {
        return $this->container['git'];
    }

    /**
     * Sets git
     *
     * @param bool $git git
     *
     * @return self
     */
    public function setGit($git)
    {
        if (is_null($git)) {
            throw new \InvalidArgumentException('non-nullable git cannot be null');
        }
        $this->container['git'] = $git;

        return $this;
    }

    /**
     * Gets inodeLimit
     *
     * @return int
     */
    public function getInodeLimit()
    {
        return $this->container['inodeLimit'];
    }

    /**
     * Sets inodeLimit
     *
     * @param int $inodeLimit inodeLimit
     *
     * @return self
     */
    public function setInodeLimit($inodeLimit)
    {
        if (is_null($inodeLimit)) {
            throw new \InvalidArgumentException('non-nullable inodeLimit cannot be null');
        }
        $this->container['inodeLimit'] = $inodeLimit;

        return $this;
    }

    /**
     * Gets ioReadBandwidthMax
     *
     * @return string|null
     */
    public function getIoReadBandwidthMax()
    {
        return $this->container['ioReadBandwidthMax'];
    }

    /**
     * Sets ioReadBandwidthMax
     *
     * @param string|null $ioReadBandwidthMax ioReadBandwidthMax
     *
     * @return self
     */
    public function setIoReadBandwidthMax($ioReadBandwidthMax)
    {
        if (is_null($ioReadBandwidthMax)) {
            throw new \InvalidArgumentException('non-nullable ioReadBandwidthMax cannot be null');
        }
        $this->container['ioReadBandwidthMax'] = $ioReadBandwidthMax;

        return $this;
    }

    /**
     * Gets ioReadIOPSMax
     *
     * @return string|null
     */
    public function getIoReadIOPSMax()
    {
        return $this->container['ioReadIOPSMax'];
    }

    /**
     * Sets ioReadIOPSMax
     *
     * @param string|null $ioReadIOPSMax ioReadIOPSMax
     *
     * @return self
     */
    public function setIoReadIOPSMax($ioReadIOPSMax)
    {
        if (is_null($ioReadIOPSMax)) {
            throw new \InvalidArgumentException('non-nullable ioReadIOPSMax cannot be null');
        }
        $this->container['ioReadIOPSMax'] = $ioReadIOPSMax;

        return $this;
    }

    /**
     * Gets ioWriteBandwidthMax
     *
     * @return string|null
     */
    public function getIoWriteBandwidthMax()
    {
        return $this->container['ioWriteBandwidthMax'];
    }

    /**
     * Sets ioWriteBandwidthMax
     *
     * @param string|null $ioWriteBandwidthMax ioWriteBandwidthMax
     *
     * @return self
     */
    public function setIoWriteBandwidthMax($ioWriteBandwidthMax)
    {
        if (is_null($ioWriteBandwidthMax)) {
            throw new \InvalidArgumentException('non-nullable ioWriteBandwidthMax cannot be null');
        }
        $this->container['ioWriteBandwidthMax'] = $ioWriteBandwidthMax;

        return $this;
    }

    /**
     * Gets ioWriteIOPSMax
     *
     * @return string|null
     */
    public function getIoWriteIOPSMax()
    {
        return $this->container['ioWriteIOPSMax'];
    }

    /**
     * Sets ioWriteIOPSMax
     *
     * @param string|null $ioWriteIOPSMax ioWriteIOPSMax
     *
     * @return self
     */
    public function setIoWriteIOPSMax($ioWriteIOPSMax)
    {
        if (is_null($ioWriteIOPSMax)) {
            throw new \InvalidArgumentException('non-nullable ioWriteIOPSMax cannot be null');
        }
        $this->container['ioWriteIOPSMax'] = $ioWriteIOPSMax;

        return $this;
    }

    /**
     * Gets loginKeys
     *
     * @return bool
     */
    public function getLoginKeys()
    {
        return $this->container['loginKeys'];
    }

    /**
     * Sets loginKeys
     *
     * @param bool $loginKeys loginKeys
     *
     * @return self
     */
    public function setLoginKeys($loginKeys)
    {
        if (is_null($loginKeys)) {
            throw new \InvalidArgumentException('non-nullable loginKeys cannot be null');
        }
        $this->container['loginKeys'] = $loginKeys;

        return $this;
    }

    /**
     * Gets mailingListsLimit
     *
     * @return int
     */
    public function getMailingListsLimit()
    {
        return $this->container['mailingListsLimit'];
    }

    /**
     * Sets mailingListsLimit
     *
     * @param int $mailingListsLimit mailingListsLimit
     *
     * @return self
     */
    public function setMailingListsLimit($mailingListsLimit)
    {
        if (is_null($mailingListsLimit)) {
            throw new \InvalidArgumentException('non-nullable mailingListsLimit cannot be null');
        }
        $this->container['mailingListsLimit'] = $mailingListsLimit;

        return $this;
    }

    /**
     * Gets memoryHigh
     *
     * @return string|null
     */
    public function getMemoryHigh()
    {
        return $this->container['memoryHigh'];
    }

    /**
     * Sets memoryHigh
     *
     * @param string|null $memoryHigh memoryHigh
     *
     * @return self
     */
    public function setMemoryHigh($memoryHigh)
    {
        if (is_null($memoryHigh)) {
            throw new \InvalidArgumentException('non-nullable memoryHigh cannot be null');
        }
        $this->container['memoryHigh'] = $memoryHigh;

        return $this;
    }

    /**
     * Gets memoryMax
     *
     * @return string|null
     */
    public function getMemoryMax()
    {
        return $this->container['memoryMax'];
    }

    /**
     * Sets memoryMax
     *
     * @param string|null $memoryMax memoryMax
     *
     * @return self
     */
    public function setMemoryMax($memoryMax)
    {
        if (is_null($memoryMax)) {
            throw new \InvalidArgumentException('non-nullable memoryMax cannot be null');
        }
        $this->container['memoryMax'] = $memoryMax;

        return $this;
    }

    /**
     * Gets mysqlDatabasesLimit
     *
     * @return int
     */
    public function getMysqlDatabasesLimit()
    {
        return $this->container['mysqlDatabasesLimit'];
    }

    /**
     * Sets mysqlDatabasesLimit
     *
     * @param int $mysqlDatabasesLimit mysqlDatabasesLimit
     *
     * @return self
     */
    public function setMysqlDatabasesLimit($mysqlDatabasesLimit)
    {
        if (is_null($mysqlDatabasesLimit)) {
            throw new \InvalidArgumentException('non-nullable mysqlDatabasesLimit cannot be null');
        }
        $this->container['mysqlDatabasesLimit'] = $mysqlDatabasesLimit;

        return $this;
    }

    /**
     * Gets nginxUnit
     *
     * @return bool
     */
    public function getNginxUnit()
    {
        return $this->container['nginxUnit'];
    }

    /**
     * Sets nginxUnit
     *
     * @param bool $nginxUnit nginxUnit
     *
     * @return self
     */
    public function setNginxUnit($nginxUnit)
    {
        if (is_null($nginxUnit)) {
            throw new \InvalidArgumentException('non-nullable nginxUnit cannot be null');
        }
        $this->container['nginxUnit'] = $nginxUnit;

        return $this;
    }

    /**
     * Gets php
     *
     * @return bool
     */
    public function getPhp()
    {
        return $this->container['php'];
    }

    /**
     * Sets php
     *
     * @param bool $php php
     *
     * @return self
     */
    public function setPhp($php)
    {
        if (is_null($php)) {
            throw new \InvalidArgumentException('non-nullable php cannot be null');
        }
        $this->container['php'] = $php;

        return $this;
    }

    /**
     * Gets quotaLimit
     *
     * @return float
     */
    public function getQuotaLimit()
    {
        return $this->container['quotaLimit'];
    }

    /**
     * Sets quotaLimit
     *
     * @param float $quotaLimit quotaLimit
     *
     * @return self
     */
    public function setQuotaLimit($quotaLimit)
    {
        if (is_null($quotaLimit)) {
            throw new \InvalidArgumentException('non-nullable quotaLimit cannot be null');
        }
        $this->container['quotaLimit'] = $quotaLimit;

        return $this;
    }

    /**
     * Gets redis
     *
     * @return bool
     */
    public function getRedis()
    {
        return $this->container['redis'];
    }

    /**
     * Sets redis
     *
     * @param bool $redis redis
     *
     * @return self
     */
    public function setRedis($redis)
    {
        if (is_null($redis)) {
            throw new \InvalidArgumentException('non-nullable redis cannot be null');
        }
        $this->container['redis'] = $redis;

        return $this;
    }

    /**
     * Gets spam
     *
     * @return bool
     */
    public function getSpam()
    {
        return $this->container['spam'];
    }

    /**
     * Sets spam
     *
     * @param bool $spam spam
     *
     * @return self
     */
    public function setSpam($spam)
    {
        if (is_null($spam)) {
            throw new \InvalidArgumentException('non-nullable spam cannot be null');
        }
        $this->container['spam'] = $spam;

        return $this;
    }

    /**
     * Gets ssl
     *
     * @return bool
     */
    public function getSsl()
    {
        return $this->container['ssl'];
    }

    /**
     * Sets ssl
     *
     * @param bool $ssl ssl
     *
     * @return self
     */
    public function setSsl($ssl)
    {
        if (is_null($ssl)) {
            throw new \InvalidArgumentException('non-nullable ssl cannot be null');
        }
        $this->container['ssl'] = $ssl;

        return $this;
    }

    /**
     * Gets subdomainsLimit
     *
     * @return int
     */
    public function getSubdomainsLimit()
    {
        return $this->container['subdomainsLimit'];
    }

    /**
     * Sets subdomainsLimit
     *
     * @param int $subdomainsLimit subdomainsLimit
     *
     * @return self
     */
    public function setSubdomainsLimit($subdomainsLimit)
    {
        if (is_null($subdomainsLimit)) {
            throw new \InvalidArgumentException('non-nullable subdomainsLimit cannot be null');
        }
        $this->container['subdomainsLimit'] = $subdomainsLimit;

        return $this;
    }

    /**
     * Gets sysInfo
     *
     * @return bool
     */
    public function getSysInfo()
    {
        return $this->container['sysInfo'];
    }

    /**
     * Sets sysInfo
     *
     * @param bool $sysInfo sysInfo
     *
     * @return self
     */
    public function setSysInfo($sysInfo)
    {
        if (is_null($sysInfo)) {
            throw new \InvalidArgumentException('non-nullable sysInfo cannot be null');
        }
        $this->container['sysInfo'] = $sysInfo;

        return $this;
    }

    /**
     * Gets tasksMax
     *
     * @return string|null
     */
    public function getTasksMax()
    {
        return $this->container['tasksMax'];
    }

    /**
     * Sets tasksMax
     *
     * @param string|null $tasksMax tasksMax
     *
     * @return self
     */
    public function setTasksMax($tasksMax)
    {
        if (is_null($tasksMax)) {
            throw new \InvalidArgumentException('non-nullable tasksMax cannot be null');
        }
        $this->container['tasksMax'] = $tasksMax;

        return $this;
    }

    /**
     * Gets userSsh
     *
     * @return bool
     */
    public function getUserSsh()
    {
        return $this->container['userSsh'];
    }

    /**
     * Sets userSsh
     *
     * @param bool $userSsh userSsh
     *
     * @return self
     */
    public function setUserSsh($userSsh)
    {
        if (is_null($userSsh)) {
            throw new \InvalidArgumentException('non-nullable userSsh cannot be null');
        }
        $this->container['userSsh'] = $userSsh;

        return $this;
    }

    /**
     * Gets usersLimit
     *
     * @return int
     */
    public function getUsersLimit()
    {
        return $this->container['usersLimit'];
    }

    /**
     * Sets usersLimit
     *
     * @param int $usersLimit usersLimit
     *
     * @return self
     */
    public function setUsersLimit($usersLimit)
    {
        if (is_null($usersLimit)) {
            throw new \InvalidArgumentException('non-nullable usersLimit cannot be null');
        }
        $this->container['usersLimit'] = $usersLimit;

        return $this;
    }

    /**
     * Gets wordpress
     *
     * @return bool
     */
    public function getWordpress()
    {
        return $this->container['wordpress'];
    }

    /**
     * Sets wordpress
     *
     * @param bool $wordpress wordpress
     *
     * @return self
     */
    public function setWordpress($wordpress)
    {
        if (is_null($wordpress)) {
            throw new \InvalidArgumentException('non-nullable wordpress cannot be null');
        }
        $this->container['wordpress'] = $wordpress;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


