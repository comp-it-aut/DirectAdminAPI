<?php
/**
 * WebDbInfoResponse
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  COMPITAUT\DirectAdminAPI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Swagger DirectAdmin API
 *
 * Swagger API for DirectAdmin server
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@directadmin.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace COMPITAUT\DirectAdminAPI\Model;

use \ArrayAccess;
use \COMPITAUT\DirectAdminAPI\ObjectSerializer;

/**
 * WebDbInfoResponse Class Doc Comment
 *
 * @category Class
 * @package  COMPITAUT\DirectAdminAPI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class WebDbInfoResponse implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'web.dbInfoResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'address' => 'string',
        'defaultHostPatterns' => 'string[]',
        'maxDatabaseLength' => 'int',
        'maxHostsPerUser' => 'int',
        'maxUsernameLength' => 'int',
        'oneClickPhpMyAdminLogin' => 'bool',
        'sqlMode' => 'string[]',
        'unixSocket' => 'bool',
        'version' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'address' => null,
        'defaultHostPatterns' => null,
        'maxDatabaseLength' => null,
        'maxHostsPerUser' => null,
        'maxUsernameLength' => null,
        'oneClickPhpMyAdminLogin' => null,
        'sqlMode' => null,
        'unixSocket' => null,
        'version' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'address' => false,
        'defaultHostPatterns' => false,
        'maxDatabaseLength' => false,
        'maxHostsPerUser' => false,
        'maxUsernameLength' => false,
        'oneClickPhpMyAdminLogin' => false,
        'sqlMode' => false,
        'unixSocket' => false,
        'version' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'address' => 'address',
        'defaultHostPatterns' => 'defaultHostPatterns',
        'maxDatabaseLength' => 'maxDatabaseLength',
        'maxHostsPerUser' => 'maxHostsPerUser',
        'maxUsernameLength' => 'maxUsernameLength',
        'oneClickPhpMyAdminLogin' => 'oneClickPhpMyAdminLogin',
        'sqlMode' => 'sqlMode',
        'unixSocket' => 'unixSocket',
        'version' => 'version'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'address' => 'setAddress',
        'defaultHostPatterns' => 'setDefaultHostPatterns',
        'maxDatabaseLength' => 'setMaxDatabaseLength',
        'maxHostsPerUser' => 'setMaxHostsPerUser',
        'maxUsernameLength' => 'setMaxUsernameLength',
        'oneClickPhpMyAdminLogin' => 'setOneClickPhpMyAdminLogin',
        'sqlMode' => 'setSqlMode',
        'unixSocket' => 'setUnixSocket',
        'version' => 'setVersion'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'address' => 'getAddress',
        'defaultHostPatterns' => 'getDefaultHostPatterns',
        'maxDatabaseLength' => 'getMaxDatabaseLength',
        'maxHostsPerUser' => 'getMaxHostsPerUser',
        'maxUsernameLength' => 'getMaxUsernameLength',
        'oneClickPhpMyAdminLogin' => 'getOneClickPhpMyAdminLogin',
        'sqlMode' => 'getSqlMode',
        'unixSocket' => 'getUnixSocket',
        'version' => 'getVersion'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('address', $data ?? [], null);
        $this->setIfExists('defaultHostPatterns', $data ?? [], null);
        $this->setIfExists('maxDatabaseLength', $data ?? [], null);
        $this->setIfExists('maxHostsPerUser', $data ?? [], null);
        $this->setIfExists('maxUsernameLength', $data ?? [], null);
        $this->setIfExists('oneClickPhpMyAdminLogin', $data ?? [], null);
        $this->setIfExists('sqlMode', $data ?? [], null);
        $this->setIfExists('unixSocket', $data ?? [], null);
        $this->setIfExists('version', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['address'] === null) {
            $invalidProperties[] = "'address' can't be null";
        }
        if ($this->container['defaultHostPatterns'] === null) {
            $invalidProperties[] = "'defaultHostPatterns' can't be null";
        }
        if ($this->container['maxDatabaseLength'] === null) {
            $invalidProperties[] = "'maxDatabaseLength' can't be null";
        }
        if ($this->container['maxHostsPerUser'] === null) {
            $invalidProperties[] = "'maxHostsPerUser' can't be null";
        }
        if ($this->container['maxUsernameLength'] === null) {
            $invalidProperties[] = "'maxUsernameLength' can't be null";
        }
        if ($this->container['oneClickPhpMyAdminLogin'] === null) {
            $invalidProperties[] = "'oneClickPhpMyAdminLogin' can't be null";
        }
        if ($this->container['sqlMode'] === null) {
            $invalidProperties[] = "'sqlMode' can't be null";
        }
        if ($this->container['unixSocket'] === null) {
            $invalidProperties[] = "'unixSocket' can't be null";
        }
        if ($this->container['version'] === null) {
            $invalidProperties[] = "'version' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets address
     *
     * @return string
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param string $address Database address. If unixSocket is true, it's a path to the unixsocket, otherwise it's an URL.
     *
     * @return self
     */
    public function setAddress($address)
    {
        if (is_null($address)) {
            throw new \InvalidArgumentException('non-nullable address cannot be null');
        }
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets defaultHostPatterns
     *
     * @return string[]
     */
    public function getDefaultHostPatterns()
    {
        return $this->container['defaultHostPatterns'];
    }

    /**
     * Sets defaultHostPatterns
     *
     * @param string[] $defaultHostPatterns defaultHostPatterns
     *
     * @return self
     */
    public function setDefaultHostPatterns($defaultHostPatterns)
    {
        if (is_null($defaultHostPatterns)) {
            throw new \InvalidArgumentException('non-nullable defaultHostPatterns cannot be null');
        }
        $this->container['defaultHostPatterns'] = $defaultHostPatterns;

        return $this;
    }

    /**
     * Gets maxDatabaseLength
     *
     * @return int
     */
    public function getMaxDatabaseLength()
    {
        return $this->container['maxDatabaseLength'];
    }

    /**
     * Sets maxDatabaseLength
     *
     * @param int $maxDatabaseLength maxDatabaseLength
     *
     * @return self
     */
    public function setMaxDatabaseLength($maxDatabaseLength)
    {
        if (is_null($maxDatabaseLength)) {
            throw new \InvalidArgumentException('non-nullable maxDatabaseLength cannot be null');
        }
        $this->container['maxDatabaseLength'] = $maxDatabaseLength;

        return $this;
    }

    /**
     * Gets maxHostsPerUser
     *
     * @return int
     */
    public function getMaxHostsPerUser()
    {
        return $this->container['maxHostsPerUser'];
    }

    /**
     * Sets maxHostsPerUser
     *
     * @param int $maxHostsPerUser maxHostsPerUser
     *
     * @return self
     */
    public function setMaxHostsPerUser($maxHostsPerUser)
    {
        if (is_null($maxHostsPerUser)) {
            throw new \InvalidArgumentException('non-nullable maxHostsPerUser cannot be null');
        }
        $this->container['maxHostsPerUser'] = $maxHostsPerUser;

        return $this;
    }

    /**
     * Gets maxUsernameLength
     *
     * @return int
     */
    public function getMaxUsernameLength()
    {
        return $this->container['maxUsernameLength'];
    }

    /**
     * Sets maxUsernameLength
     *
     * @param int $maxUsernameLength maxUsernameLength
     *
     * @return self
     */
    public function setMaxUsernameLength($maxUsernameLength)
    {
        if (is_null($maxUsernameLength)) {
            throw new \InvalidArgumentException('non-nullable maxUsernameLength cannot be null');
        }
        $this->container['maxUsernameLength'] = $maxUsernameLength;

        return $this;
    }

    /**
     * Gets oneClickPhpMyAdminLogin
     *
     * @return bool
     */
    public function getOneClickPhpMyAdminLogin()
    {
        return $this->container['oneClickPhpMyAdminLogin'];
    }

    /**
     * Sets oneClickPhpMyAdminLogin
     *
     * @param bool $oneClickPhpMyAdminLogin oneClickPhpMyAdminLogin
     *
     * @return self
     */
    public function setOneClickPhpMyAdminLogin($oneClickPhpMyAdminLogin)
    {
        if (is_null($oneClickPhpMyAdminLogin)) {
            throw new \InvalidArgumentException('non-nullable oneClickPhpMyAdminLogin cannot be null');
        }
        $this->container['oneClickPhpMyAdminLogin'] = $oneClickPhpMyAdminLogin;

        return $this;
    }

    /**
     * Gets sqlMode
     *
     * @return string[]
     */
    public function getSqlMode()
    {
        return $this->container['sqlMode'];
    }

    /**
     * Sets sqlMode
     *
     * @param string[] $sqlMode sqlMode
     *
     * @return self
     */
    public function setSqlMode($sqlMode)
    {
        if (is_null($sqlMode)) {
            throw new \InvalidArgumentException('non-nullable sqlMode cannot be null');
        }
        $this->container['sqlMode'] = $sqlMode;

        return $this;
    }

    /**
     * Gets unixSocket
     *
     * @return bool
     */
    public function getUnixSocket()
    {
        return $this->container['unixSocket'];
    }

    /**
     * Sets unixSocket
     *
     * @param bool $unixSocket unixSocket
     *
     * @return self
     */
    public function setUnixSocket($unixSocket)
    {
        if (is_null($unixSocket)) {
            throw new \InvalidArgumentException('non-nullable unixSocket cannot be null');
        }
        $this->container['unixSocket'] = $unixSocket;

        return $this;
    }

    /**
     * Gets version
     *
     * @return string
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     *
     * @param string $version version
     *
     * @return self
     */
    public function setVersion($version)
    {
        if (is_null($version)) {
            throw new \InvalidArgumentException('non-nullable version cannot be null');
        }
        $this->container['version'] = $version;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


