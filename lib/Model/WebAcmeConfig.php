<?php
/**
 * WebAcmeConfig
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  COMPITAUT\DirectAdminAPI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Swagger DirectAdmin API
 *
 * Swagger API for DirectAdmin server
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@directadmin.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace COMPITAUT\DirectAdminAPI\Model;

use \ArrayAccess;
use \COMPITAUT\DirectAdminAPI\ObjectSerializer;

/**
 * WebAcmeConfig Class Doc Comment
 *
 * @category Class
 * @package  COMPITAUT\DirectAdminAPI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class WebAcmeConfig implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'web.acmeConfig';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'account' => 'string',
        'additionalDomains' => 'string[]',
        'dnsEnvironment' => 'array<string,string>',
        'dnsProvider' => 'string',
        'enabled' => 'bool',
        'keyType' => 'string',
        'provider' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'account' => null,
        'additionalDomains' => null,
        'dnsEnvironment' => null,
        'dnsProvider' => null,
        'enabled' => null,
        'keyType' => null,
        'provider' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'account' => false,
        'additionalDomains' => false,
        'dnsEnvironment' => false,
        'dnsProvider' => false,
        'enabled' => false,
        'keyType' => false,
        'provider' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'account' => 'account',
        'additionalDomains' => 'additionalDomains',
        'dnsEnvironment' => 'dnsEnvironment',
        'dnsProvider' => 'dnsProvider',
        'enabled' => 'enabled',
        'keyType' => 'keyType',
        'provider' => 'provider'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'account' => 'setAccount',
        'additionalDomains' => 'setAdditionalDomains',
        'dnsEnvironment' => 'setDnsEnvironment',
        'dnsProvider' => 'setDnsProvider',
        'enabled' => 'setEnabled',
        'keyType' => 'setKeyType',
        'provider' => 'setProvider'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'account' => 'getAccount',
        'additionalDomains' => 'getAdditionalDomains',
        'dnsEnvironment' => 'getDnsEnvironment',
        'dnsProvider' => 'getDnsProvider',
        'enabled' => 'getEnabled',
        'keyType' => 'getKeyType',
        'provider' => 'getProvider'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const KEY_TYPE_EC256 = 'ec256';
    public const KEY_TYPE_EC384 = 'ec384';
    public const KEY_TYPE_RSA2048 = 'rsa2048';
    public const KEY_TYPE_RSA3072 = 'rsa3072';
    public const KEY_TYPE_RSA4096 = 'rsa4096';
    public const KEY_TYPE_RSA8192 = 'rsa8192';
    public const PROVIDER_EMPTY = '';
    public const PROVIDER_LETSENCRYPT = 'letsencrypt';
    public const PROVIDER_LETSENCRYPT_STAGING = 'letsencrypt-staging';
    public const PROVIDER_ZEROSSL = 'zerossl';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getKeyTypeAllowableValues()
    {
        return [
            self::KEY_TYPE_EC256,
            self::KEY_TYPE_EC384,
            self::KEY_TYPE_RSA2048,
            self::KEY_TYPE_RSA3072,
            self::KEY_TYPE_RSA4096,
            self::KEY_TYPE_RSA8192,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getProviderAllowableValues()
    {
        return [
            self::PROVIDER_EMPTY,
            self::PROVIDER_LETSENCRYPT,
            self::PROVIDER_LETSENCRYPT_STAGING,
            self::PROVIDER_ZEROSSL,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('account', $data ?? [], null);
        $this->setIfExists('additionalDomains', $data ?? [], null);
        $this->setIfExists('dnsEnvironment', $data ?? [], null);
        $this->setIfExists('dnsProvider', $data ?? [], null);
        $this->setIfExists('enabled', $data ?? [], null);
        $this->setIfExists('keyType', $data ?? [], null);
        $this->setIfExists('provider', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['account'] === null) {
            $invalidProperties[] = "'account' can't be null";
        }
        if ($this->container['additionalDomains'] === null) {
            $invalidProperties[] = "'additionalDomains' can't be null";
        }
        if ($this->container['dnsEnvironment'] === null) {
            $invalidProperties[] = "'dnsEnvironment' can't be null";
        }
        if ($this->container['dnsProvider'] === null) {
            $invalidProperties[] = "'dnsProvider' can't be null";
        }
        if ($this->container['enabled'] === null) {
            $invalidProperties[] = "'enabled' can't be null";
        }
        if ($this->container['keyType'] === null) {
            $invalidProperties[] = "'keyType' can't be null";
        }
        $allowedValues = $this->getKeyTypeAllowableValues();
        if (!is_null($this->container['keyType']) && !in_array($this->container['keyType'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'keyType', must be one of '%s'",
                $this->container['keyType'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['provider'] === null) {
            $invalidProperties[] = "'provider' can't be null";
        }
        $allowedValues = $this->getProviderAllowableValues();
        if (!is_null($this->container['provider']) && !in_array($this->container['provider'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'provider', must be one of '%s'",
                $this->container['provider'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets account
     *
     * @return string
     */
    public function getAccount()
    {
        return $this->container['account'];
    }

    /**
     * Sets account
     *
     * @param string $account account
     *
     * @return self
     */
    public function setAccount($account)
    {
        if (is_null($account)) {
            throw new \InvalidArgumentException('non-nullable account cannot be null');
        }
        $this->container['account'] = $account;

        return $this;
    }

    /**
     * Gets additionalDomains
     *
     * @return string[]
     */
    public function getAdditionalDomains()
    {
        return $this->container['additionalDomains'];
    }

    /**
     * Sets additionalDomains
     *
     * @param string[] $additionalDomains additionalDomains
     *
     * @return self
     */
    public function setAdditionalDomains($additionalDomains)
    {
        if (is_null($additionalDomains)) {
            throw new \InvalidArgumentException('non-nullable additionalDomains cannot be null');
        }
        $this->container['additionalDomains'] = $additionalDomains;

        return $this;
    }

    /**
     * Gets dnsEnvironment
     *
     * @return array<string,string>
     */
    public function getDnsEnvironment()
    {
        return $this->container['dnsEnvironment'];
    }

    /**
     * Sets dnsEnvironment
     *
     * @param array<string,string> $dnsEnvironment dnsEnvironment
     *
     * @return self
     */
    public function setDnsEnvironment($dnsEnvironment)
    {
        if (is_null($dnsEnvironment)) {
            throw new \InvalidArgumentException('non-nullable dnsEnvironment cannot be null');
        }
        $this->container['dnsEnvironment'] = $dnsEnvironment;

        return $this;
    }

    /**
     * Gets dnsProvider
     *
     * @return string
     */
    public function getDnsProvider()
    {
        return $this->container['dnsProvider'];
    }

    /**
     * Sets dnsProvider
     *
     * @param string $dnsProvider dnsProvider
     *
     * @return self
     */
    public function setDnsProvider($dnsProvider)
    {
        if (is_null($dnsProvider)) {
            throw new \InvalidArgumentException('non-nullable dnsProvider cannot be null');
        }
        $this->container['dnsProvider'] = $dnsProvider;

        return $this;
    }

    /**
     * Gets enabled
     *
     * @return bool
     */
    public function getEnabled()
    {
        return $this->container['enabled'];
    }

    /**
     * Sets enabled
     *
     * @param bool $enabled enabled
     *
     * @return self
     */
    public function setEnabled($enabled)
    {
        if (is_null($enabled)) {
            throw new \InvalidArgumentException('non-nullable enabled cannot be null');
        }
        $this->container['enabled'] = $enabled;

        return $this;
    }

    /**
     * Gets keyType
     *
     * @return string
     */
    public function getKeyType()
    {
        return $this->container['keyType'];
    }

    /**
     * Sets keyType
     *
     * @param string $keyType keyType
     *
     * @return self
     */
    public function setKeyType($keyType)
    {
        if (is_null($keyType)) {
            throw new \InvalidArgumentException('non-nullable keyType cannot be null');
        }
        $allowedValues = $this->getKeyTypeAllowableValues();
        if (!in_array($keyType, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'keyType', must be one of '%s'",
                    $keyType,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['keyType'] = $keyType;

        return $this;
    }

    /**
     * Gets provider
     *
     * @return string
     */
    public function getProvider()
    {
        return $this->container['provider'];
    }

    /**
     * Sets provider
     *
     * @param string $provider If empty, default provider is used.
     *
     * @return self
     */
    public function setProvider($provider)
    {
        if (is_null($provider)) {
            throw new \InvalidArgumentException('non-nullable provider cannot be null');
        }
        $allowedValues = $this->getProviderAllowableValues();
        if (!in_array($provider, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'provider', must be one of '%s'",
                    $provider,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['provider'] = $provider;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


