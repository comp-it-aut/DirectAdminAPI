<?php
/**
 * WebCbOptions
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  COMPITAUT\DirectAdminAPI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Swagger DirectAdmin API
 *
 * Swagger API for DirectAdmin server
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@directadmin.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace COMPITAUT\DirectAdminAPI\Model;

use \ArrayAccess;
use \COMPITAUT\DirectAdminAPI\ObjectSerializer;

/**
 * WebCbOptions Class Doc Comment
 *
 * @category Class
 * @package  COMPITAUT\DirectAdminAPI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class WebCbOptions implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'web.cbOptions';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'advanced' => '\COMPITAUT\DirectAdminAPI\Model\WebCbOptionsCategory',
        'clamav' => '\COMPITAUT\DirectAdminAPI\Model\WebCbOptionsCategory',
        'cloudlinux' => '\COMPITAUT\DirectAdminAPI\Model\WebCbOptionsCategory',
        'cron' => '\COMPITAUT\DirectAdminAPI\Model\WebCbOptionsCategory',
        'custombuild' => '\COMPITAUT\DirectAdminAPI\Model\WebCbOptionsCategory',
        'ftp' => '\COMPITAUT\DirectAdminAPI\Model\WebCbOptionsCategory',
        'mail' => '\COMPITAUT\DirectAdminAPI\Model\WebCbOptionsCategory',
        'mysql' => '\COMPITAUT\DirectAdminAPI\Model\WebCbOptionsCategory',
        'php' => '\COMPITAUT\DirectAdminAPI\Model\WebCbOptionsCategory',
        'phpExtensions' => '\COMPITAUT\DirectAdminAPI\Model\WebCbOptionsCategory',
        'stats' => '\COMPITAUT\DirectAdminAPI\Model\WebCbOptionsCategory',
        'webapps' => '\COMPITAUT\DirectAdminAPI\Model\WebCbOptionsCategory',
        'webserver' => '\COMPITAUT\DirectAdminAPI\Model\WebCbOptionsCategory'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'advanced' => null,
        'clamav' => null,
        'cloudlinux' => null,
        'cron' => null,
        'custombuild' => null,
        'ftp' => null,
        'mail' => null,
        'mysql' => null,
        'php' => null,
        'phpExtensions' => null,
        'stats' => null,
        'webapps' => null,
        'webserver' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'advanced' => false,
        'clamav' => false,
        'cloudlinux' => false,
        'cron' => false,
        'custombuild' => false,
        'ftp' => false,
        'mail' => false,
        'mysql' => false,
        'php' => false,
        'phpExtensions' => false,
        'stats' => false,
        'webapps' => false,
        'webserver' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'advanced' => 'advanced',
        'clamav' => 'clamav',
        'cloudlinux' => 'cloudlinux',
        'cron' => 'cron',
        'custombuild' => 'custombuild',
        'ftp' => 'ftp',
        'mail' => 'mail',
        'mysql' => 'mysql',
        'php' => 'php',
        'phpExtensions' => 'phpExtensions',
        'stats' => 'stats',
        'webapps' => 'webapps',
        'webserver' => 'webserver'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'advanced' => 'setAdvanced',
        'clamav' => 'setClamav',
        'cloudlinux' => 'setCloudlinux',
        'cron' => 'setCron',
        'custombuild' => 'setCustombuild',
        'ftp' => 'setFtp',
        'mail' => 'setMail',
        'mysql' => 'setMysql',
        'php' => 'setPhp',
        'phpExtensions' => 'setPhpExtensions',
        'stats' => 'setStats',
        'webapps' => 'setWebapps',
        'webserver' => 'setWebserver'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'advanced' => 'getAdvanced',
        'clamav' => 'getClamav',
        'cloudlinux' => 'getCloudlinux',
        'cron' => 'getCron',
        'custombuild' => 'getCustombuild',
        'ftp' => 'getFtp',
        'mail' => 'getMail',
        'mysql' => 'getMysql',
        'php' => 'getPhp',
        'phpExtensions' => 'getPhpExtensions',
        'stats' => 'getStats',
        'webapps' => 'getWebapps',
        'webserver' => 'getWebserver'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('advanced', $data ?? [], null);
        $this->setIfExists('clamav', $data ?? [], null);
        $this->setIfExists('cloudlinux', $data ?? [], null);
        $this->setIfExists('cron', $data ?? [], null);
        $this->setIfExists('custombuild', $data ?? [], null);
        $this->setIfExists('ftp', $data ?? [], null);
        $this->setIfExists('mail', $data ?? [], null);
        $this->setIfExists('mysql', $data ?? [], null);
        $this->setIfExists('php', $data ?? [], null);
        $this->setIfExists('phpExtensions', $data ?? [], null);
        $this->setIfExists('stats', $data ?? [], null);
        $this->setIfExists('webapps', $data ?? [], null);
        $this->setIfExists('webserver', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['advanced'] === null) {
            $invalidProperties[] = "'advanced' can't be null";
        }
        if ($this->container['clamav'] === null) {
            $invalidProperties[] = "'clamav' can't be null";
        }
        if ($this->container['cloudlinux'] === null) {
            $invalidProperties[] = "'cloudlinux' can't be null";
        }
        if ($this->container['cron'] === null) {
            $invalidProperties[] = "'cron' can't be null";
        }
        if ($this->container['custombuild'] === null) {
            $invalidProperties[] = "'custombuild' can't be null";
        }
        if ($this->container['ftp'] === null) {
            $invalidProperties[] = "'ftp' can't be null";
        }
        if ($this->container['mail'] === null) {
            $invalidProperties[] = "'mail' can't be null";
        }
        if ($this->container['mysql'] === null) {
            $invalidProperties[] = "'mysql' can't be null";
        }
        if ($this->container['php'] === null) {
            $invalidProperties[] = "'php' can't be null";
        }
        if ($this->container['phpExtensions'] === null) {
            $invalidProperties[] = "'phpExtensions' can't be null";
        }
        if ($this->container['stats'] === null) {
            $invalidProperties[] = "'stats' can't be null";
        }
        if ($this->container['webapps'] === null) {
            $invalidProperties[] = "'webapps' can't be null";
        }
        if ($this->container['webserver'] === null) {
            $invalidProperties[] = "'webserver' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets advanced
     *
     * @return \COMPITAUT\DirectAdminAPI\Model\WebCbOptionsCategory
     */
    public function getAdvanced()
    {
        return $this->container['advanced'];
    }

    /**
     * Sets advanced
     *
     * @param \COMPITAUT\DirectAdminAPI\Model\WebCbOptionsCategory $advanced advanced
     *
     * @return self
     */
    public function setAdvanced($advanced)
    {
        if (is_null($advanced)) {
            throw new \InvalidArgumentException('non-nullable advanced cannot be null');
        }
        $this->container['advanced'] = $advanced;

        return $this;
    }

    /**
     * Gets clamav
     *
     * @return \COMPITAUT\DirectAdminAPI\Model\WebCbOptionsCategory
     */
    public function getClamav()
    {
        return $this->container['clamav'];
    }

    /**
     * Sets clamav
     *
     * @param \COMPITAUT\DirectAdminAPI\Model\WebCbOptionsCategory $clamav clamav
     *
     * @return self
     */
    public function setClamav($clamav)
    {
        if (is_null($clamav)) {
            throw new \InvalidArgumentException('non-nullable clamav cannot be null');
        }
        $this->container['clamav'] = $clamav;

        return $this;
    }

    /**
     * Gets cloudlinux
     *
     * @return \COMPITAUT\DirectAdminAPI\Model\WebCbOptionsCategory
     */
    public function getCloudlinux()
    {
        return $this->container['cloudlinux'];
    }

    /**
     * Sets cloudlinux
     *
     * @param \COMPITAUT\DirectAdminAPI\Model\WebCbOptionsCategory $cloudlinux cloudlinux
     *
     * @return self
     */
    public function setCloudlinux($cloudlinux)
    {
        if (is_null($cloudlinux)) {
            throw new \InvalidArgumentException('non-nullable cloudlinux cannot be null');
        }
        $this->container['cloudlinux'] = $cloudlinux;

        return $this;
    }

    /**
     * Gets cron
     *
     * @return \COMPITAUT\DirectAdminAPI\Model\WebCbOptionsCategory
     */
    public function getCron()
    {
        return $this->container['cron'];
    }

    /**
     * Sets cron
     *
     * @param \COMPITAUT\DirectAdminAPI\Model\WebCbOptionsCategory $cron cron
     *
     * @return self
     */
    public function setCron($cron)
    {
        if (is_null($cron)) {
            throw new \InvalidArgumentException('non-nullable cron cannot be null');
        }
        $this->container['cron'] = $cron;

        return $this;
    }

    /**
     * Gets custombuild
     *
     * @return \COMPITAUT\DirectAdminAPI\Model\WebCbOptionsCategory
     */
    public function getCustombuild()
    {
        return $this->container['custombuild'];
    }

    /**
     * Sets custombuild
     *
     * @param \COMPITAUT\DirectAdminAPI\Model\WebCbOptionsCategory $custombuild custombuild
     *
     * @return self
     */
    public function setCustombuild($custombuild)
    {
        if (is_null($custombuild)) {
            throw new \InvalidArgumentException('non-nullable custombuild cannot be null');
        }
        $this->container['custombuild'] = $custombuild;

        return $this;
    }

    /**
     * Gets ftp
     *
     * @return \COMPITAUT\DirectAdminAPI\Model\WebCbOptionsCategory
     */
    public function getFtp()
    {
        return $this->container['ftp'];
    }

    /**
     * Sets ftp
     *
     * @param \COMPITAUT\DirectAdminAPI\Model\WebCbOptionsCategory $ftp ftp
     *
     * @return self
     */
    public function setFtp($ftp)
    {
        if (is_null($ftp)) {
            throw new \InvalidArgumentException('non-nullable ftp cannot be null');
        }
        $this->container['ftp'] = $ftp;

        return $this;
    }

    /**
     * Gets mail
     *
     * @return \COMPITAUT\DirectAdminAPI\Model\WebCbOptionsCategory
     */
    public function getMail()
    {
        return $this->container['mail'];
    }

    /**
     * Sets mail
     *
     * @param \COMPITAUT\DirectAdminAPI\Model\WebCbOptionsCategory $mail mail
     *
     * @return self
     */
    public function setMail($mail)
    {
        if (is_null($mail)) {
            throw new \InvalidArgumentException('non-nullable mail cannot be null');
        }
        $this->container['mail'] = $mail;

        return $this;
    }

    /**
     * Gets mysql
     *
     * @return \COMPITAUT\DirectAdminAPI\Model\WebCbOptionsCategory
     */
    public function getMysql()
    {
        return $this->container['mysql'];
    }

    /**
     * Sets mysql
     *
     * @param \COMPITAUT\DirectAdminAPI\Model\WebCbOptionsCategory $mysql mysql
     *
     * @return self
     */
    public function setMysql($mysql)
    {
        if (is_null($mysql)) {
            throw new \InvalidArgumentException('non-nullable mysql cannot be null');
        }
        $this->container['mysql'] = $mysql;

        return $this;
    }

    /**
     * Gets php
     *
     * @return \COMPITAUT\DirectAdminAPI\Model\WebCbOptionsCategory
     */
    public function getPhp()
    {
        return $this->container['php'];
    }

    /**
     * Sets php
     *
     * @param \COMPITAUT\DirectAdminAPI\Model\WebCbOptionsCategory $php php
     *
     * @return self
     */
    public function setPhp($php)
    {
        if (is_null($php)) {
            throw new \InvalidArgumentException('non-nullable php cannot be null');
        }
        $this->container['php'] = $php;

        return $this;
    }

    /**
     * Gets phpExtensions
     *
     * @return \COMPITAUT\DirectAdminAPI\Model\WebCbOptionsCategory
     */
    public function getPhpExtensions()
    {
        return $this->container['phpExtensions'];
    }

    /**
     * Sets phpExtensions
     *
     * @param \COMPITAUT\DirectAdminAPI\Model\WebCbOptionsCategory $phpExtensions phpExtensions
     *
     * @return self
     */
    public function setPhpExtensions($phpExtensions)
    {
        if (is_null($phpExtensions)) {
            throw new \InvalidArgumentException('non-nullable phpExtensions cannot be null');
        }
        $this->container['phpExtensions'] = $phpExtensions;

        return $this;
    }

    /**
     * Gets stats
     *
     * @return \COMPITAUT\DirectAdminAPI\Model\WebCbOptionsCategory
     */
    public function getStats()
    {
        return $this->container['stats'];
    }

    /**
     * Sets stats
     *
     * @param \COMPITAUT\DirectAdminAPI\Model\WebCbOptionsCategory $stats stats
     *
     * @return self
     */
    public function setStats($stats)
    {
        if (is_null($stats)) {
            throw new \InvalidArgumentException('non-nullable stats cannot be null');
        }
        $this->container['stats'] = $stats;

        return $this;
    }

    /**
     * Gets webapps
     *
     * @return \COMPITAUT\DirectAdminAPI\Model\WebCbOptionsCategory
     */
    public function getWebapps()
    {
        return $this->container['webapps'];
    }

    /**
     * Sets webapps
     *
     * @param \COMPITAUT\DirectAdminAPI\Model\WebCbOptionsCategory $webapps webapps
     *
     * @return self
     */
    public function setWebapps($webapps)
    {
        if (is_null($webapps)) {
            throw new \InvalidArgumentException('non-nullable webapps cannot be null');
        }
        $this->container['webapps'] = $webapps;

        return $this;
    }

    /**
     * Gets webserver
     *
     * @return \COMPITAUT\DirectAdminAPI\Model\WebCbOptionsCategory
     */
    public function getWebserver()
    {
        return $this->container['webserver'];
    }

    /**
     * Sets webserver
     *
     * @param \COMPITAUT\DirectAdminAPI\Model\WebCbOptionsCategory $webserver webserver
     *
     * @return self
     */
    public function setWebserver($webserver)
    {
        if (is_null($webserver)) {
            throw new \InvalidArgumentException('non-nullable webserver cannot be null');
        }
        $this->container['webserver'] = $webserver;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


