<?php
/**
 * WebDbCreateDatabaseWithUserRequest
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  COMPITAUT\DirectAdminAPI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Swagger DirectAdmin API
 *
 * Swagger API for DirectAdmin server
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@directadmin.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace COMPITAUT\DirectAdminAPI\Model;

use \ArrayAccess;
use \COMPITAUT\DirectAdminAPI\ObjectSerializer;

/**
 * WebDbCreateDatabaseWithUserRequest Class Doc Comment
 *
 * @category Class
 * @package  COMPITAUT\DirectAdminAPI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class WebDbCreateDatabaseWithUserRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'web.dbCreateDatabaseWithUserRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'charset' => 'string',
        'collation' => 'string',
        'database' => 'string',
        'dbuser' => 'string',
        'hostPatterns' => 'string[]',
        'password' => 'string',
        'privileges' => '\COMPITAUT\DirectAdminAPI\Model\WebDbPrivs'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'charset' => null,
        'collation' => null,
        'database' => null,
        'dbuser' => null,
        'hostPatterns' => null,
        'password' => null,
        'privileges' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'charset' => false,
        'collation' => false,
        'database' => false,
        'dbuser' => false,
        'hostPatterns' => false,
        'password' => false,
        'privileges' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'charset' => 'charset',
        'collation' => 'collation',
        'database' => 'database',
        'dbuser' => 'dbuser',
        'hostPatterns' => 'hostPatterns',
        'password' => 'password',
        'privileges' => 'privileges'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'charset' => 'setCharset',
        'collation' => 'setCollation',
        'database' => 'setDatabase',
        'dbuser' => 'setDbuser',
        'hostPatterns' => 'setHostPatterns',
        'password' => 'setPassword',
        'privileges' => 'setPrivileges'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'charset' => 'getCharset',
        'collation' => 'getCollation',
        'database' => 'getDatabase',
        'dbuser' => 'getDbuser',
        'hostPatterns' => 'getHostPatterns',
        'password' => 'getPassword',
        'privileges' => 'getPrivileges'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('charset', $data ?? [], null);
        $this->setIfExists('collation', $data ?? [], null);
        $this->setIfExists('database', $data ?? [], null);
        $this->setIfExists('dbuser', $data ?? [], null);
        $this->setIfExists('hostPatterns', $data ?? [], null);
        $this->setIfExists('password', $data ?? [], null);
        $this->setIfExists('privileges', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['database'] === null) {
            $invalidProperties[] = "'database' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets charset
     *
     * @return string|null
     */
    public function getCharset()
    {
        return $this->container['charset'];
    }

    /**
     * Sets charset
     *
     * @param string|null $charset If empty, default server charset is used.
     *
     * @return self
     */
    public function setCharset($charset)
    {
        if (is_null($charset)) {
            throw new \InvalidArgumentException('non-nullable charset cannot be null');
        }
        $this->container['charset'] = $charset;

        return $this;
    }

    /**
     * Gets collation
     *
     * @return string|null
     */
    public function getCollation()
    {
        return $this->container['collation'];
    }

    /**
     * Sets collation
     *
     * @param string|null $collation If empty, default server collation is used.
     *
     * @return self
     */
    public function setCollation($collation)
    {
        if (is_null($collation)) {
            throw new \InvalidArgumentException('non-nullable collation cannot be null');
        }
        $this->container['collation'] = $collation;

        return $this;
    }

    /**
     * Gets database
     *
     * @return string
     */
    public function getDatabase()
    {
        return $this->container['database'];
    }

    /**
     * Sets database
     *
     * @param string $database database
     *
     * @return self
     */
    public function setDatabase($database)
    {
        if (is_null($database)) {
            throw new \InvalidArgumentException('non-nullable database cannot be null');
        }
        $this->container['database'] = $database;

        return $this;
    }

    /**
     * Gets dbuser
     *
     * @return string|null
     */
    public function getDbuser()
    {
        return $this->container['dbuser'];
    }

    /**
     * Sets dbuser
     *
     * @param string|null $dbuser If empty, database name is used.
     *
     * @return self
     */
    public function setDbuser($dbuser)
    {
        if (is_null($dbuser)) {
            throw new \InvalidArgumentException('non-nullable dbuser cannot be null');
        }
        $this->container['dbuser'] = $dbuser;

        return $this;
    }

    /**
     * Gets hostPatterns
     *
     * @return string[]|null
     */
    public function getHostPatterns()
    {
        return $this->container['hostPatterns'];
    }

    /**
     * Sets hostPatterns
     *
     * @param string[]|null $hostPatterns If empty, access hosts from mysql config are used.
     *
     * @return self
     */
    public function setHostPatterns($hostPatterns)
    {
        if (is_null($hostPatterns)) {
            throw new \InvalidArgumentException('non-nullable hostPatterns cannot be null');
        }
        $this->container['hostPatterns'] = $hostPatterns;

        return $this;
    }

    /**
     * Gets password
     *
     * @return string|null
     */
    public function getPassword()
    {
        return $this->container['password'];
    }

    /**
     * Sets password
     *
     * @param string|null $password If empty, random password is generated.
     *
     * @return self
     */
    public function setPassword($password)
    {
        if (is_null($password)) {
            throw new \InvalidArgumentException('non-nullable password cannot be null');
        }
        $this->container['password'] = $password;

        return $this;
    }

    /**
     * Gets privileges
     *
     * @return \COMPITAUT\DirectAdminAPI\Model\WebDbPrivs|null
     */
    public function getPrivileges()
    {
        return $this->container['privileges'];
    }

    /**
     * Sets privileges
     *
     * @param \COMPITAUT\DirectAdminAPI\Model\WebDbPrivs|null $privileges privileges
     *
     * @return self
     */
    public function setPrivileges($privileges)
    {
        if (is_null($privileges)) {
            throw new \InvalidArgumentException('non-nullable privileges cannot be null');
        }
        $this->container['privileges'] = $privileges;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


